// Generated from myGrammar.g4 by ANTLR 4.7.1
// jshint ignore: start
/* eslint-disable */
var antlr4 = require('antlr4/index');
var myGrammarListener = require('./myGrammarListener').myGrammarListener;
var grammarFileName = "myGrammar.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003(\u02e1\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0003\u0002\u0007\u0002\u0094\n\u0002\f\u0002\u000e\u0002",
    "\u0097\u000b\u0002\u0003\u0002\u0005\u0002\u009a\n\u0002\u0003\u0002",
    "\u0005\u0002\u009d\n\u0002\u0003\u0002\u0007\u0002\u00a0\n\u0002\f\u0002",
    "\u000e\u0002\u00a3\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u00ca\n\u0003",
    "\u0003\u0004\u0003\u0004\u0006\u0004\u00ce\n\u0004\r\u0004\u000e\u0004",
    "\u00cf\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0006\u0004\u00d6",
    "\n\u0004\r\u0004\u000e\u0004\u00d7\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0006\u0004\u00de\n\u0004\r\u0004\u000e\u0004\u00df\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0006\u0004\u00e6\n\u0004",
    "\r\u0004\u000e\u0004\u00e7\u0003\u0004\u0003\u0004\u0003\u0004\u0006",
    "\u0004\u00ed\n\u0004\r\u0004\u000e\u0004\u00ee\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0006\u0004\u00f6\n\u0004\r\u0004",
    "\u000e\u0004\u00f7\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0006\u0004\u00ff\n\u0004\r\u0004\u000e\u0004\u0100\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0006\u0004\u0108\n",
    "\u0004\r\u0004\u000e\u0004\u0109\u0003\u0004\u0003\u0004\u0005\u0004",
    "\u010e\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0006",
    "\u0005\u0114\n\u0005\r\u0005\u000e\u0005\u0115\u0003\u0005\u0003\u0005",
    "\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003",
    "\t\u0003\t\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003",
    "\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0005\u000f",
    "\u012e\n\u000f\u0003\u0010\u0003\u0010\u0005\u0010\u0132\n\u0010\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u013f",
    "\n\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013",
    "\u0005\u0013\u0146\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u014e\n\u0014\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0005\u0018\u015e\n\u0018\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u016b\n\u001b\u0003\u001c",
    "\u0003\u001c\u0005\u001c\u016f\n\u001c\u0003\u001c\u0005\u001c\u0172",
    "\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0188\n\u001f\u0005",
    "\u001f\u018a\n\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0007\u001f\u0192\n\u001f\f\u001f\u000e\u001f",
    "\u0195\u000b\u001f\u0003 \u0003 \u0005 \u0199\n \u0003 \u0005 \u019c",
    "\n \u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u01af",
    "\n#\u0005#\u01b1\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0007",
    "#\u01b9\n#\f#\u000e#\u01bc\u000b#\u0003$\u0003$\u0005$\u01c0\n$\u0003",
    "$\u0005$\u01c3\n$\u0003%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003\'",
    "\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0005\'\u01d7\n\'\u0005\'\u01d9\n\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u01e1\n\'\f\'\u000e\'\u01e4",
    "\u000b\'\u0003(\u0003(\u0005(\u01e8\n(\u0003)\u0003)\u0003)\u0003)\u0005",
    ")\u01ee\n)\u0003*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0005+\u01fa\n+\u0005+\u01fc\n+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0007+\u0204\n+\f+\u000e+\u0207\u000b+\u0003,\u0003",
    ",\u0005,\u020b\n,\u0003-\u0003-\u0003-\u0005-\u0210\n-\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0005.\u0218\n.\u0003/\u0003/\u0005/\u021c",
    "\n/\u00030\u00030\u00030\u00030\u00030\u00030\u00050\u0224\n0\u0003",
    "1\u00031\u00031\u00032\u00032\u00052\u022b\n2\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00053\u0233\n3\u00034\u00034\u00034\u00035\u00035\u0005",
    "5\u023a\n5\u00036\u00036\u00036\u00037\u00037\u00037\u00038\u00038\u0005",
    "8\u0244\n8\u00038\u00058\u0247\n8\u00039\u00039\u00039\u00039\u0005",
    "9\u024d\n9\u0003:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u025d\n;\u0005;\u025f\n",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0007;\u0267\n;\f;\u000e",
    ";\u026a\u000b;\u0003<\u0003<\u0005<\u026e\n<\u0003<\u0005<\u0271\n<",
    "\u0003=\u0003=\u0003=\u0003=\u0005=\u0277\n=\u0003>\u0003>\u0003>\u0003",
    "?\u0003?\u0005?\u027e\n?\u0003?\u0005?\u0281\n?\u0003@\u0003@\u0003",
    "@\u0003A\u0003A\u0003A\u0003B\u0003B\u0005B\u028b\nB\u0003B\u0005B\u028e",
    "\nB\u0003C\u0003C\u0003C\u0003D\u0003D\u0003D\u0003E\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0003E\u0003E\u0005E\u02a8\nE\u0005E\u02aa\nE\u0003",
    "E\u0003E\u0003E\u0003E\u0003E\u0003E\u0007E\u02b2\nE\fE\u000eE\u02b5",
    "\u000bE\u0003F\u0003F\u0005F\u02b9\nF\u0003F\u0005F\u02bc\nF\u0003G",
    "\u0003G\u0003G\u0005G\u02c1\nG\u0003H\u0003H\u0003H\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0005",
    "I\u02d2\nI\u0005I\u02d4\nI\u0003I\u0003I\u0003I\u0003I\u0003I\u0003",
    "I\u0007I\u02dc\nI\fI\u000eI\u02df\u000bI\u0003I\u0002\t<DLTt\u0088\u0090",
    "J\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0002\u0003\u0004\u0002",
    "\u0007\n\u0014\u0015\u0002\u032c\u0002\u0099\u0003\u0002\u0002\u0002",
    "\u0004\u00c9\u0003\u0002\u0002\u0002\u0006\u010d\u0003\u0002\u0002\u0002",
    "\b\u010f\u0003\u0002\u0002\u0002\n\u0119\u0003\u0002\u0002\u0002\f\u011b",
    "\u0003\u0002\u0002\u0002\u000e\u011d\u0003\u0002\u0002\u0002\u0010\u011f",
    "\u0003\u0002\u0002\u0002\u0012\u0121\u0003\u0002\u0002\u0002\u0014\u0123",
    "\u0003\u0002\u0002\u0002\u0016\u0125\u0003\u0002\u0002\u0002\u0018\u0127",
    "\u0003\u0002\u0002\u0002\u001a\u0129\u0003\u0002\u0002\u0002\u001c\u012d",
    "\u0003\u0002\u0002\u0002\u001e\u012f\u0003\u0002\u0002\u0002 \u0133",
    "\u0003\u0002\u0002\u0002\"\u0140\u0003\u0002\u0002\u0002$\u0143\u0003",
    "\u0002\u0002\u0002&\u0147\u0003\u0002\u0002\u0002(\u014f\u0003\u0002",
    "\u0002\u0002*\u0152\u0003\u0002\u0002\u0002,\u0155\u0003\u0002\u0002",
    "\u0002.\u0158\u0003\u0002\u0002\u00020\u015f\u0003\u0002\u0002\u0002",
    "2\u0162\u0003\u0002\u0002\u00024\u0165\u0003\u0002\u0002\u00026\u016c",
    "\u0003\u0002\u0002\u00028\u0173\u0003\u0002\u0002\u0002:\u0176\u0003",
    "\u0002\u0002\u0002<\u0189\u0003\u0002\u0002\u0002>\u0196\u0003\u0002",
    "\u0002\u0002@\u019d\u0003\u0002\u0002\u0002B\u01a0\u0003\u0002\u0002",
    "\u0002D\u01b0\u0003\u0002\u0002\u0002F\u01bd\u0003\u0002\u0002\u0002",
    "H\u01c4\u0003\u0002\u0002\u0002J\u01c7\u0003\u0002\u0002\u0002L\u01d8",
    "\u0003\u0002\u0002\u0002N\u01e5\u0003\u0002\u0002\u0002P\u01e9\u0003",
    "\u0002\u0002\u0002R\u01ef\u0003\u0002\u0002\u0002T\u01fb\u0003\u0002",
    "\u0002\u0002V\u0208\u0003\u0002\u0002\u0002X\u020c\u0003\u0002\u0002",
    "\u0002Z\u0217\u0003\u0002\u0002\u0002\\\u0219\u0003\u0002\u0002\u0002",
    "^\u021d\u0003\u0002\u0002\u0002`\u0225\u0003\u0002\u0002\u0002b\u0228",
    "\u0003\u0002\u0002\u0002d\u022c\u0003\u0002\u0002\u0002f\u0234\u0003",
    "\u0002\u0002\u0002h\u0237\u0003\u0002\u0002\u0002j\u023b\u0003\u0002",
    "\u0002\u0002l\u023e\u0003\u0002\u0002\u0002n\u0241\u0003\u0002\u0002",
    "\u0002p\u0248\u0003\u0002\u0002\u0002r\u024e\u0003\u0002\u0002\u0002",
    "t\u025e\u0003\u0002\u0002\u0002v\u026b\u0003\u0002\u0002\u0002x\u0272",
    "\u0003\u0002\u0002\u0002z\u0278\u0003\u0002\u0002\u0002|\u027b\u0003",
    "\u0002\u0002\u0002~\u0282\u0003\u0002\u0002\u0002\u0080\u0285\u0003",
    "\u0002\u0002\u0002\u0082\u0288\u0003\u0002\u0002\u0002\u0084\u028f\u0003",
    "\u0002\u0002\u0002\u0086\u0292\u0003\u0002\u0002\u0002\u0088\u02a9\u0003",
    "\u0002\u0002\u0002\u008a\u02b6\u0003\u0002\u0002\u0002\u008c\u02bd\u0003",
    "\u0002\u0002\u0002\u008e\u02c2\u0003\u0002\u0002\u0002\u0090\u02d3\u0003",
    "\u0002\u0002\u0002\u0092\u0094\u0005\u000e\b\u0002\u0093\u0092\u0003",
    "\u0002\u0002\u0002\u0094\u0097\u0003\u0002\u0002\u0002\u0095\u0093\u0003",
    "\u0002\u0002\u0002\u0095\u0096\u0003\u0002\u0002\u0002\u0096\u009a\u0003",
    "\u0002\u0002\u0002\u0097\u0095\u0003\u0002\u0002\u0002\u0098\u009a\u0005",
    "\u0004\u0003\u0002\u0099\u0095\u0003\u0002\u0002\u0002\u0099\u0098\u0003",
    "\u0002\u0002\u0002\u009a\u009c\u0003\u0002\u0002\u0002\u009b\u009d\u0005",
    "\f\u0007\u0002\u009c\u009b\u0003\u0002\u0002\u0002\u009c\u009d\u0003",
    "\u0002\u0002\u0002\u009d\u00a1\u0003\u0002\u0002\u0002\u009e\u00a0\u0007",
    "\u0013\u0002\u0002\u009f\u009e\u0003\u0002\u0002\u0002\u00a0\u00a3\u0003",
    "\u0002\u0002\u0002\u00a1\u009f\u0003\u0002\u0002\u0002\u00a1\u00a2\u0003",
    "\u0002\u0002\u0002\u00a2\u00a4\u0003\u0002\u0002\u0002\u00a3\u00a1\u0003",
    "\u0002\u0002\u0002\u00a4\u00a5\u0007\u0002\u0002\u0003\u00a5\u0003\u0003",
    "\u0002\u0002\u0002\u00a6\u00a7\u00056\u001c\u0002\u00a7\u00a8\u0005",
    "\u0010\t\u0002\u00a8\u00a9\u0005\u0018\r\u0002\u00a9\u00aa\u0005<\u001f",
    "\u0002\u00aa\u00ca\u0003\u0002\u0002\u0002\u00ab\u00ac\u0005> \u0002",
    "\u00ac\u00ad\u0005\u0010\t\u0002\u00ad\u00ae\u0005\u0018\r\u0002\u00ae",
    "\u00af\u0005D#\u0002\u00af\u00ca\u0003\u0002\u0002\u0002\u00b0\u00b1",
    "\u0005F$\u0002\u00b1\u00b2\u0005\u0010\t\u0002\u00b2\u00b3\u0005\u0018",
    "\r\u0002\u00b3\u00b4\u0005L\'\u0002\u00b4\u00ca\u0003\u0002\u0002\u0002",
    "\u00b5\u00b6\u0005\u0082B\u0002\u00b6\u00b7\u0005\u0010\t\u0002\u00b7",
    "\u00b8\u0005\u0018\r\u0002\u00b8\u00b9\u0005\u0088E\u0002\u00b9\u00ca",
    "\u0003\u0002\u0002\u0002\u00ba\u00bb\u0005\u008aF\u0002\u00bb\u00bc",
    "\u0005\u0010\t\u0002\u00bc\u00bd\u0005\u0018\r\u0002\u00bd\u00be\u0005",
    "\u0090I\u0002\u00be\u00ca\u0003\u0002\u0002\u0002\u00bf\u00c0\u0005",
    "N(\u0002\u00c0\u00c1\u0005\u0010\t\u0002\u00c1\u00c2\u0005\u0018\r\u0002",
    "\u00c2\u00c3\u0005T+\u0002\u00c3\u00ca\u0003\u0002\u0002\u0002\u00c4",
    "\u00c5\u0005n8\u0002\u00c5\u00c6\u0005\u0010\t\u0002\u00c6\u00c7\u0005",
    "\u0018\r\u0002\u00c7\u00c8\u0005t;\u0002\u00c8\u00ca\u0003\u0002\u0002",
    "\u0002\u00c9\u00a6\u0003\u0002\u0002\u0002\u00c9\u00ab\u0003\u0002\u0002",
    "\u0002\u00c9\u00b0\u0003\u0002\u0002\u0002\u00c9\u00b5\u0003\u0002\u0002",
    "\u0002\u00c9\u00ba\u0003\u0002\u0002\u0002\u00c9\u00bf\u0003\u0002\u0002",
    "\u0002\u00c9\u00c4\u0003\u0002\u0002\u0002\u00ca\u0005\u0003\u0002\u0002",
    "\u0002\u00cb\u00cd\u0007\u0003\u0002\u0002\u00cc\u00ce\u0007\u0012\u0002",
    "\u0002\u00cd\u00cc\u0003\u0002\u0002\u0002\u00ce\u00cf\u0003\u0002\u0002",
    "\u0002\u00cf\u00cd\u0003\u0002\u0002\u0002\u00cf\u00d0\u0003\u0002\u0002",
    "\u0002\u00d0\u00d1\u0003\u0002\u0002\u0002\u00d1\u010e\u0007\u0003\u0002",
    "\u0002\u00d2\u00d3\u0007\u0003\u0002\u0002\u00d3\u00d5\u0007\u0004\u0002",
    "\u0002\u00d4\u00d6\u0007\u0012\u0002\u0002\u00d5\u00d4\u0003\u0002\u0002",
    "\u0002\u00d6\u00d7\u0003\u0002\u0002\u0002\u00d7\u00d5\u0003\u0002\u0002",
    "\u0002\u00d7\u00d8\u0003\u0002\u0002\u0002\u00d8\u00d9\u0003\u0002\u0002",
    "\u0002\u00d9\u010e\u0007\u0003\u0002\u0002\u00da\u00db\u0007\u0003\u0002",
    "\u0002\u00db\u00dd\u0007\u0005\u0002\u0002\u00dc\u00de\u0007\u0012\u0002",
    "\u0002\u00dd\u00dc\u0003\u0002\u0002\u0002\u00de\u00df\u0003\u0002\u0002",
    "\u0002\u00df\u00dd\u0003\u0002\u0002\u0002\u00df\u00e0\u0003\u0002\u0002",
    "\u0002\u00e0\u00e1\u0003\u0002\u0002\u0002\u00e1\u010e\u0007\u0003\u0002",
    "\u0002\u00e2\u00e3\u0007\u0003\u0002\u0002\u00e3\u00e5\u0007\u0006\u0002",
    "\u0002\u00e4\u00e6\u0007\u0012\u0002\u0002\u00e5\u00e4\u0003\u0002\u0002",
    "\u0002\u00e6\u00e7\u0003\u0002\u0002\u0002\u00e7\u00e5\u0003\u0002\u0002",
    "\u0002\u00e7\u00e8\u0003\u0002\u0002\u0002\u00e8\u00e9\u0003\u0002\u0002",
    "\u0002\u00e9\u010e\u0007\u0003\u0002\u0002\u00ea\u00ec\u0007\u0003\u0002",
    "\u0002\u00eb\u00ed\u0007\u0012\u0002\u0002\u00ec\u00eb\u0003\u0002\u0002",
    "\u0002\u00ed\u00ee\u0003\u0002\u0002\u0002\u00ee\u00ec\u0003\u0002\u0002",
    "\u0002\u00ee\u00ef\u0003\u0002\u0002\u0002\u00ef\u00f0\u0003\u0002\u0002",
    "\u0002\u00f0\u00f1\u0007\u0005\u0002\u0002\u00f1\u010e\u0007\u0003\u0002",
    "\u0002\u00f2\u00f3\u0007\u0003\u0002\u0002\u00f3\u00f5\u0007\u0004\u0002",
    "\u0002\u00f4\u00f6\u0007\u0012\u0002\u0002\u00f5\u00f4\u0003\u0002\u0002",
    "\u0002\u00f6\u00f7\u0003\u0002\u0002\u0002\u00f7\u00f5\u0003\u0002\u0002",
    "\u0002\u00f7\u00f8\u0003\u0002\u0002\u0002\u00f8\u00f9\u0003\u0002\u0002",
    "\u0002\u00f9\u00fa\u0007\u0005\u0002\u0002\u00fa\u010e\u0007\u0003\u0002",
    "\u0002\u00fb\u00fc\u0007\u0003\u0002\u0002\u00fc\u00fe\u0007\u0005\u0002",
    "\u0002\u00fd\u00ff\u0007\u0012\u0002\u0002\u00fe\u00fd\u0003\u0002\u0002",
    "\u0002\u00ff\u0100\u0003\u0002\u0002\u0002\u0100\u00fe\u0003\u0002\u0002",
    "\u0002\u0100\u0101\u0003\u0002\u0002\u0002\u0101\u0102\u0003\u0002\u0002",
    "\u0002\u0102\u0103\u0007\u0005\u0002\u0002\u0103\u010e\u0007\u0003\u0002",
    "\u0002\u0104\u0105\u0007\u0003\u0002\u0002\u0105\u0107\u0007\u0006\u0002",
    "\u0002\u0106\u0108\u0007\u0012\u0002\u0002\u0107\u0106\u0003\u0002\u0002",
    "\u0002\u0108\u0109\u0003\u0002\u0002\u0002\u0109\u0107\u0003\u0002\u0002",
    "\u0002\u0109\u010a\u0003\u0002\u0002\u0002\u010a\u010b\u0003\u0002\u0002",
    "\u0002\u010b\u010c\u0007\u0005\u0002\u0002\u010c\u010e\u0007\u0003\u0002",
    "\u0002\u010d\u00cb\u0003\u0002\u0002\u0002\u010d\u00d2\u0003\u0002\u0002",
    "\u0002\u010d\u00da\u0003\u0002\u0002\u0002\u010d\u00e2\u0003\u0002\u0002",
    "\u0002\u010d\u00ea\u0003\u0002\u0002\u0002\u010d\u00f2\u0003\u0002\u0002",
    "\u0002\u010d\u00fb\u0003\u0002\u0002\u0002\u010d\u0104\u0003\u0002\u0002",
    "\u0002\u010e\u0007\u0003\u0002\u0002\u0002\u010f\u0113\u0007\u0003\u0002",
    "\u0002\u0110\u0114\u0007\u0012\u0002\u0002\u0111\u0114\u0005\n\u0006",
    "\u0002\u0112\u0114\u0007\u0011\u0002\u0002\u0113\u0110\u0003\u0002\u0002",
    "\u0002\u0113\u0111\u0003\u0002\u0002\u0002\u0113\u0112\u0003\u0002\u0002",
    "\u0002\u0114\u0115\u0003\u0002\u0002\u0002\u0115\u0113\u0003\u0002\u0002",
    "\u0002\u0115\u0116\u0003\u0002\u0002\u0002\u0116\u0117\u0003\u0002\u0002",
    "\u0002\u0117\u0118\u0007\u0003\u0002\u0002\u0118\t\u0003\u0002\u0002",
    "\u0002\u0119\u011a\t\u0002\u0002\u0002\u011a\u000b\u0003\u0002\u0002",
    "\u0002\u011b\u011c\u0007\u0007\u0002\u0002\u011c\r\u0003\u0002\u0002",
    "\u0002\u011d\u011e\u0007\u0013\u0002\u0002\u011e\u000f\u0003\u0002\u0002",
    "\u0002\u011f\u0120\u0007\u000b\u0002\u0002\u0120\u0011\u0003\u0002\u0002",
    "\u0002\u0121\u0122\u0007\f\u0002\u0002\u0122\u0013\u0003\u0002\u0002",
    "\u0002\u0123\u0124\u0007\r\u0002\u0002\u0124\u0015\u0003\u0002\u0002",
    "\u0002\u0125\u0126\u0007\u000e\u0002\u0002\u0126\u0017\u0003\u0002\u0002",
    "\u0002\u0127\u0128\u0007\u000f\u0002\u0002\u0128\u0019\u0003\u0002\u0002",
    "\u0002\u0129\u012a\u0007\u0010\u0002\u0002\u012a\u001b\u0003\u0002\u0002",
    "\u0002\u012b\u012e\u0005\u0014\u000b\u0002\u012c\u012e\u0005\u0016\f",
    "\u0002\u012d\u012b\u0003\u0002\u0002\u0002\u012d\u012c\u0003\u0002\u0002",
    "\u0002\u012e\u001d\u0003\u0002\u0002\u0002\u012f\u0131\u0007\u0016\u0002",
    "\u0002\u0130\u0132\u0005\"\u0012\u0002\u0131\u0130\u0003\u0002\u0002",
    "\u0002\u0131\u0132\u0003\u0002\u0002\u0002\u0132\u001f\u0003\u0002\u0002",
    "\u0002\u0133\u013e\u0005\u0012\n\u0002\u0134\u013f\u0005\u0082B\u0002",
    "\u0135\u013f\u00056\u001c\u0002\u0136\u013f\u0005> \u0002\u0137\u013f",
    "\u0005n8\u0002\u0138\u013f\u0005N(\u0002\u0139\u013f\u0005$\u0013\u0002",
    "\u013a\u013f\u0005V,\u0002\u013b\u013f\u0005F$\u0002\u013c\u013f\u0005",
    "*\u0016\u0002\u013d\u013f\u00050\u0019\u0002\u013e\u0134\u0003\u0002",
    "\u0002\u0002\u013e\u0135\u0003\u0002\u0002\u0002\u013e\u0136\u0003\u0002",
    "\u0002\u0002\u013e\u0137\u0003\u0002\u0002\u0002\u013e\u0138\u0003\u0002",
    "\u0002\u0002\u013e\u0139\u0003\u0002\u0002\u0002\u013e\u013a\u0003\u0002",
    "\u0002\u0002\u013e\u013b\u0003\u0002\u0002\u0002\u013e\u013c\u0003\u0002",
    "\u0002\u0002\u013e\u013d\u0003\u0002\u0002\u0002\u013f!\u0003\u0002",
    "\u0002\u0002\u0140\u0141\u0005\u0006\u0004\u0002\u0141\u0142\u0007\u0011",
    "\u0002\u0002\u0142#\u0003\u0002\u0002\u0002\u0143\u0145\u0007\u0017",
    "\u0002\u0002\u0144\u0146\u0005(\u0015\u0002\u0145\u0144\u0003\u0002",
    "\u0002\u0002\u0145\u0146\u0003\u0002\u0002\u0002\u0146%\u0003\u0002",
    "\u0002\u0002\u0147\u014d\u0005\u0012\n\u0002\u0148\u014e\u0005\u0082",
    "B\u0002\u0149\u014e\u00056\u001c\u0002\u014a\u014e\u0005F$\u0002\u014b",
    "\u014e\u0005> \u0002\u014c\u014e\u0005n8\u0002\u014d\u0148\u0003\u0002",
    "\u0002\u0002\u014d\u0149\u0003\u0002\u0002\u0002\u014d\u014a\u0003\u0002",
    "\u0002\u0002\u014d\u014b\u0003\u0002\u0002\u0002\u014d\u014c\u0003\u0002",
    "\u0002\u0002\u014e\'\u0003\u0002\u0002\u0002\u014f\u0150\u0005\b\u0005",
    "\u0002\u0150\u0151\u0007\u0011\u0002\u0002\u0151)\u0003\u0002\u0002",
    "\u0002\u0152\u0153\u0007\u0018\u0002\u0002\u0153\u0154\u0005.\u0018",
    "\u0002\u0154+\u0003\u0002\u0002\u0002\u0155\u0156\u0005\u0012\n\u0002",
    "\u0156\u0157\u0005\u0082B\u0002\u0157-\u0003\u0002\u0002\u0002\u0158",
    "\u015d\u0005\u0012\n\u0002\u0159\u015a\u0005\u0006\u0004\u0002\u015a",
    "\u015b\u0007\u0011\u0002\u0002\u015b\u015e\u0003\u0002\u0002\u0002\u015c",
    "\u015e\u0007\u0019\u0002\u0002\u015d\u0159\u0003\u0002\u0002\u0002\u015d",
    "\u015c\u0003\u0002\u0002\u0002\u015e/\u0003\u0002\u0002\u0002\u015f",
    "\u0160\u0007\u001a\u0002\u0002\u0160\u0161\u00054\u001b\u0002\u0161",
    "1\u0003\u0002\u0002\u0002\u0162\u0163\u0005\u0012\n\u0002\u0163\u0164",
    "\u0005\u0082B\u0002\u01643\u0003\u0002\u0002\u0002\u0165\u016a\u0005",
    "\u0012\n\u0002\u0166\u0167\u0005\u0006\u0004\u0002\u0167\u0168\u0007",
    "\u0011\u0002\u0002\u0168\u016b\u0003\u0002\u0002\u0002\u0169\u016b\u0007",
    "\u001b\u0002\u0002\u016a\u0166\u0003\u0002\u0002\u0002\u016a\u0169\u0003",
    "\u0002\u0002\u0002\u016b5\u0003\u0002\u0002\u0002\u016c\u016e\u0007",
    "\u001c\u0002\u0002\u016d\u016f\u0005:\u001e\u0002\u016e\u016d\u0003",
    "\u0002\u0002\u0002\u016e\u016f\u0003\u0002\u0002\u0002\u016f\u0171\u0003",
    "\u0002\u0002\u0002\u0170\u0172\u00058\u001d\u0002\u0171\u0170\u0003",
    "\u0002\u0002\u0002\u0171\u0172\u0003\u0002\u0002\u0002\u01727\u0003",
    "\u0002\u0002\u0002\u0173\u0174\u0005\u0012\n\u0002\u0174\u0175\u0005",
    "\u0082B\u0002\u01759\u0003\u0002\u0002\u0002\u0176\u0177\u0005\u001a",
    "\u000e\u0002\u0177\u0178\u0005<\u001f\u0002\u0178;\u0003\u0002\u0002",
    "\u0002\u0179\u017a\b\u001f\u0001\u0002\u017a\u017b\u0007\u0014\u0002",
    "\u0002\u017b\u017c\u0005<\u001f\u0002\u017c\u017d\u0007\u0015\u0002",
    "\u0002\u017d\u018a\u0003\u0002\u0002\u0002\u017e\u0188\u0005$\u0013",
    "\u0002\u017f\u0188\u0005\\/\u0002\u0180\u0188\u0005b2\u0002\u0181\u0188",
    "\u0005V,\u0002\u0182\u0188\u0005\u001e\u0010\u0002\u0183\u0188\u0005",
    "N(\u0002\u0184\u0188\u0005h5\u0002\u0185\u0188\u0005n8\u0002\u0186\u0188",
    "\u0005v<\u0002\u0187\u017e\u0003\u0002\u0002\u0002\u0187\u017f\u0003",
    "\u0002\u0002\u0002\u0187\u0180\u0003\u0002\u0002\u0002\u0187\u0181\u0003",
    "\u0002\u0002\u0002\u0187\u0182\u0003\u0002\u0002\u0002\u0187\u0183\u0003",
    "\u0002\u0002\u0002\u0187\u0184\u0003\u0002\u0002\u0002\u0187\u0185\u0003",
    "\u0002\u0002\u0002\u0187\u0186\u0003\u0002\u0002\u0002\u0188\u018a\u0003",
    "\u0002\u0002\u0002\u0189\u0179\u0003\u0002\u0002\u0002\u0189\u0187\u0003",
    "\u0002\u0002\u0002\u018a\u0193\u0003\u0002\u0002\u0002\u018b\u018c\f",
    "\u0005\u0002\u0002\u018c\u018d\u0005\u001c\u000f\u0002\u018d\u018e\u0005",
    "<\u001f\u0006\u018e\u0192\u0003\u0002\u0002\u0002\u018f\u0190\f\u0003",
    "\u0002\u0002\u0190\u0192\u0007\u0011\u0002\u0002\u0191\u018b\u0003\u0002",
    "\u0002\u0002\u0191\u018f\u0003\u0002\u0002\u0002\u0192\u0195\u0003\u0002",
    "\u0002\u0002\u0193\u0191\u0003\u0002\u0002\u0002\u0193\u0194\u0003\u0002",
    "\u0002\u0002\u0194=\u0003\u0002\u0002\u0002\u0195\u0193\u0003\u0002",
    "\u0002\u0002\u0196\u0198\u0007\u001d\u0002\u0002\u0197\u0199\u0005B",
    "\"\u0002\u0198\u0197\u0003\u0002\u0002\u0002\u0198\u0199\u0003\u0002",
    "\u0002\u0002\u0199\u019b\u0003\u0002\u0002\u0002\u019a\u019c\u0005@",
    "!\u0002\u019b\u019a\u0003\u0002\u0002\u0002\u019b\u019c\u0003\u0002",
    "\u0002\u0002\u019c?\u0003\u0002\u0002\u0002\u019d\u019e\u0005\u0012",
    "\n\u0002\u019e\u019f\u0005\u0082B\u0002\u019fA\u0003\u0002\u0002\u0002",
    "\u01a0\u01a1\u0005\u001a\u000e\u0002\u01a1\u01a2\u0005D#\u0002\u01a2",
    "C\u0003\u0002\u0002\u0002\u01a3\u01a4\b#\u0001\u0002\u01a4\u01a5\u0007",
    "\u0014\u0002\u0002\u01a5\u01a6\u0005D#\u0002\u01a6\u01a7\u0007\u0015",
    "\u0002\u0002\u01a7\u01b1\u0003\u0002\u0002\u0002\u01a8\u01af\u0005$",
    "\u0013\u0002\u01a9\u01af\u0005\\/\u0002\u01aa\u01af\u0005b2\u0002\u01ab",
    "\u01af\u0005V,\u0002\u01ac\u01af\u0005\u001e\u0010\u0002\u01ad\u01af",
    "\u0005N(\u0002\u01ae\u01a8\u0003\u0002\u0002\u0002\u01ae\u01a9\u0003",
    "\u0002\u0002\u0002\u01ae\u01aa\u0003\u0002\u0002\u0002\u01ae\u01ab\u0003",
    "\u0002\u0002\u0002\u01ae\u01ac\u0003\u0002\u0002\u0002\u01ae\u01ad\u0003",
    "\u0002\u0002\u0002\u01af\u01b1\u0003\u0002\u0002\u0002\u01b0\u01a3\u0003",
    "\u0002\u0002\u0002\u01b0\u01ae\u0003\u0002\u0002\u0002\u01b1\u01ba\u0003",
    "\u0002\u0002\u0002\u01b2\u01b3\f\u0005\u0002\u0002\u01b3\u01b4\u0005",
    "\u001c\u000f\u0002\u01b4\u01b5\u0005D#\u0006\u01b5\u01b9\u0003\u0002",
    "\u0002\u0002\u01b6\u01b7\f\u0003\u0002\u0002\u01b7\u01b9\u0007\u0011",
    "\u0002\u0002\u01b8\u01b2\u0003\u0002\u0002\u0002\u01b8\u01b6\u0003\u0002",
    "\u0002\u0002\u01b9\u01bc\u0003\u0002\u0002\u0002\u01ba\u01b8\u0003\u0002",
    "\u0002\u0002\u01ba\u01bb\u0003\u0002\u0002\u0002\u01bbE\u0003\u0002",
    "\u0002\u0002\u01bc\u01ba\u0003\u0002\u0002\u0002\u01bd\u01bf\u0007\u001e",
    "\u0002\u0002\u01be\u01c0\u0005J&\u0002\u01bf\u01be\u0003\u0002\u0002",
    "\u0002\u01bf\u01c0\u0003\u0002\u0002\u0002\u01c0\u01c2\u0003\u0002\u0002",
    "\u0002\u01c1\u01c3\u0005H%\u0002\u01c2\u01c1\u0003\u0002\u0002\u0002",
    "\u01c2\u01c3\u0003\u0002\u0002\u0002\u01c3G\u0003\u0002\u0002\u0002",
    "\u01c4\u01c5\u0005\u0012\n\u0002\u01c5\u01c6\u0005\u0082B\u0002\u01c6",
    "I\u0003\u0002\u0002\u0002\u01c7\u01c8\u0005\u001a\u000e\u0002\u01c8",
    "\u01c9\u0005L\'\u0002\u01c9K\u0003\u0002\u0002\u0002\u01ca\u01cb\b\'",
    "\u0001\u0002\u01cb\u01cc\u0007\u0014\u0002\u0002\u01cc\u01cd\u0005L",
    "\'\u0002\u01cd\u01ce\u0007\u0015\u0002\u0002\u01ce\u01d9\u0003\u0002",
    "\u0002\u0002\u01cf\u01d7\u0005$\u0013\u0002\u01d0\u01d7\u0005\\/\u0002",
    "\u01d1\u01d7\u0005b2\u0002\u01d2\u01d7\u0005N(\u0002\u01d3\u01d7\u0005",
    "h5\u0002\u01d4\u01d7\u0005n8\u0002\u01d5\u01d7\u0005v<\u0002\u01d6\u01cf",
    "\u0003\u0002\u0002\u0002\u01d6\u01d0\u0003\u0002\u0002\u0002\u01d6\u01d1",
    "\u0003\u0002\u0002\u0002\u01d6\u01d2\u0003\u0002\u0002\u0002\u01d6\u01d3",
    "\u0003\u0002\u0002\u0002\u01d6\u01d4\u0003\u0002\u0002\u0002\u01d6\u01d5",
    "\u0003\u0002\u0002\u0002\u01d7\u01d9\u0003\u0002\u0002\u0002\u01d8\u01ca",
    "\u0003\u0002\u0002\u0002\u01d8\u01d6\u0003\u0002\u0002\u0002\u01d9\u01e2",
    "\u0003\u0002\u0002\u0002\u01da\u01db\f\u0005\u0002\u0002\u01db\u01dc",
    "\u0005\u001c\u000f\u0002\u01dc\u01dd\u0005L\'\u0006\u01dd\u01e1\u0003",
    "\u0002\u0002\u0002\u01de\u01df\f\u0003\u0002\u0002\u01df\u01e1\u0007",
    "\u0011\u0002\u0002\u01e0\u01da\u0003\u0002\u0002\u0002\u01e0\u01de\u0003",
    "\u0002\u0002\u0002\u01e1\u01e4\u0003\u0002\u0002\u0002\u01e2\u01e0\u0003",
    "\u0002\u0002\u0002\u01e2\u01e3\u0003\u0002\u0002\u0002\u01e3M\u0003",
    "\u0002\u0002\u0002\u01e4\u01e2\u0003\u0002\u0002\u0002\u01e5\u01e7\u0007",
    "\u001f\u0002\u0002\u01e6\u01e8\u0005R*\u0002\u01e7\u01e6\u0003\u0002",
    "\u0002\u0002\u01e7\u01e8\u0003\u0002\u0002\u0002\u01e8O\u0003\u0002",
    "\u0002\u0002\u01e9\u01ed\u0005\u0012\n\u0002\u01ea\u01ee\u00056\u001c",
    "\u0002\u01eb\u01ee\u0005F$\u0002\u01ec\u01ee\u0005> \u0002\u01ed\u01ea",
    "\u0003\u0002\u0002\u0002\u01ed\u01eb\u0003\u0002\u0002\u0002\u01ed\u01ec",
    "\u0003\u0002\u0002\u0002\u01eeQ\u0003\u0002\u0002\u0002\u01ef\u01f0",
    "\u0005\u001a\u000e\u0002\u01f0\u01f1\u0005T+\u0002\u01f1S\u0003\u0002",
    "\u0002\u0002\u01f2\u01f3\b+\u0001\u0002\u01f3\u01f4\u0007\u0014\u0002",
    "\u0002\u01f4\u01f5\u0005T+\u0002\u01f5\u01f6\u0007\u0015\u0002\u0002",
    "\u01f6\u01fc\u0003\u0002\u0002\u0002\u01f7\u01fa\u0005V,\u0002\u01f8",
    "\u01fa\u0005\u001e\u0010\u0002\u01f9\u01f7\u0003\u0002\u0002\u0002\u01f9",
    "\u01f8\u0003\u0002\u0002\u0002\u01fa\u01fc\u0003\u0002\u0002\u0002\u01fb",
    "\u01f2\u0003\u0002\u0002\u0002\u01fb\u01f9\u0003\u0002\u0002\u0002\u01fc",
    "\u0205\u0003\u0002\u0002\u0002\u01fd\u01fe\f\u0005\u0002\u0002\u01fe",
    "\u01ff\u0005\u001c\u000f\u0002\u01ff\u0200\u0005T+\u0006\u0200\u0204",
    "\u0003\u0002\u0002\u0002\u0201\u0202\f\u0003\u0002\u0002\u0202\u0204",
    "\u0007\u0011\u0002\u0002\u0203\u01fd\u0003\u0002\u0002\u0002\u0203\u0201",
    "\u0003\u0002\u0002\u0002\u0204\u0207\u0003\u0002\u0002\u0002\u0205\u0203",
    "\u0003\u0002\u0002\u0002\u0205\u0206\u0003\u0002\u0002\u0002\u0206U",
    "\u0003\u0002\u0002\u0002\u0207\u0205\u0003\u0002\u0002\u0002\u0208\u020a",
    "\u0007 \u0002\u0002\u0209\u020b\u0005Z.\u0002\u020a\u0209\u0003\u0002",
    "\u0002\u0002\u020a\u020b\u0003\u0002\u0002\u0002\u020bW\u0003\u0002",
    "\u0002\u0002\u020c\u020f\u0005\u0012\n\u0002\u020d\u0210\u0005N(\u0002",
    "\u020e\u0210\u0005n8\u0002\u020f\u020d\u0003\u0002\u0002\u0002\u020f",
    "\u020e\u0003\u0002\u0002\u0002\u0210Y\u0003\u0002\u0002\u0002\u0211",
    "\u0212\u0005\b\u0005\u0002\u0212\u0213\u0007\u0011\u0002\u0002\u0213",
    "\u0218\u0003\u0002\u0002\u0002\u0214\u0215\u0005\u0006\u0004\u0002\u0215",
    "\u0216\u0007\u0011\u0002\u0002\u0216\u0218\u0003\u0002\u0002\u0002\u0217",
    "\u0211\u0003\u0002\u0002\u0002\u0217\u0214\u0003\u0002\u0002\u0002\u0218",
    "[\u0003\u0002\u0002\u0002\u0219\u021b\u0007!\u0002\u0002\u021a\u021c",
    "\u0005`1\u0002\u021b\u021a\u0003\u0002\u0002\u0002\u021b\u021c\u0003",
    "\u0002\u0002\u0002\u021c]\u0003\u0002\u0002\u0002\u021d\u0223\u0005",
    "\u0012\n\u0002\u021e\u0224\u00056\u001c\u0002\u021f\u0224\u0005F$\u0002",
    "\u0220\u0224\u0005> \u0002\u0221\u0224\u0005n8\u0002\u0222\u0224\u0005",
    "\u0082B\u0002\u0223\u021e\u0003\u0002\u0002\u0002\u0223\u021f\u0003",
    "\u0002\u0002\u0002\u0223\u0220\u0003\u0002\u0002\u0002\u0223\u0221\u0003",
    "\u0002\u0002\u0002\u0223\u0222\u0003\u0002\u0002\u0002\u0224_\u0003",
    "\u0002\u0002\u0002\u0225\u0226\u0005\u0006\u0004\u0002\u0226\u0227\u0007",
    "\u0011\u0002\u0002\u0227a\u0003\u0002\u0002\u0002\u0228\u022a\u0007",
    "\"\u0002\u0002\u0229\u022b\u0005f4\u0002\u022a\u0229\u0003\u0002\u0002",
    "\u0002\u022a\u022b\u0003\u0002\u0002\u0002\u022bc\u0003\u0002\u0002",
    "\u0002\u022c\u0232\u0005\u0012\n\u0002\u022d\u0233\u00056\u001c\u0002",
    "\u022e\u0233\u0005F$\u0002\u022f\u0233\u0005> \u0002\u0230\u0233\u0005",
    "n8\u0002\u0231\u0233\u0005\u0082B\u0002\u0232\u022d\u0003\u0002\u0002",
    "\u0002\u0232\u022e\u0003\u0002\u0002\u0002\u0232\u022f\u0003\u0002\u0002",
    "\u0002\u0232\u0230\u0003\u0002\u0002\u0002\u0232\u0231\u0003\u0002\u0002",
    "\u0002\u0233e\u0003\u0002\u0002\u0002\u0234\u0235\u0005\u0006\u0004",
    "\u0002\u0235\u0236\u0007\u0011\u0002\u0002\u0236g\u0003\u0002\u0002",
    "\u0002\u0237\u0239\u0007#\u0002\u0002\u0238\u023a\u0005l7\u0002\u0239",
    "\u0238\u0003\u0002\u0002\u0002\u0239\u023a\u0003\u0002\u0002\u0002\u023a",
    "i\u0003\u0002\u0002\u0002\u023b\u023c\u0005\u0012\n\u0002\u023c\u023d",
    "\u00056\u001c\u0002\u023dk\u0003\u0002\u0002\u0002\u023e\u023f\u0005",
    "\b\u0005\u0002\u023f\u0240\u0007\u0011\u0002\u0002\u0240m\u0003\u0002",
    "\u0002\u0002\u0241\u0243\u0007$\u0002\u0002\u0242\u0244\u0005r:\u0002",
    "\u0243\u0242\u0003\u0002\u0002\u0002\u0243\u0244\u0003\u0002\u0002\u0002",
    "\u0244\u0246\u0003\u0002\u0002\u0002\u0245\u0247\u0005p9\u0002\u0246",
    "\u0245\u0003\u0002\u0002\u0002\u0246\u0247\u0003\u0002\u0002\u0002\u0247",
    "o\u0003\u0002\u0002\u0002\u0248\u024c\u0005\u0012\n\u0002\u0249\u024d",
    "\u0005\u0082B\u0002\u024a\u024d\u00056\u001c\u0002\u024b\u024d\u0005",
    "F$\u0002\u024c\u0249\u0003\u0002\u0002\u0002\u024c\u024a\u0003\u0002",
    "\u0002\u0002\u024c\u024b\u0003\u0002\u0002\u0002\u024dq\u0003\u0002",
    "\u0002\u0002\u024e\u024f\u0005\u001a\u000e\u0002\u024f\u0250\u0005t",
    ";\u0002\u0250s\u0003\u0002\u0002\u0002\u0251\u0252\b;\u0001\u0002\u0252",
    "\u0253\u0007\u0014\u0002\u0002\u0253\u0254\u0005t;\u0002\u0254\u0255",
    "\u0007\u0015\u0002\u0002\u0255\u025f\u0003\u0002\u0002\u0002\u0256\u025d",
    "\u0005$\u0013\u0002\u0257\u025d\u0005\\/\u0002\u0258\u025d\u0005b2\u0002",
    "\u0259\u025d\u0005V,\u0002\u025a\u025d\u0005\u001e\u0010\u0002\u025b",
    "\u025d\u0005|?\u0002\u025c\u0256\u0003\u0002\u0002\u0002\u025c\u0257",
    "\u0003\u0002\u0002\u0002\u025c\u0258\u0003\u0002\u0002\u0002\u025c\u0259",
    "\u0003\u0002\u0002\u0002\u025c\u025a\u0003\u0002\u0002\u0002\u025c\u025b",
    "\u0003\u0002\u0002\u0002\u025d\u025f\u0003\u0002\u0002\u0002\u025e\u0251",
    "\u0003\u0002\u0002\u0002\u025e\u025c\u0003\u0002\u0002\u0002\u025f\u0268",
    "\u0003\u0002\u0002\u0002\u0260\u0261\f\u0005\u0002\u0002\u0261\u0262",
    "\u0005\u001c\u000f\u0002\u0262\u0263\u0005t;\u0006\u0263\u0267\u0003",
    "\u0002\u0002\u0002\u0264\u0265\f\u0003\u0002\u0002\u0265\u0267\u0007",
    "\u0011\u0002\u0002\u0266\u0260\u0003\u0002\u0002\u0002\u0266\u0264\u0003",
    "\u0002\u0002\u0002\u0267\u026a\u0003\u0002\u0002\u0002\u0268\u0266\u0003",
    "\u0002\u0002\u0002\u0268\u0269\u0003\u0002\u0002\u0002\u0269u\u0003",
    "\u0002\u0002\u0002\u026a\u0268\u0003\u0002\u0002\u0002\u026b\u026d\u0007",
    "%\u0002\u0002\u026c\u026e\u0005z>\u0002\u026d\u026c\u0003\u0002\u0002",
    "\u0002\u026d\u026e\u0003\u0002\u0002\u0002\u026e\u0270\u0003\u0002\u0002",
    "\u0002\u026f\u0271\u0005x=\u0002\u0270\u026f\u0003\u0002\u0002\u0002",
    "\u0270\u0271\u0003\u0002\u0002\u0002\u0271w\u0003\u0002\u0002\u0002",
    "\u0272\u0276\u0005\u0012\n\u0002\u0273\u0277\u00056\u001c\u0002\u0274",
    "\u0277\u0005F$\u0002\u0275\u0277\u0005F$\u0002\u0276\u0273\u0003\u0002",
    "\u0002\u0002\u0276\u0274\u0003\u0002\u0002\u0002\u0276\u0275\u0003\u0002",
    "\u0002\u0002\u0277y\u0003\u0002\u0002\u0002\u0278\u0279\u0005\b\u0005",
    "\u0002\u0279\u027a\u0007\u0011\u0002\u0002\u027a{\u0003\u0002\u0002",
    "\u0002\u027b\u027d\u0007&\u0002\u0002\u027c\u027e\u0005\u0080A\u0002",
    "\u027d\u027c\u0003\u0002\u0002\u0002\u027d\u027e\u0003\u0002\u0002\u0002",
    "\u027e\u0280\u0003\u0002\u0002\u0002\u027f\u0281\u0005~@\u0002\u0280",
    "\u027f\u0003\u0002\u0002\u0002\u0280\u0281\u0003\u0002\u0002\u0002\u0281",
    "}\u0003\u0002\u0002\u0002\u0282\u0283\u0005\u0012\n\u0002\u0283\u0284",
    "\u0005n8\u0002\u0284\u007f\u0003\u0002\u0002\u0002\u0285\u0286\u0005",
    "\b\u0005\u0002\u0286\u0287\u0007\u0011\u0002\u0002\u0287\u0081\u0003",
    "\u0002\u0002\u0002\u0288\u028a\u0007\'\u0002\u0002\u0289\u028b\u0005",
    "\u0086D\u0002\u028a\u0289\u0003\u0002\u0002\u0002\u028a\u028b\u0003",
    "\u0002\u0002\u0002\u028b\u028d\u0003\u0002\u0002\u0002\u028c\u028e\u0005",
    "\u0084C\u0002\u028d\u028c\u0003\u0002\u0002\u0002\u028d\u028e\u0003",
    "\u0002\u0002\u0002\u028e\u0083\u0003\u0002\u0002\u0002\u028f\u0290\u0005",
    "\u0012\n\u0002\u0290\u0291\u0005\u0082B\u0002\u0291\u0085\u0003\u0002",
    "\u0002\u0002\u0292\u0293\u0005\u001a\u000e\u0002\u0293\u0294\u0005\u0088",
    "E\u0002\u0294\u0087\u0003\u0002\u0002\u0002\u0295\u0296\bE\u0001\u0002",
    "\u0296\u0297\u0007\u0014\u0002\u0002\u0297\u0298\u0005\u0088E\u0002",
    "\u0298\u0299\u0007\u0015\u0002\u0002\u0299\u02aa\u0003\u0002\u0002\u0002",
    "\u029a\u02a8\u0005$\u0013\u0002\u029b\u02a8\u0005\\/\u0002\u029c\u02a8",
    "\u0005b2\u0002\u029d\u02a8\u0005\u001e\u0010\u0002\u029e\u02a8\u0005",
    "*\u0016\u0002\u029f\u02a8\u00050\u0019\u0002\u02a0\u02a8\u00056\u001c",
    "\u0002\u02a1\u02a8\u0005\u008aF\u0002\u02a2\u02a8\u0005> \u0002\u02a3",
    "\u02a8\u0005F$\u0002\u02a4\u02a8\u0005n8\u0002\u02a5\u02a8\u0005\u0082",
    "B\u0002\u02a6\u02a8\u0005h5\u0002\u02a7\u029a\u0003\u0002\u0002\u0002",
    "\u02a7\u029b\u0003\u0002\u0002\u0002\u02a7\u029c\u0003\u0002\u0002\u0002",
    "\u02a7\u029d\u0003\u0002\u0002\u0002\u02a7\u029e\u0003\u0002\u0002\u0002",
    "\u02a7\u029f\u0003\u0002\u0002\u0002\u02a7\u02a0\u0003\u0002\u0002\u0002",
    "\u02a7\u02a1\u0003\u0002\u0002\u0002\u02a7\u02a2\u0003\u0002\u0002\u0002",
    "\u02a7\u02a3\u0003\u0002\u0002\u0002\u02a7\u02a4\u0003\u0002\u0002\u0002",
    "\u02a7\u02a5\u0003\u0002\u0002\u0002\u02a7\u02a6\u0003\u0002\u0002\u0002",
    "\u02a8\u02aa\u0003\u0002\u0002\u0002\u02a9\u0295\u0003\u0002\u0002\u0002",
    "\u02a9\u02a7\u0003\u0002\u0002\u0002\u02aa\u02b3\u0003\u0002\u0002\u0002",
    "\u02ab\u02ac\f\u0005\u0002\u0002\u02ac\u02ad\u0005\u001c\u000f\u0002",
    "\u02ad\u02ae\u0005\u0088E\u0006\u02ae\u02b2\u0003\u0002\u0002\u0002",
    "\u02af\u02b0\f\u0003\u0002\u0002\u02b0\u02b2\u0007\u0011\u0002\u0002",
    "\u02b1\u02ab\u0003\u0002\u0002\u0002\u02b1\u02af\u0003\u0002\u0002\u0002",
    "\u02b2\u02b5\u0003\u0002\u0002\u0002\u02b3\u02b1\u0003\u0002\u0002\u0002",
    "\u02b3\u02b4\u0003\u0002\u0002\u0002\u02b4\u0089\u0003\u0002\u0002\u0002",
    "\u02b5\u02b3\u0003\u0002\u0002\u0002\u02b6\u02b8\u0007(\u0002\u0002",
    "\u02b7\u02b9\u0005\u008eH\u0002\u02b8\u02b7\u0003\u0002\u0002\u0002",
    "\u02b8\u02b9\u0003\u0002\u0002\u0002\u02b9\u02bb\u0003\u0002\u0002\u0002",
    "\u02ba\u02bc\u0005\u008cG\u0002\u02bb\u02ba\u0003\u0002\u0002\u0002",
    "\u02bb\u02bc\u0003\u0002\u0002\u0002\u02bc\u008b\u0003\u0002\u0002\u0002",
    "\u02bd\u02c0\u0005\u0012\n\u0002\u02be\u02c1\u0005\u008aF\u0002\u02bf",
    "\u02c1\u0005\u0082B\u0002\u02c0\u02be\u0003\u0002\u0002\u0002\u02c0",
    "\u02bf\u0003\u0002\u0002\u0002\u02c1\u008d\u0003\u0002\u0002\u0002\u02c2",
    "\u02c3\u0005\u001a\u000e\u0002\u02c3\u02c4\u0005\u0090I\u0002\u02c4",
    "\u008f\u0003\u0002\u0002\u0002\u02c5\u02c6\bI\u0001\u0002\u02c6\u02c7",
    "\u0007\u0014\u0002\u0002\u02c7\u02c8\u0005\u0090I\u0002\u02c8\u02c9",
    "\u0007\u0015\u0002\u0002\u02c9\u02d4\u0003\u0002\u0002\u0002\u02ca\u02d2",
    "\u0005$\u0013\u0002\u02cb\u02d2\u0005\\/\u0002\u02cc\u02d2\u0005b2\u0002",
    "\u02cd\u02d2\u0005\u001e\u0010\u0002\u02ce\u02d2\u0005> \u0002\u02cf",
    "\u02d2\u0005n8\u0002\u02d0\u02d2\u0005\u008aF\u0002\u02d1\u02ca\u0003",
    "\u0002\u0002\u0002\u02d1\u02cb\u0003\u0002\u0002\u0002\u02d1\u02cc\u0003",
    "\u0002\u0002\u0002\u02d1\u02cd\u0003\u0002\u0002\u0002\u02d1\u02ce\u0003",
    "\u0002\u0002\u0002\u02d1\u02cf\u0003\u0002\u0002\u0002\u02d1\u02d0\u0003",
    "\u0002\u0002\u0002\u02d2\u02d4\u0003\u0002\u0002\u0002\u02d3\u02c5\u0003",
    "\u0002\u0002\u0002\u02d3\u02d1\u0003\u0002\u0002\u0002\u02d4\u02dd\u0003",
    "\u0002\u0002\u0002\u02d5\u02d6\f\u0005\u0002\u0002\u02d6\u02d7\u0005",
    "\u001c\u000f\u0002\u02d7\u02d8\u0005\u0090I\u0006\u02d8\u02dc\u0003",
    "\u0002\u0002\u0002\u02d9\u02da\f\u0003\u0002\u0002\u02da\u02dc\u0007",
    "\u0011\u0002\u0002\u02db\u02d5\u0003\u0002\u0002\u0002\u02db\u02d9\u0003",
    "\u0002\u0002\u0002\u02dc\u02df\u0003\u0002\u0002\u0002\u02dd\u02db\u0003",
    "\u0002\u0002\u0002\u02dd\u02de\u0003\u0002\u0002\u0002\u02de\u0091\u0003",
    "\u0002\u0002\u0002\u02df\u02dd\u0003\u0002\u0002\u0002R\u0095\u0099",
    "\u009c\u00a1\u00c9\u00cf\u00d7\u00df\u00e7\u00ee\u00f7\u0100\u0109\u010d",
    "\u0113\u0115\u012d\u0131\u013e\u0145\u014d\u015d\u016a\u016e\u0171\u0187",
    "\u0189\u0191\u0193\u0198\u019b\u01ae\u01b0\u01b8\u01ba\u01bf\u01c2\u01d6",
    "\u01d8\u01e0\u01e2\u01e7\u01ed\u01f9\u01fb\u0203\u0205\u020a\u020f\u0217",
    "\u021b\u0223\u022a\u0232\u0239\u0243\u0246\u024c\u025c\u025e\u0266\u0268",
    "\u026d\u0270\u0276\u027d\u0280\u028a\u028d\u02a7\u02a9\u02b1\u02b3\u02b8",
    "\u02bb\u02c0\u02d1\u02d3\u02db\u02dd"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'\"'", "'!'", "'...'", "'!...'", "'.'", "'='", 
                     "'>'", "'<'", "'must '", "'of '", "'and '", "'or '", 
                     "'have '", "'with '", null, null, null, "'('", "')'", 
                     "'name '", "'annotation '", "'extension '", "'Superclass'", 
                     "'implementation '", "'Interface '", "'function '", 
                     "'abstract function '", "'constructor '", "'parameter '", 
                     "'type '", "'specifier '", "'visibility '", "'return value '", 
                     "'declaration statement '", "'expression statement '", 
                     "'initial value '", null, "'interface '" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, "SPACE", "Alphabet", 
                      "NL", "LPAREN", "RPAREN", "NAME", "ANNOTATION", "EXTENSION", 
                      "SUPERCLASS", "IMPLEMENTATION", "INTERFACE", "FUNCTION", 
                      "AbstractFunctions", "CONSTRUCTOR", "PARAMETER", "TYPES", 
                      "SPECIFIER", "VISIBILITY", "ReturnValue", "DeclarationStatement", 
                      "ExpressionStatement", "InitialValue", "CLASSES", 
                      "INTERFACES" ];

var ruleNames =  [ "inputSentence", "mustClause", "words", "combinatorialWords", 
                   "symbols", "end", "emptyLine", "must", "of", "and", "or", 
                   "have", "withWord", "binary", "names", "nameOf", "nameCondition", 
                   "annotations", "annotationOf", "annotationCondition", 
                   "extensions", "extensionOf", "extensionCondition", "implementations", 
                   "implementationOf", "implementationCondition", "functions", 
                   "functionOf", "functionCondition", "functionExpression", 
                   "abstractFunctions", "abstractFunctionOf", "abstractFunctionCondition", 
                   "abstractFunctionExpression", "constructors", "constructorOf", 
                   "constructorCondition", "constructorExpression", "parameters", 
                   "parameterOf", "parameterCondition", "parameterExpression", 
                   "types", "typeOf", "typeCondition", "specifiers", "specifierOf", 
                   "specifierCondition", "visibilities", "visibilityOf", 
                   "visibilityCondition", "returnValues", "returnValueOf", 
                   "returnValueCondition", "declarationStatements", "declarationStatementOf", 
                   "declarationStatementCondition", "declarationStatementExpression", 
                   "expressionStatements", "expressionStatementOf", "expressionStatementCondition", 
                   "initialValues", "initialValueOf", "initialValueCondition", 
                   "classes", "classOf", "classCondition", "classExpression", 
                   "interfaces", "interfaceOf", "interfaceCondition", "interfaceExpression" ];

function myGrammarParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

myGrammarParser.prototype = Object.create(antlr4.Parser.prototype);
myGrammarParser.prototype.constructor = myGrammarParser;

Object.defineProperty(myGrammarParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

myGrammarParser.EOF = antlr4.Token.EOF;
myGrammarParser.T__0 = 1;
myGrammarParser.T__1 = 2;
myGrammarParser.T__2 = 3;
myGrammarParser.T__3 = 4;
myGrammarParser.T__4 = 5;
myGrammarParser.T__5 = 6;
myGrammarParser.T__6 = 7;
myGrammarParser.T__7 = 8;
myGrammarParser.T__8 = 9;
myGrammarParser.T__9 = 10;
myGrammarParser.T__10 = 11;
myGrammarParser.T__11 = 12;
myGrammarParser.T__12 = 13;
myGrammarParser.T__13 = 14;
myGrammarParser.SPACE = 15;
myGrammarParser.Alphabet = 16;
myGrammarParser.NL = 17;
myGrammarParser.LPAREN = 18;
myGrammarParser.RPAREN = 19;
myGrammarParser.NAME = 20;
myGrammarParser.ANNOTATION = 21;
myGrammarParser.EXTENSION = 22;
myGrammarParser.SUPERCLASS = 23;
myGrammarParser.IMPLEMENTATION = 24;
myGrammarParser.INTERFACE = 25;
myGrammarParser.FUNCTION = 26;
myGrammarParser.AbstractFunctions = 27;
myGrammarParser.CONSTRUCTOR = 28;
myGrammarParser.PARAMETER = 29;
myGrammarParser.TYPES = 30;
myGrammarParser.SPECIFIER = 31;
myGrammarParser.VISIBILITY = 32;
myGrammarParser.ReturnValue = 33;
myGrammarParser.DeclarationStatement = 34;
myGrammarParser.ExpressionStatement = 35;
myGrammarParser.InitialValue = 36;
myGrammarParser.CLASSES = 37;
myGrammarParser.INTERFACES = 38;

myGrammarParser.RULE_inputSentence = 0;
myGrammarParser.RULE_mustClause = 1;
myGrammarParser.RULE_words = 2;
myGrammarParser.RULE_combinatorialWords = 3;
myGrammarParser.RULE_symbols = 4;
myGrammarParser.RULE_end = 5;
myGrammarParser.RULE_emptyLine = 6;
myGrammarParser.RULE_must = 7;
myGrammarParser.RULE_of = 8;
myGrammarParser.RULE_and = 9;
myGrammarParser.RULE_or = 10;
myGrammarParser.RULE_have = 11;
myGrammarParser.RULE_withWord = 12;
myGrammarParser.RULE_binary = 13;
myGrammarParser.RULE_names = 14;
myGrammarParser.RULE_nameOf = 15;
myGrammarParser.RULE_nameCondition = 16;
myGrammarParser.RULE_annotations = 17;
myGrammarParser.RULE_annotationOf = 18;
myGrammarParser.RULE_annotationCondition = 19;
myGrammarParser.RULE_extensions = 20;
myGrammarParser.RULE_extensionOf = 21;
myGrammarParser.RULE_extensionCondition = 22;
myGrammarParser.RULE_implementations = 23;
myGrammarParser.RULE_implementationOf = 24;
myGrammarParser.RULE_implementationCondition = 25;
myGrammarParser.RULE_functions = 26;
myGrammarParser.RULE_functionOf = 27;
myGrammarParser.RULE_functionCondition = 28;
myGrammarParser.RULE_functionExpression = 29;
myGrammarParser.RULE_abstractFunctions = 30;
myGrammarParser.RULE_abstractFunctionOf = 31;
myGrammarParser.RULE_abstractFunctionCondition = 32;
myGrammarParser.RULE_abstractFunctionExpression = 33;
myGrammarParser.RULE_constructors = 34;
myGrammarParser.RULE_constructorOf = 35;
myGrammarParser.RULE_constructorCondition = 36;
myGrammarParser.RULE_constructorExpression = 37;
myGrammarParser.RULE_parameters = 38;
myGrammarParser.RULE_parameterOf = 39;
myGrammarParser.RULE_parameterCondition = 40;
myGrammarParser.RULE_parameterExpression = 41;
myGrammarParser.RULE_types = 42;
myGrammarParser.RULE_typeOf = 43;
myGrammarParser.RULE_typeCondition = 44;
myGrammarParser.RULE_specifiers = 45;
myGrammarParser.RULE_specifierOf = 46;
myGrammarParser.RULE_specifierCondition = 47;
myGrammarParser.RULE_visibilities = 48;
myGrammarParser.RULE_visibilityOf = 49;
myGrammarParser.RULE_visibilityCondition = 50;
myGrammarParser.RULE_returnValues = 51;
myGrammarParser.RULE_returnValueOf = 52;
myGrammarParser.RULE_returnValueCondition = 53;
myGrammarParser.RULE_declarationStatements = 54;
myGrammarParser.RULE_declarationStatementOf = 55;
myGrammarParser.RULE_declarationStatementCondition = 56;
myGrammarParser.RULE_declarationStatementExpression = 57;
myGrammarParser.RULE_expressionStatements = 58;
myGrammarParser.RULE_expressionStatementOf = 59;
myGrammarParser.RULE_expressionStatementCondition = 60;
myGrammarParser.RULE_initialValues = 61;
myGrammarParser.RULE_initialValueOf = 62;
myGrammarParser.RULE_initialValueCondition = 63;
myGrammarParser.RULE_classes = 64;
myGrammarParser.RULE_classOf = 65;
myGrammarParser.RULE_classCondition = 66;
myGrammarParser.RULE_classExpression = 67;
myGrammarParser.RULE_interfaces = 68;
myGrammarParser.RULE_interfaceOf = 69;
myGrammarParser.RULE_interfaceCondition = 70;
myGrammarParser.RULE_interfaceExpression = 71;

function InputSentenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_inputSentence;
    return this;
}

InputSentenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InputSentenceContext.prototype.constructor = InputSentenceContext;

InputSentenceContext.prototype.EOF = function() {
    return this.getToken(myGrammarParser.EOF, 0);
};

InputSentenceContext.prototype.mustClause = function() {
    return this.getTypedRuleContext(MustClauseContext,0);
};

InputSentenceContext.prototype.end = function() {
    return this.getTypedRuleContext(EndContext,0);
};

InputSentenceContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.NL);
    } else {
        return this.getToken(myGrammarParser.NL, i);
    }
};


InputSentenceContext.prototype.emptyLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EmptyLineContext);
    } else {
        return this.getTypedRuleContext(EmptyLineContext,i);
    }
};

InputSentenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterInputSentence(this);
	}
};

InputSentenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitInputSentence(this);
	}
};




myGrammarParser.InputSentenceContext = InputSentenceContext;

myGrammarParser.prototype.inputSentence = function() {

    var localctx = new InputSentenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, myGrammarParser.RULE_inputSentence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 151;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.EOF:
        case myGrammarParser.T__4:
        case myGrammarParser.NL:
            this.state = 147;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 144;
                    this.emptyLine(); 
                }
                this.state = 149;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
            }

            break;
        case myGrammarParser.FUNCTION:
        case myGrammarParser.AbstractFunctions:
        case myGrammarParser.CONSTRUCTOR:
        case myGrammarParser.PARAMETER:
        case myGrammarParser.DeclarationStatement:
        case myGrammarParser.CLASSES:
        case myGrammarParser.INTERFACES:
            this.state = 150;
            this.mustClause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 154;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.T__4) {
            this.state = 153;
            this.end();
        }

        this.state = 159;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===myGrammarParser.NL) {
            this.state = 156;
            this.match(myGrammarParser.NL);
            this.state = 161;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 162;
        this.match(myGrammarParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MustClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_mustClause;
    return this;
}

MustClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MustClauseContext.prototype.constructor = MustClauseContext;

MustClauseContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

MustClauseContext.prototype.must = function() {
    return this.getTypedRuleContext(MustContext,0);
};

MustClauseContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

MustClauseContext.prototype.functionExpression = function() {
    return this.getTypedRuleContext(FunctionExpressionContext,0);
};

MustClauseContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

MustClauseContext.prototype.abstractFunctionExpression = function() {
    return this.getTypedRuleContext(AbstractFunctionExpressionContext,0);
};

MustClauseContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

MustClauseContext.prototype.constructorExpression = function() {
    return this.getTypedRuleContext(ConstructorExpressionContext,0);
};

MustClauseContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

MustClauseContext.prototype.classExpression = function() {
    return this.getTypedRuleContext(ClassExpressionContext,0);
};

MustClauseContext.prototype.interfaces = function() {
    return this.getTypedRuleContext(InterfacesContext,0);
};

MustClauseContext.prototype.interfaceExpression = function() {
    return this.getTypedRuleContext(InterfaceExpressionContext,0);
};

MustClauseContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

MustClauseContext.prototype.parameterExpression = function() {
    return this.getTypedRuleContext(ParameterExpressionContext,0);
};

MustClauseContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

MustClauseContext.prototype.declarationStatementExpression = function() {
    return this.getTypedRuleContext(DeclarationStatementExpressionContext,0);
};

MustClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterMustClause(this);
	}
};

MustClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitMustClause(this);
	}
};




myGrammarParser.MustClauseContext = MustClauseContext;

myGrammarParser.prototype.mustClause = function() {

    var localctx = new MustClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, myGrammarParser.RULE_mustClause);
    try {
        this.state = 199;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.FUNCTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 164;
            this.functions();
            this.state = 165;
            this.must();
            this.state = 166;
            this.have();
            this.state = 167;
            this.functionExpression(0);
            break;
        case myGrammarParser.AbstractFunctions:
            this.enterOuterAlt(localctx, 2);
            this.state = 169;
            this.abstractFunctions();
            this.state = 170;
            this.must();
            this.state = 171;
            this.have();
            this.state = 172;
            this.abstractFunctionExpression(0);
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.enterOuterAlt(localctx, 3);
            this.state = 174;
            this.constructors();
            this.state = 175;
            this.must();
            this.state = 176;
            this.have();
            this.state = 177;
            this.constructorExpression(0);
            break;
        case myGrammarParser.CLASSES:
            this.enterOuterAlt(localctx, 4);
            this.state = 179;
            this.classes();
            this.state = 180;
            this.must();
            this.state = 181;
            this.have();
            this.state = 182;
            this.classExpression(0);
            break;
        case myGrammarParser.INTERFACES:
            this.enterOuterAlt(localctx, 5);
            this.state = 184;
            this.interfaces();
            this.state = 185;
            this.must();
            this.state = 186;
            this.have();
            this.state = 187;
            this.interfaceExpression(0);
            break;
        case myGrammarParser.PARAMETER:
            this.enterOuterAlt(localctx, 6);
            this.state = 189;
            this.parameters();
            this.state = 190;
            this.must();
            this.state = 191;
            this.have();
            this.state = 192;
            this.parameterExpression(0);
            break;
        case myGrammarParser.DeclarationStatement:
            this.enterOuterAlt(localctx, 7);
            this.state = 194;
            this.declarationStatements();
            this.state = 195;
            this.must();
            this.state = 196;
            this.have();
            this.state = 197;
            this.declarationStatementExpression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WordsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_words;
    return this;
}

WordsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WordsContext.prototype.constructor = WordsContext;

WordsContext.prototype.Alphabet = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.Alphabet);
    } else {
        return this.getToken(myGrammarParser.Alphabet, i);
    }
};


WordsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterWords(this);
	}
};

WordsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitWords(this);
	}
};




myGrammarParser.WordsContext = WordsContext;

myGrammarParser.prototype.words = function() {

    var localctx = new WordsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, myGrammarParser.RULE_words);
    var _la = 0; // Token type
    try {
        this.state = 267;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 201;
            this.match(myGrammarParser.T__0);
            this.state = 203; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 202;
                this.match(myGrammarParser.Alphabet);
                this.state = 205; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===myGrammarParser.Alphabet);
            this.state = 207;
            this.match(myGrammarParser.T__0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 208;
            this.match(myGrammarParser.T__0);
            this.state = 209;
            this.match(myGrammarParser.T__1);
            this.state = 211; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 210;
                this.match(myGrammarParser.Alphabet);
                this.state = 213; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===myGrammarParser.Alphabet);
            this.state = 215;
            this.match(myGrammarParser.T__0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 216;
            this.match(myGrammarParser.T__0);
            this.state = 217;
            this.match(myGrammarParser.T__2);
            this.state = 219; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 218;
                this.match(myGrammarParser.Alphabet);
                this.state = 221; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===myGrammarParser.Alphabet);
            this.state = 223;
            this.match(myGrammarParser.T__0);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 224;
            this.match(myGrammarParser.T__0);
            this.state = 225;
            this.match(myGrammarParser.T__3);
            this.state = 227; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 226;
                this.match(myGrammarParser.Alphabet);
                this.state = 229; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===myGrammarParser.Alphabet);
            this.state = 231;
            this.match(myGrammarParser.T__0);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 232;
            this.match(myGrammarParser.T__0);
            this.state = 234; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 233;
                this.match(myGrammarParser.Alphabet);
                this.state = 236; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===myGrammarParser.Alphabet);
            this.state = 238;
            this.match(myGrammarParser.T__2);
            this.state = 239;
            this.match(myGrammarParser.T__0);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 240;
            this.match(myGrammarParser.T__0);
            this.state = 241;
            this.match(myGrammarParser.T__1);
            this.state = 243; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 242;
                this.match(myGrammarParser.Alphabet);
                this.state = 245; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===myGrammarParser.Alphabet);
            this.state = 247;
            this.match(myGrammarParser.T__2);
            this.state = 248;
            this.match(myGrammarParser.T__0);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 249;
            this.match(myGrammarParser.T__0);
            this.state = 250;
            this.match(myGrammarParser.T__2);
            this.state = 252; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 251;
                this.match(myGrammarParser.Alphabet);
                this.state = 254; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===myGrammarParser.Alphabet);
            this.state = 256;
            this.match(myGrammarParser.T__2);
            this.state = 257;
            this.match(myGrammarParser.T__0);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 258;
            this.match(myGrammarParser.T__0);
            this.state = 259;
            this.match(myGrammarParser.T__3);
            this.state = 261; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 260;
                this.match(myGrammarParser.Alphabet);
                this.state = 263; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===myGrammarParser.Alphabet);
            this.state = 265;
            this.match(myGrammarParser.T__2);
            this.state = 266;
            this.match(myGrammarParser.T__0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CombinatorialWordsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_combinatorialWords;
    return this;
}

CombinatorialWordsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CombinatorialWordsContext.prototype.constructor = CombinatorialWordsContext;

CombinatorialWordsContext.prototype.Alphabet = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.Alphabet);
    } else {
        return this.getToken(myGrammarParser.Alphabet, i);
    }
};


CombinatorialWordsContext.prototype.symbols = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolsContext);
    } else {
        return this.getTypedRuleContext(SymbolsContext,i);
    }
};

CombinatorialWordsContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


CombinatorialWordsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterCombinatorialWords(this);
	}
};

CombinatorialWordsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitCombinatorialWords(this);
	}
};




myGrammarParser.CombinatorialWordsContext = CombinatorialWordsContext;

myGrammarParser.prototype.combinatorialWords = function() {

    var localctx = new CombinatorialWordsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, myGrammarParser.RULE_combinatorialWords);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 269;
        this.match(myGrammarParser.T__0);
        this.state = 273; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 273;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.Alphabet:
                this.state = 270;
                this.match(myGrammarParser.Alphabet);
                break;
            case myGrammarParser.T__4:
            case myGrammarParser.T__5:
            case myGrammarParser.T__6:
            case myGrammarParser.T__7:
            case myGrammarParser.LPAREN:
            case myGrammarParser.RPAREN:
                this.state = 271;
                this.symbols();
                break;
            case myGrammarParser.SPACE:
                this.state = 272;
                this.match(myGrammarParser.SPACE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 275; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << myGrammarParser.T__4) | (1 << myGrammarParser.T__5) | (1 << myGrammarParser.T__6) | (1 << myGrammarParser.T__7) | (1 << myGrammarParser.SPACE) | (1 << myGrammarParser.Alphabet) | (1 << myGrammarParser.LPAREN) | (1 << myGrammarParser.RPAREN))) !== 0));
        this.state = 277;
        this.match(myGrammarParser.T__0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SymbolsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_symbols;
    return this;
}

SymbolsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SymbolsContext.prototype.constructor = SymbolsContext;


SymbolsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterSymbols(this);
	}
};

SymbolsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitSymbols(this);
	}
};




myGrammarParser.SymbolsContext = SymbolsContext;

myGrammarParser.prototype.symbols = function() {

    var localctx = new SymbolsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, myGrammarParser.RULE_symbols);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 279;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << myGrammarParser.T__4) | (1 << myGrammarParser.T__5) | (1 << myGrammarParser.T__6) | (1 << myGrammarParser.T__7) | (1 << myGrammarParser.LPAREN) | (1 << myGrammarParser.RPAREN))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_end;
    return this;
}

EndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EndContext.prototype.constructor = EndContext;


EndContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterEnd(this);
	}
};

EndContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitEnd(this);
	}
};




myGrammarParser.EndContext = EndContext;

myGrammarParser.prototype.end = function() {

    var localctx = new EndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, myGrammarParser.RULE_end);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 281;
        this.match(myGrammarParser.T__4);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmptyLineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_emptyLine;
    return this;
}

EmptyLineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyLineContext.prototype.constructor = EmptyLineContext;

EmptyLineContext.prototype.NL = function() {
    return this.getToken(myGrammarParser.NL, 0);
};

EmptyLineContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterEmptyLine(this);
	}
};

EmptyLineContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitEmptyLine(this);
	}
};




myGrammarParser.EmptyLineContext = EmptyLineContext;

myGrammarParser.prototype.emptyLine = function() {

    var localctx = new EmptyLineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, myGrammarParser.RULE_emptyLine);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 283;
        this.match(myGrammarParser.NL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MustContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_must;
    return this;
}

MustContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MustContext.prototype.constructor = MustContext;


MustContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterMust(this);
	}
};

MustContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitMust(this);
	}
};




myGrammarParser.MustContext = MustContext;

myGrammarParser.prototype.must = function() {

    var localctx = new MustContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, myGrammarParser.RULE_must);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 285;
        this.match(myGrammarParser.T__8);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_of;
    return this;
}

OfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OfContext.prototype.constructor = OfContext;


OfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterOf(this);
	}
};

OfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitOf(this);
	}
};




myGrammarParser.OfContext = OfContext;

myGrammarParser.prototype.of = function() {

    var localctx = new OfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, myGrammarParser.RULE_of);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 287;
        this.match(myGrammarParser.T__9);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_and;
    return this;
}

AndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AndContext.prototype.constructor = AndContext;


AndContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAnd(this);
	}
};

AndContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAnd(this);
	}
};




myGrammarParser.AndContext = AndContext;

myGrammarParser.prototype.and = function() {

    var localctx = new AndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, myGrammarParser.RULE_and);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 289;
        this.match(myGrammarParser.T__10);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_or;
    return this;
}

OrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrContext.prototype.constructor = OrContext;


OrContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterOr(this);
	}
};

OrContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitOr(this);
	}
};




myGrammarParser.OrContext = OrContext;

myGrammarParser.prototype.or = function() {

    var localctx = new OrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, myGrammarParser.RULE_or);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 291;
        this.match(myGrammarParser.T__11);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HaveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_have;
    return this;
}

HaveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HaveContext.prototype.constructor = HaveContext;


HaveContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterHave(this);
	}
};

HaveContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitHave(this);
	}
};




myGrammarParser.HaveContext = HaveContext;

myGrammarParser.prototype.have = function() {

    var localctx = new HaveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, myGrammarParser.RULE_have);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 293;
        this.match(myGrammarParser.T__12);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WithWordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_withWord;
    return this;
}

WithWordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithWordContext.prototype.constructor = WithWordContext;


WithWordContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterWithWord(this);
	}
};

WithWordContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitWithWord(this);
	}
};




myGrammarParser.WithWordContext = WithWordContext;

myGrammarParser.prototype.withWord = function() {

    var localctx = new WithWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, myGrammarParser.RULE_withWord);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 295;
        this.match(myGrammarParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BinaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_binary;
    return this;
}

BinaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BinaryContext.prototype.constructor = BinaryContext;

BinaryContext.prototype.and = function() {
    return this.getTypedRuleContext(AndContext,0);
};

BinaryContext.prototype.or = function() {
    return this.getTypedRuleContext(OrContext,0);
};

BinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterBinary(this);
	}
};

BinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitBinary(this);
	}
};




myGrammarParser.BinaryContext = BinaryContext;

myGrammarParser.prototype.binary = function() {

    var localctx = new BinaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, myGrammarParser.RULE_binary);
    try {
        this.state = 299;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.T__10:
            this.enterOuterAlt(localctx, 1);
            this.state = 297;
            this.and();
            break;
        case myGrammarParser.T__11:
            this.enterOuterAlt(localctx, 2);
            this.state = 298;
            this.or();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_names;
    return this;
}

NamesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamesContext.prototype.constructor = NamesContext;

NamesContext.prototype.NAME = function() {
    return this.getToken(myGrammarParser.NAME, 0);
};

NamesContext.prototype.nameCondition = function() {
    return this.getTypedRuleContext(NameConditionContext,0);
};

NamesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterNames(this);
	}
};

NamesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitNames(this);
	}
};




myGrammarParser.NamesContext = NamesContext;

myGrammarParser.prototype.names = function() {

    var localctx = new NamesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, myGrammarParser.RULE_names);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 301;
        this.match(myGrammarParser.NAME);
        this.state = 303;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        if(la_===1) {
            this.state = 302;
            this.nameCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_nameOf;
    return this;
}

NameOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameOfContext.prototype.constructor = NameOfContext;

NameOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

NameOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

NameOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

NameOfContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

NameOfContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

NameOfContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

NameOfContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

NameOfContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

NameOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

NameOfContext.prototype.extensions = function() {
    return this.getTypedRuleContext(ExtensionsContext,0);
};

NameOfContext.prototype.implementations = function() {
    return this.getTypedRuleContext(ImplementationsContext,0);
};

NameOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterNameOf(this);
	}
};

NameOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitNameOf(this);
	}
};




myGrammarParser.NameOfContext = NameOfContext;

myGrammarParser.prototype.nameOf = function() {

    var localctx = new NameOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, myGrammarParser.RULE_nameOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 305;
        this.of();
        this.state = 316;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.CLASSES:
            this.state = 306;
            this.classes();
            break;
        case myGrammarParser.FUNCTION:
            this.state = 307;
            this.functions();
            break;
        case myGrammarParser.AbstractFunctions:
            this.state = 308;
            this.abstractFunctions();
            break;
        case myGrammarParser.DeclarationStatement:
            this.state = 309;
            this.declarationStatements();
            break;
        case myGrammarParser.PARAMETER:
            this.state = 310;
            this.parameters();
            break;
        case myGrammarParser.ANNOTATION:
            this.state = 311;
            this.annotations();
            break;
        case myGrammarParser.TYPES:
            this.state = 312;
            this.types();
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.state = 313;
            this.constructors();
            break;
        case myGrammarParser.EXTENSION:
            this.state = 314;
            this.extensions();
            break;
        case myGrammarParser.IMPLEMENTATION:
            this.state = 315;
            this.implementations();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_nameCondition;
    return this;
}

NameConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameConditionContext.prototype.constructor = NameConditionContext;

NameConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

NameConditionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

NameConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterNameCondition(this);
	}
};

NameConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitNameCondition(this);
	}
};




myGrammarParser.NameConditionContext = NameConditionContext;

myGrammarParser.prototype.nameCondition = function() {

    var localctx = new NameConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, myGrammarParser.RULE_nameCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 318;
        this.words();
        this.state = 319;
        this.match(myGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_annotations;
    return this;
}

AnnotationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationsContext.prototype.constructor = AnnotationsContext;

AnnotationsContext.prototype.ANNOTATION = function() {
    return this.getToken(myGrammarParser.ANNOTATION, 0);
};

AnnotationsContext.prototype.annotationCondition = function() {
    return this.getTypedRuleContext(AnnotationConditionContext,0);
};

AnnotationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAnnotations(this);
	}
};

AnnotationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAnnotations(this);
	}
};




myGrammarParser.AnnotationsContext = AnnotationsContext;

myGrammarParser.prototype.annotations = function() {

    var localctx = new AnnotationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, myGrammarParser.RULE_annotations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 321;
        this.match(myGrammarParser.ANNOTATION);
        this.state = 323;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        if(la_===1) {
            this.state = 322;
            this.annotationCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_annotationOf;
    return this;
}

AnnotationOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationOfContext.prototype.constructor = AnnotationOfContext;

AnnotationOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

AnnotationOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

AnnotationOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

AnnotationOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

AnnotationOfContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

AnnotationOfContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

AnnotationOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAnnotationOf(this);
	}
};

AnnotationOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAnnotationOf(this);
	}
};




myGrammarParser.AnnotationOfContext = AnnotationOfContext;

myGrammarParser.prototype.annotationOf = function() {

    var localctx = new AnnotationOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, myGrammarParser.RULE_annotationOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 325;
        this.of();
        this.state = 331;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.CLASSES:
            this.state = 326;
            this.classes();
            break;
        case myGrammarParser.FUNCTION:
            this.state = 327;
            this.functions();
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.state = 328;
            this.constructors();
            break;
        case myGrammarParser.AbstractFunctions:
            this.state = 329;
            this.abstractFunctions();
            break;
        case myGrammarParser.DeclarationStatement:
            this.state = 330;
            this.declarationStatements();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_annotationCondition;
    return this;
}

AnnotationConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationConditionContext.prototype.constructor = AnnotationConditionContext;

AnnotationConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

AnnotationConditionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

AnnotationConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAnnotationCondition(this);
	}
};

AnnotationConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAnnotationCondition(this);
	}
};




myGrammarParser.AnnotationConditionContext = AnnotationConditionContext;

myGrammarParser.prototype.annotationCondition = function() {

    var localctx = new AnnotationConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, myGrammarParser.RULE_annotationCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 333;
        this.combinatorialWords();
        this.state = 334;
        this.match(myGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtensionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_extensions;
    return this;
}

ExtensionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionsContext.prototype.constructor = ExtensionsContext;

ExtensionsContext.prototype.EXTENSION = function() {
    return this.getToken(myGrammarParser.EXTENSION, 0);
};

ExtensionsContext.prototype.extensionCondition = function() {
    return this.getTypedRuleContext(ExtensionConditionContext,0);
};

ExtensionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExtensions(this);
	}
};

ExtensionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExtensions(this);
	}
};




myGrammarParser.ExtensionsContext = ExtensionsContext;

myGrammarParser.prototype.extensions = function() {

    var localctx = new ExtensionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, myGrammarParser.RULE_extensions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 336;
        this.match(myGrammarParser.EXTENSION);
        this.state = 337;
        this.extensionCondition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtensionOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_extensionOf;
    return this;
}

ExtensionOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionOfContext.prototype.constructor = ExtensionOfContext;

ExtensionOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ExtensionOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

ExtensionOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExtensionOf(this);
	}
};

ExtensionOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExtensionOf(this);
	}
};




myGrammarParser.ExtensionOfContext = ExtensionOfContext;

myGrammarParser.prototype.extensionOf = function() {

    var localctx = new ExtensionOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, myGrammarParser.RULE_extensionOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 339;
        this.of();
        this.state = 340;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtensionConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_extensionCondition;
    return this;
}

ExtensionConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionConditionContext.prototype.constructor = ExtensionConditionContext;

ExtensionConditionContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ExtensionConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

ExtensionConditionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

ExtensionConditionContext.prototype.SUPERCLASS = function() {
    return this.getToken(myGrammarParser.SUPERCLASS, 0);
};

ExtensionConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExtensionCondition(this);
	}
};

ExtensionConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExtensionCondition(this);
	}
};




myGrammarParser.ExtensionConditionContext = ExtensionConditionContext;

myGrammarParser.prototype.extensionCondition = function() {

    var localctx = new ExtensionConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, myGrammarParser.RULE_extensionCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 342;
        this.of();
        this.state = 347;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.T__0:
            this.state = 343;
            this.words();
            this.state = 344;
            this.match(myGrammarParser.SPACE);
            break;
        case myGrammarParser.SUPERCLASS:
            this.state = 346;
            this.match(myGrammarParser.SUPERCLASS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImplementationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_implementations;
    return this;
}

ImplementationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImplementationsContext.prototype.constructor = ImplementationsContext;

ImplementationsContext.prototype.IMPLEMENTATION = function() {
    return this.getToken(myGrammarParser.IMPLEMENTATION, 0);
};

ImplementationsContext.prototype.implementationCondition = function() {
    return this.getTypedRuleContext(ImplementationConditionContext,0);
};

ImplementationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterImplementations(this);
	}
};

ImplementationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitImplementations(this);
	}
};




myGrammarParser.ImplementationsContext = ImplementationsContext;

myGrammarParser.prototype.implementations = function() {

    var localctx = new ImplementationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, myGrammarParser.RULE_implementations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 349;
        this.match(myGrammarParser.IMPLEMENTATION);
        this.state = 350;
        this.implementationCondition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImplementationOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_implementationOf;
    return this;
}

ImplementationOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImplementationOfContext.prototype.constructor = ImplementationOfContext;

ImplementationOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ImplementationOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

ImplementationOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterImplementationOf(this);
	}
};

ImplementationOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitImplementationOf(this);
	}
};




myGrammarParser.ImplementationOfContext = ImplementationOfContext;

myGrammarParser.prototype.implementationOf = function() {

    var localctx = new ImplementationOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, myGrammarParser.RULE_implementationOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 352;
        this.of();
        this.state = 353;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImplementationConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_implementationCondition;
    return this;
}

ImplementationConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImplementationConditionContext.prototype.constructor = ImplementationConditionContext;

ImplementationConditionContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ImplementationConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

ImplementationConditionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

ImplementationConditionContext.prototype.INTERFACE = function() {
    return this.getToken(myGrammarParser.INTERFACE, 0);
};

ImplementationConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterImplementationCondition(this);
	}
};

ImplementationConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitImplementationCondition(this);
	}
};




myGrammarParser.ImplementationConditionContext = ImplementationConditionContext;

myGrammarParser.prototype.implementationCondition = function() {

    var localctx = new ImplementationConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, myGrammarParser.RULE_implementationCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 355;
        this.of();
        this.state = 360;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.T__0:
            this.state = 356;
            this.words();
            this.state = 357;
            this.match(myGrammarParser.SPACE);
            break;
        case myGrammarParser.INTERFACE:
            this.state = 359;
            this.match(myGrammarParser.INTERFACE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_functions;
    return this;
}

FunctionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionsContext.prototype.constructor = FunctionsContext;

FunctionsContext.prototype.FUNCTION = function() {
    return this.getToken(myGrammarParser.FUNCTION, 0);
};

FunctionsContext.prototype.functionCondition = function() {
    return this.getTypedRuleContext(FunctionConditionContext,0);
};

FunctionsContext.prototype.functionOf = function() {
    return this.getTypedRuleContext(FunctionOfContext,0);
};

FunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterFunctions(this);
	}
};

FunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitFunctions(this);
	}
};




myGrammarParser.FunctionsContext = FunctionsContext;

myGrammarParser.prototype.functions = function() {

    var localctx = new FunctionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, myGrammarParser.RULE_functions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 362;
        this.match(myGrammarParser.FUNCTION);
        this.state = 364;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        if(la_===1) {
            this.state = 363;
            this.functionCondition();

        }
        this.state = 367;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        if(la_===1) {
            this.state = 366;
            this.functionOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_functionOf;
    return this;
}

FunctionOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionOfContext.prototype.constructor = FunctionOfContext;

FunctionOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

FunctionOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

FunctionOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterFunctionOf(this);
	}
};

FunctionOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitFunctionOf(this);
	}
};




myGrammarParser.FunctionOfContext = FunctionOfContext;

myGrammarParser.prototype.functionOf = function() {

    var localctx = new FunctionOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, myGrammarParser.RULE_functionOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 369;
        this.of();
        this.state = 370;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_functionCondition;
    return this;
}

FunctionConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionConditionContext.prototype.constructor = FunctionConditionContext;

FunctionConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

FunctionConditionContext.prototype.functionExpression = function() {
    return this.getTypedRuleContext(FunctionExpressionContext,0);
};

FunctionConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterFunctionCondition(this);
	}
};

FunctionConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitFunctionCondition(this);
	}
};




myGrammarParser.FunctionConditionContext = FunctionConditionContext;

myGrammarParser.prototype.functionCondition = function() {

    var localctx = new FunctionConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, myGrammarParser.RULE_functionCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 372;
        this.withWord();
        this.state = 373;
        this.functionExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_functionExpression;
    this.left = null; // FunctionExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // FunctionExpressionContext
    return this;
}

FunctionExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionExpressionContext.prototype.constructor = FunctionExpressionContext;

FunctionExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

FunctionExpressionContext.prototype.functionExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionExpressionContext);
    } else {
        return this.getTypedRuleContext(FunctionExpressionContext,i);
    }
};

FunctionExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

FunctionExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

FunctionExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

FunctionExpressionContext.prototype.visibilities = function() {
    return this.getTypedRuleContext(VisibilitiesContext,0);
};

FunctionExpressionContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

FunctionExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

FunctionExpressionContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

FunctionExpressionContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

FunctionExpressionContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

FunctionExpressionContext.prototype.expressionStatements = function() {
    return this.getTypedRuleContext(ExpressionStatementsContext,0);
};

FunctionExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

FunctionExpressionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

FunctionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterFunctionExpression(this);
	}
};

FunctionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitFunctionExpression(this);
	}
};



myGrammarParser.prototype.functionExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new FunctionExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 58;
    this.enterRecursionRule(localctx, 58, myGrammarParser.RULE_functionExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 391;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 376;
            this.match(myGrammarParser.LPAREN);
            this.state = 377;
            this.functionExpression(0);
            this.state = 378;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.NAME:
        case myGrammarParser.ANNOTATION:
        case myGrammarParser.PARAMETER:
        case myGrammarParser.TYPES:
        case myGrammarParser.SPECIFIER:
        case myGrammarParser.VISIBILITY:
        case myGrammarParser.ReturnValue:
        case myGrammarParser.DeclarationStatement:
        case myGrammarParser.ExpressionStatement:
            this.state = 389;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.ANNOTATION:
                this.state = 380;
                this.annotations();
                break;
            case myGrammarParser.SPECIFIER:
                this.state = 381;
                this.specifiers();
                break;
            case myGrammarParser.VISIBILITY:
                this.state = 382;
                this.visibilities();
                break;
            case myGrammarParser.TYPES:
                this.state = 383;
                this.types();
                break;
            case myGrammarParser.NAME:
                this.state = 384;
                this.names();
                break;
            case myGrammarParser.PARAMETER:
                this.state = 385;
                this.parameters();
                break;
            case myGrammarParser.ReturnValue:
                this.state = 386;
                this.returnValues();
                break;
            case myGrammarParser.DeclarationStatement:
                this.state = 387;
                this.declarationStatements();
                break;
            case myGrammarParser.ExpressionStatement:
                this.state = 388;
                this.expressionStatements();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 401;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 399;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new FunctionExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_functionExpression);
                    this.state = 393;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 394;
                    localctx.op = this.binary();
                    this.state = 395;
                    localctx.right = this.functionExpression(4);
                    break;

                case 2:
                    localctx = new FunctionExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_functionExpression);
                    this.state = 397;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 398;
                    this.match(myGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 403;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AbstractFunctionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_abstractFunctions;
    return this;
}

AbstractFunctionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionsContext.prototype.constructor = AbstractFunctionsContext;

AbstractFunctionsContext.prototype.AbstractFunctions = function() {
    return this.getToken(myGrammarParser.AbstractFunctions, 0);
};

AbstractFunctionsContext.prototype.abstractFunctionCondition = function() {
    return this.getTypedRuleContext(AbstractFunctionConditionContext,0);
};

AbstractFunctionsContext.prototype.abstractFunctionOf = function() {
    return this.getTypedRuleContext(AbstractFunctionOfContext,0);
};

AbstractFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAbstractFunctions(this);
	}
};

AbstractFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAbstractFunctions(this);
	}
};




myGrammarParser.AbstractFunctionsContext = AbstractFunctionsContext;

myGrammarParser.prototype.abstractFunctions = function() {

    var localctx = new AbstractFunctionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, myGrammarParser.RULE_abstractFunctions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 404;
        this.match(myGrammarParser.AbstractFunctions);
        this.state = 406;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
        if(la_===1) {
            this.state = 405;
            this.abstractFunctionCondition();

        }
        this.state = 409;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        if(la_===1) {
            this.state = 408;
            this.abstractFunctionOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractFunctionOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_abstractFunctionOf;
    return this;
}

AbstractFunctionOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionOfContext.prototype.constructor = AbstractFunctionOfContext;

AbstractFunctionOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

AbstractFunctionOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

AbstractFunctionOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAbstractFunctionOf(this);
	}
};

AbstractFunctionOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAbstractFunctionOf(this);
	}
};




myGrammarParser.AbstractFunctionOfContext = AbstractFunctionOfContext;

myGrammarParser.prototype.abstractFunctionOf = function() {

    var localctx = new AbstractFunctionOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, myGrammarParser.RULE_abstractFunctionOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 411;
        this.of();
        this.state = 412;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractFunctionConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_abstractFunctionCondition;
    return this;
}

AbstractFunctionConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionConditionContext.prototype.constructor = AbstractFunctionConditionContext;

AbstractFunctionConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

AbstractFunctionConditionContext.prototype.abstractFunctionExpression = function() {
    return this.getTypedRuleContext(AbstractFunctionExpressionContext,0);
};

AbstractFunctionConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAbstractFunctionCondition(this);
	}
};

AbstractFunctionConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAbstractFunctionCondition(this);
	}
};




myGrammarParser.AbstractFunctionConditionContext = AbstractFunctionConditionContext;

myGrammarParser.prototype.abstractFunctionCondition = function() {

    var localctx = new AbstractFunctionConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, myGrammarParser.RULE_abstractFunctionCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 414;
        this.withWord();
        this.state = 415;
        this.abstractFunctionExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractFunctionExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_abstractFunctionExpression;
    this.left = null; // AbstractFunctionExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // AbstractFunctionExpressionContext
    return this;
}

AbstractFunctionExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionExpressionContext.prototype.constructor = AbstractFunctionExpressionContext;

AbstractFunctionExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

AbstractFunctionExpressionContext.prototype.abstractFunctionExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AbstractFunctionExpressionContext);
    } else {
        return this.getTypedRuleContext(AbstractFunctionExpressionContext,i);
    }
};

AbstractFunctionExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

AbstractFunctionExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

AbstractFunctionExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

AbstractFunctionExpressionContext.prototype.visibilities = function() {
    return this.getTypedRuleContext(VisibilitiesContext,0);
};

AbstractFunctionExpressionContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

AbstractFunctionExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

AbstractFunctionExpressionContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

AbstractFunctionExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

AbstractFunctionExpressionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

AbstractFunctionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAbstractFunctionExpression(this);
	}
};

AbstractFunctionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAbstractFunctionExpression(this);
	}
};



myGrammarParser.prototype.abstractFunctionExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AbstractFunctionExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 66;
    this.enterRecursionRule(localctx, 66, myGrammarParser.RULE_abstractFunctionExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 430;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 418;
            this.match(myGrammarParser.LPAREN);
            this.state = 419;
            this.abstractFunctionExpression(0);
            this.state = 420;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.NAME:
        case myGrammarParser.ANNOTATION:
        case myGrammarParser.PARAMETER:
        case myGrammarParser.TYPES:
        case myGrammarParser.SPECIFIER:
        case myGrammarParser.VISIBILITY:
            this.state = 428;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.ANNOTATION:
                this.state = 422;
                this.annotations();
                break;
            case myGrammarParser.SPECIFIER:
                this.state = 423;
                this.specifiers();
                break;
            case myGrammarParser.VISIBILITY:
                this.state = 424;
                this.visibilities();
                break;
            case myGrammarParser.TYPES:
                this.state = 425;
                this.types();
                break;
            case myGrammarParser.NAME:
                this.state = 426;
                this.names();
                break;
            case myGrammarParser.PARAMETER:
                this.state = 427;
                this.parameters();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 440;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 438;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AbstractFunctionExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_abstractFunctionExpression);
                    this.state = 432;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 433;
                    localctx.op = this.binary();
                    this.state = 434;
                    localctx.right = this.abstractFunctionExpression(4);
                    break;

                case 2:
                    localctx = new AbstractFunctionExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_abstractFunctionExpression);
                    this.state = 436;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 437;
                    this.match(myGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 442;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ConstructorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_constructors;
    return this;
}

ConstructorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorsContext.prototype.constructor = ConstructorsContext;

ConstructorsContext.prototype.CONSTRUCTOR = function() {
    return this.getToken(myGrammarParser.CONSTRUCTOR, 0);
};

ConstructorsContext.prototype.constructorCondition = function() {
    return this.getTypedRuleContext(ConstructorConditionContext,0);
};

ConstructorsContext.prototype.constructorOf = function() {
    return this.getTypedRuleContext(ConstructorOfContext,0);
};

ConstructorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterConstructors(this);
	}
};

ConstructorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitConstructors(this);
	}
};




myGrammarParser.ConstructorsContext = ConstructorsContext;

myGrammarParser.prototype.constructors = function() {

    var localctx = new ConstructorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, myGrammarParser.RULE_constructors);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 443;
        this.match(myGrammarParser.CONSTRUCTOR);
        this.state = 445;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        if(la_===1) {
            this.state = 444;
            this.constructorCondition();

        }
        this.state = 448;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        if(la_===1) {
            this.state = 447;
            this.constructorOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_constructorOf;
    return this;
}

ConstructorOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorOfContext.prototype.constructor = ConstructorOfContext;

ConstructorOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ConstructorOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

ConstructorOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterConstructorOf(this);
	}
};

ConstructorOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitConstructorOf(this);
	}
};




myGrammarParser.ConstructorOfContext = ConstructorOfContext;

myGrammarParser.prototype.constructorOf = function() {

    var localctx = new ConstructorOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, myGrammarParser.RULE_constructorOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 450;
        this.of();
        this.state = 451;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_constructorCondition;
    return this;
}

ConstructorConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorConditionContext.prototype.constructor = ConstructorConditionContext;

ConstructorConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

ConstructorConditionContext.prototype.constructorExpression = function() {
    return this.getTypedRuleContext(ConstructorExpressionContext,0);
};

ConstructorConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterConstructorCondition(this);
	}
};

ConstructorConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitConstructorCondition(this);
	}
};




myGrammarParser.ConstructorConditionContext = ConstructorConditionContext;

myGrammarParser.prototype.constructorCondition = function() {

    var localctx = new ConstructorConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, myGrammarParser.RULE_constructorCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 453;
        this.withWord();
        this.state = 454;
        this.constructorExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_constructorExpression;
    this.left = null; // ConstructorExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ConstructorExpressionContext
    return this;
}

ConstructorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorExpressionContext.prototype.constructor = ConstructorExpressionContext;

ConstructorExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

ConstructorExpressionContext.prototype.constructorExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstructorExpressionContext);
    } else {
        return this.getTypedRuleContext(ConstructorExpressionContext,i);
    }
};

ConstructorExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

ConstructorExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

ConstructorExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

ConstructorExpressionContext.prototype.visibilities = function() {
    return this.getTypedRuleContext(VisibilitiesContext,0);
};

ConstructorExpressionContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

ConstructorExpressionContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

ConstructorExpressionContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

ConstructorExpressionContext.prototype.expressionStatements = function() {
    return this.getTypedRuleContext(ExpressionStatementsContext,0);
};

ConstructorExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ConstructorExpressionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

ConstructorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterConstructorExpression(this);
	}
};

ConstructorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitConstructorExpression(this);
	}
};



myGrammarParser.prototype.constructorExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ConstructorExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 74;
    this.enterRecursionRule(localctx, 74, myGrammarParser.RULE_constructorExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 470;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 457;
            this.match(myGrammarParser.LPAREN);
            this.state = 458;
            this.constructorExpression(0);
            this.state = 459;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.ANNOTATION:
        case myGrammarParser.PARAMETER:
        case myGrammarParser.SPECIFIER:
        case myGrammarParser.VISIBILITY:
        case myGrammarParser.ReturnValue:
        case myGrammarParser.DeclarationStatement:
        case myGrammarParser.ExpressionStatement:
            this.state = 468;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.ANNOTATION:
                this.state = 461;
                this.annotations();
                break;
            case myGrammarParser.SPECIFIER:
                this.state = 462;
                this.specifiers();
                break;
            case myGrammarParser.VISIBILITY:
                this.state = 463;
                this.visibilities();
                break;
            case myGrammarParser.PARAMETER:
                this.state = 464;
                this.parameters();
                break;
            case myGrammarParser.ReturnValue:
                this.state = 465;
                this.returnValues();
                break;
            case myGrammarParser.DeclarationStatement:
                this.state = 466;
                this.declarationStatements();
                break;
            case myGrammarParser.ExpressionStatement:
                this.state = 467;
                this.expressionStatements();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 480;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 478;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ConstructorExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_constructorExpression);
                    this.state = 472;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 473;
                    localctx.op = this.binary();
                    this.state = 474;
                    localctx.right = this.constructorExpression(4);
                    break;

                case 2:
                    localctx = new ConstructorExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_constructorExpression);
                    this.state = 476;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 477;
                    this.match(myGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 482;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_parameters;
    return this;
}

ParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParametersContext.prototype.constructor = ParametersContext;

ParametersContext.prototype.PARAMETER = function() {
    return this.getToken(myGrammarParser.PARAMETER, 0);
};

ParametersContext.prototype.parameterCondition = function() {
    return this.getTypedRuleContext(ParameterConditionContext,0);
};

ParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterParameters(this);
	}
};

ParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitParameters(this);
	}
};




myGrammarParser.ParametersContext = ParametersContext;

myGrammarParser.prototype.parameters = function() {

    var localctx = new ParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, myGrammarParser.RULE_parameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 483;
        this.match(myGrammarParser.PARAMETER);
        this.state = 485;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
        if(la_===1) {
            this.state = 484;
            this.parameterCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_parameterOf;
    return this;
}

ParameterOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterOfContext.prototype.constructor = ParameterOfContext;

ParameterOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ParameterOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

ParameterOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

ParameterOfContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

ParameterOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterParameterOf(this);
	}
};

ParameterOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitParameterOf(this);
	}
};




myGrammarParser.ParameterOfContext = ParameterOfContext;

myGrammarParser.prototype.parameterOf = function() {

    var localctx = new ParameterOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, myGrammarParser.RULE_parameterOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 487;
        this.of();
        this.state = 491;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.FUNCTION:
            this.state = 488;
            this.functions();
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.state = 489;
            this.constructors();
            break;
        case myGrammarParser.AbstractFunctions:
            this.state = 490;
            this.abstractFunctions();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_parameterCondition;
    return this;
}

ParameterConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterConditionContext.prototype.constructor = ParameterConditionContext;

ParameterConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

ParameterConditionContext.prototype.parameterExpression = function() {
    return this.getTypedRuleContext(ParameterExpressionContext,0);
};

ParameterConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterParameterCondition(this);
	}
};

ParameterConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitParameterCondition(this);
	}
};




myGrammarParser.ParameterConditionContext = ParameterConditionContext;

myGrammarParser.prototype.parameterCondition = function() {

    var localctx = new ParameterConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, myGrammarParser.RULE_parameterCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 493;
        this.withWord();
        this.state = 494;
        this.parameterExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_parameterExpression;
    this.left = null; // ParameterExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ParameterExpressionContext
    return this;
}

ParameterExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterExpressionContext.prototype.constructor = ParameterExpressionContext;

ParameterExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

ParameterExpressionContext.prototype.parameterExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterExpressionContext);
    } else {
        return this.getTypedRuleContext(ParameterExpressionContext,i);
    }
};

ParameterExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

ParameterExpressionContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

ParameterExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

ParameterExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ParameterExpressionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

ParameterExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterParameterExpression(this);
	}
};

ParameterExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitParameterExpression(this);
	}
};



myGrammarParser.prototype.parameterExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ParameterExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 82;
    this.enterRecursionRule(localctx, 82, myGrammarParser.RULE_parameterExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 505;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 497;
            this.match(myGrammarParser.LPAREN);
            this.state = 498;
            this.parameterExpression(0);
            this.state = 499;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.NAME:
        case myGrammarParser.TYPES:
            this.state = 503;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.TYPES:
                this.state = 501;
                this.types();
                break;
            case myGrammarParser.NAME:
                this.state = 502;
                this.names();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 515;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 513;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ParameterExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_parameterExpression);
                    this.state = 507;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 508;
                    localctx.op = this.binary();
                    this.state = 509;
                    localctx.right = this.parameterExpression(4);
                    break;

                case 2:
                    localctx = new ParameterExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_parameterExpression);
                    this.state = 511;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 512;
                    this.match(myGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 517;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TypesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_types;
    return this;
}

TypesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypesContext.prototype.constructor = TypesContext;

TypesContext.prototype.TYPES = function() {
    return this.getToken(myGrammarParser.TYPES, 0);
};

TypesContext.prototype.typeCondition = function() {
    return this.getTypedRuleContext(TypeConditionContext,0);
};

TypesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterTypes(this);
	}
};

TypesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitTypes(this);
	}
};




myGrammarParser.TypesContext = TypesContext;

myGrammarParser.prototype.types = function() {

    var localctx = new TypesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, myGrammarParser.RULE_types);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 518;
        this.match(myGrammarParser.TYPES);
        this.state = 520;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        if(la_===1) {
            this.state = 519;
            this.typeCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_typeOf;
    return this;
}

TypeOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeOfContext.prototype.constructor = TypeOfContext;

TypeOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

TypeOfContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

TypeOfContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

TypeOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterTypeOf(this);
	}
};

TypeOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitTypeOf(this);
	}
};




myGrammarParser.TypeOfContext = TypeOfContext;

myGrammarParser.prototype.typeOf = function() {

    var localctx = new TypeOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, myGrammarParser.RULE_typeOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 522;
        this.of();
        this.state = 525;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.PARAMETER:
            this.state = 523;
            this.parameters();
            break;
        case myGrammarParser.DeclarationStatement:
            this.state = 524;
            this.declarationStatements();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_typeCondition;
    return this;
}

TypeConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeConditionContext.prototype.constructor = TypeConditionContext;

TypeConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

TypeConditionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

TypeConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

TypeConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterTypeCondition(this);
	}
};

TypeConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitTypeCondition(this);
	}
};




myGrammarParser.TypeConditionContext = TypeConditionContext;

myGrammarParser.prototype.typeCondition = function() {

    var localctx = new TypeConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, myGrammarParser.RULE_typeCondition);
    try {
        this.state = 533;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 527;
            this.combinatorialWords();
            this.state = 528;
            this.match(myGrammarParser.SPACE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 530;
            this.words();
            this.state = 531;
            this.match(myGrammarParser.SPACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_specifiers;
    return this;
}

SpecifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecifiersContext.prototype.constructor = SpecifiersContext;

SpecifiersContext.prototype.SPECIFIER = function() {
    return this.getToken(myGrammarParser.SPECIFIER, 0);
};

SpecifiersContext.prototype.specifierCondition = function() {
    return this.getTypedRuleContext(SpecifierConditionContext,0);
};

SpecifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterSpecifiers(this);
	}
};

SpecifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitSpecifiers(this);
	}
};




myGrammarParser.SpecifiersContext = SpecifiersContext;

myGrammarParser.prototype.specifiers = function() {

    var localctx = new SpecifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, myGrammarParser.RULE_specifiers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 535;
        this.match(myGrammarParser.SPECIFIER);
        this.state = 537;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        if(la_===1) {
            this.state = 536;
            this.specifierCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecifierOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_specifierOf;
    return this;
}

SpecifierOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecifierOfContext.prototype.constructor = SpecifierOfContext;

SpecifierOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

SpecifierOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

SpecifierOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

SpecifierOfContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

SpecifierOfContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

SpecifierOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

SpecifierOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterSpecifierOf(this);
	}
};

SpecifierOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitSpecifierOf(this);
	}
};




myGrammarParser.SpecifierOfContext = SpecifierOfContext;

myGrammarParser.prototype.specifierOf = function() {

    var localctx = new SpecifierOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, myGrammarParser.RULE_specifierOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 539;
        this.of();
        this.state = 545;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.FUNCTION:
            this.state = 540;
            this.functions();
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.state = 541;
            this.constructors();
            break;
        case myGrammarParser.AbstractFunctions:
            this.state = 542;
            this.abstractFunctions();
            break;
        case myGrammarParser.DeclarationStatement:
            this.state = 543;
            this.declarationStatements();
            break;
        case myGrammarParser.CLASSES:
            this.state = 544;
            this.classes();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecifierConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_specifierCondition;
    return this;
}

SpecifierConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecifierConditionContext.prototype.constructor = SpecifierConditionContext;

SpecifierConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

SpecifierConditionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

SpecifierConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterSpecifierCondition(this);
	}
};

SpecifierConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitSpecifierCondition(this);
	}
};




myGrammarParser.SpecifierConditionContext = SpecifierConditionContext;

myGrammarParser.prototype.specifierCondition = function() {

    var localctx = new SpecifierConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, myGrammarParser.RULE_specifierCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 547;
        this.words();
        this.state = 548;
        this.match(myGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VisibilitiesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_visibilities;
    return this;
}

VisibilitiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VisibilitiesContext.prototype.constructor = VisibilitiesContext;

VisibilitiesContext.prototype.VISIBILITY = function() {
    return this.getToken(myGrammarParser.VISIBILITY, 0);
};

VisibilitiesContext.prototype.visibilityCondition = function() {
    return this.getTypedRuleContext(VisibilityConditionContext,0);
};

VisibilitiesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterVisibilities(this);
	}
};

VisibilitiesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitVisibilities(this);
	}
};




myGrammarParser.VisibilitiesContext = VisibilitiesContext;

myGrammarParser.prototype.visibilities = function() {

    var localctx = new VisibilitiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, myGrammarParser.RULE_visibilities);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 550;
        this.match(myGrammarParser.VISIBILITY);
        this.state = 552;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        if(la_===1) {
            this.state = 551;
            this.visibilityCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VisibilityOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_visibilityOf;
    return this;
}

VisibilityOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VisibilityOfContext.prototype.constructor = VisibilityOfContext;

VisibilityOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

VisibilityOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

VisibilityOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

VisibilityOfContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

VisibilityOfContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

VisibilityOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

VisibilityOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterVisibilityOf(this);
	}
};

VisibilityOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitVisibilityOf(this);
	}
};




myGrammarParser.VisibilityOfContext = VisibilityOfContext;

myGrammarParser.prototype.visibilityOf = function() {

    var localctx = new VisibilityOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, myGrammarParser.RULE_visibilityOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 554;
        this.of();
        this.state = 560;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.FUNCTION:
            this.state = 555;
            this.functions();
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.state = 556;
            this.constructors();
            break;
        case myGrammarParser.AbstractFunctions:
            this.state = 557;
            this.abstractFunctions();
            break;
        case myGrammarParser.DeclarationStatement:
            this.state = 558;
            this.declarationStatements();
            break;
        case myGrammarParser.CLASSES:
            this.state = 559;
            this.classes();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VisibilityConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_visibilityCondition;
    return this;
}

VisibilityConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VisibilityConditionContext.prototype.constructor = VisibilityConditionContext;

VisibilityConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

VisibilityConditionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

VisibilityConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterVisibilityCondition(this);
	}
};

VisibilityConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitVisibilityCondition(this);
	}
};




myGrammarParser.VisibilityConditionContext = VisibilityConditionContext;

myGrammarParser.prototype.visibilityCondition = function() {

    var localctx = new VisibilityConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, myGrammarParser.RULE_visibilityCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 562;
        this.words();
        this.state = 563;
        this.match(myGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnValuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_returnValues;
    return this;
}

ReturnValuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnValuesContext.prototype.constructor = ReturnValuesContext;

ReturnValuesContext.prototype.ReturnValue = function() {
    return this.getToken(myGrammarParser.ReturnValue, 0);
};

ReturnValuesContext.prototype.returnValueCondition = function() {
    return this.getTypedRuleContext(ReturnValueConditionContext,0);
};

ReturnValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterReturnValues(this);
	}
};

ReturnValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitReturnValues(this);
	}
};




myGrammarParser.ReturnValuesContext = ReturnValuesContext;

myGrammarParser.prototype.returnValues = function() {

    var localctx = new ReturnValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, myGrammarParser.RULE_returnValues);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 565;
        this.match(myGrammarParser.ReturnValue);
        this.state = 567;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        if(la_===1) {
            this.state = 566;
            this.returnValueCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnValueOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_returnValueOf;
    return this;
}

ReturnValueOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnValueOfContext.prototype.constructor = ReturnValueOfContext;

ReturnValueOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ReturnValueOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

ReturnValueOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterReturnValueOf(this);
	}
};

ReturnValueOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitReturnValueOf(this);
	}
};




myGrammarParser.ReturnValueOfContext = ReturnValueOfContext;

myGrammarParser.prototype.returnValueOf = function() {

    var localctx = new ReturnValueOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, myGrammarParser.RULE_returnValueOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 569;
        this.of();
        this.state = 570;
        this.functions();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnValueConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_returnValueCondition;
    return this;
}

ReturnValueConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnValueConditionContext.prototype.constructor = ReturnValueConditionContext;

ReturnValueConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

ReturnValueConditionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

ReturnValueConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterReturnValueCondition(this);
	}
};

ReturnValueConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitReturnValueCondition(this);
	}
};




myGrammarParser.ReturnValueConditionContext = ReturnValueConditionContext;

myGrammarParser.prototype.returnValueCondition = function() {

    var localctx = new ReturnValueConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, myGrammarParser.RULE_returnValueCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 572;
        this.combinatorialWords();
        this.state = 573;
        this.match(myGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationStatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_declarationStatements;
    return this;
}

DeclarationStatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementsContext.prototype.constructor = DeclarationStatementsContext;

DeclarationStatementsContext.prototype.DeclarationStatement = function() {
    return this.getToken(myGrammarParser.DeclarationStatement, 0);
};

DeclarationStatementsContext.prototype.declarationStatementCondition = function() {
    return this.getTypedRuleContext(DeclarationStatementConditionContext,0);
};

DeclarationStatementsContext.prototype.declarationStatementOf = function() {
    return this.getTypedRuleContext(DeclarationStatementOfContext,0);
};

DeclarationStatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterDeclarationStatements(this);
	}
};

DeclarationStatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitDeclarationStatements(this);
	}
};




myGrammarParser.DeclarationStatementsContext = DeclarationStatementsContext;

myGrammarParser.prototype.declarationStatements = function() {

    var localctx = new DeclarationStatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, myGrammarParser.RULE_declarationStatements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 575;
        this.match(myGrammarParser.DeclarationStatement);
        this.state = 577;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        if(la_===1) {
            this.state = 576;
            this.declarationStatementCondition();

        }
        this.state = 580;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        if(la_===1) {
            this.state = 579;
            this.declarationStatementOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationStatementOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_declarationStatementOf;
    return this;
}

DeclarationStatementOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementOfContext.prototype.constructor = DeclarationStatementOfContext;

DeclarationStatementOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

DeclarationStatementOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

DeclarationStatementOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

DeclarationStatementOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

DeclarationStatementOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterDeclarationStatementOf(this);
	}
};

DeclarationStatementOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitDeclarationStatementOf(this);
	}
};




myGrammarParser.DeclarationStatementOfContext = DeclarationStatementOfContext;

myGrammarParser.prototype.declarationStatementOf = function() {

    var localctx = new DeclarationStatementOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, myGrammarParser.RULE_declarationStatementOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 582;
        this.of();
        this.state = 586;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.CLASSES:
            this.state = 583;
            this.classes();
            break;
        case myGrammarParser.FUNCTION:
            this.state = 584;
            this.functions();
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.state = 585;
            this.constructors();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationStatementConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_declarationStatementCondition;
    return this;
}

DeclarationStatementConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementConditionContext.prototype.constructor = DeclarationStatementConditionContext;

DeclarationStatementConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

DeclarationStatementConditionContext.prototype.declarationStatementExpression = function() {
    return this.getTypedRuleContext(DeclarationStatementExpressionContext,0);
};

DeclarationStatementConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterDeclarationStatementCondition(this);
	}
};

DeclarationStatementConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitDeclarationStatementCondition(this);
	}
};




myGrammarParser.DeclarationStatementConditionContext = DeclarationStatementConditionContext;

myGrammarParser.prototype.declarationStatementCondition = function() {

    var localctx = new DeclarationStatementConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, myGrammarParser.RULE_declarationStatementCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 588;
        this.withWord();
        this.state = 589;
        this.declarationStatementExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationStatementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_declarationStatementExpression;
    this.left = null; // DeclarationStatementExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // DeclarationStatementExpressionContext
    return this;
}

DeclarationStatementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementExpressionContext.prototype.constructor = DeclarationStatementExpressionContext;

DeclarationStatementExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

DeclarationStatementExpressionContext.prototype.declarationStatementExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationStatementExpressionContext);
    } else {
        return this.getTypedRuleContext(DeclarationStatementExpressionContext,i);
    }
};

DeclarationStatementExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

DeclarationStatementExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

DeclarationStatementExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

DeclarationStatementExpressionContext.prototype.visibilities = function() {
    return this.getTypedRuleContext(VisibilitiesContext,0);
};

DeclarationStatementExpressionContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

DeclarationStatementExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

DeclarationStatementExpressionContext.prototype.initialValues = function() {
    return this.getTypedRuleContext(InitialValuesContext,0);
};

DeclarationStatementExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

DeclarationStatementExpressionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

DeclarationStatementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterDeclarationStatementExpression(this);
	}
};

DeclarationStatementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitDeclarationStatementExpression(this);
	}
};



myGrammarParser.prototype.declarationStatementExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new DeclarationStatementExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 114;
    this.enterRecursionRule(localctx, 114, myGrammarParser.RULE_declarationStatementExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 604;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 592;
            this.match(myGrammarParser.LPAREN);
            this.state = 593;
            this.declarationStatementExpression(0);
            this.state = 594;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.NAME:
        case myGrammarParser.ANNOTATION:
        case myGrammarParser.TYPES:
        case myGrammarParser.SPECIFIER:
        case myGrammarParser.VISIBILITY:
        case myGrammarParser.InitialValue:
            this.state = 602;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.ANNOTATION:
                this.state = 596;
                this.annotations();
                break;
            case myGrammarParser.SPECIFIER:
                this.state = 597;
                this.specifiers();
                break;
            case myGrammarParser.VISIBILITY:
                this.state = 598;
                this.visibilities();
                break;
            case myGrammarParser.TYPES:
                this.state = 599;
                this.types();
                break;
            case myGrammarParser.NAME:
                this.state = 600;
                this.names();
                break;
            case myGrammarParser.InitialValue:
                this.state = 601;
                this.initialValues();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 614;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 612;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new DeclarationStatementExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_declarationStatementExpression);
                    this.state = 606;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 607;
                    localctx.op = this.binary();
                    this.state = 608;
                    localctx.right = this.declarationStatementExpression(4);
                    break;

                case 2:
                    localctx = new DeclarationStatementExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_declarationStatementExpression);
                    this.state = 610;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 611;
                    this.match(myGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 616;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ExpressionStatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_expressionStatements;
    return this;
}

ExpressionStatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementsContext.prototype.constructor = ExpressionStatementsContext;

ExpressionStatementsContext.prototype.ExpressionStatement = function() {
    return this.getToken(myGrammarParser.ExpressionStatement, 0);
};

ExpressionStatementsContext.prototype.expressionStatementCondition = function() {
    return this.getTypedRuleContext(ExpressionStatementConditionContext,0);
};

ExpressionStatementsContext.prototype.expressionStatementOf = function() {
    return this.getTypedRuleContext(ExpressionStatementOfContext,0);
};

ExpressionStatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExpressionStatements(this);
	}
};

ExpressionStatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExpressionStatements(this);
	}
};




myGrammarParser.ExpressionStatementsContext = ExpressionStatementsContext;

myGrammarParser.prototype.expressionStatements = function() {

    var localctx = new ExpressionStatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, myGrammarParser.RULE_expressionStatements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 617;
        this.match(myGrammarParser.ExpressionStatement);
        this.state = 619;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        if(la_===1) {
            this.state = 618;
            this.expressionStatementCondition();

        }
        this.state = 622;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
        if(la_===1) {
            this.state = 621;
            this.expressionStatementOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_expressionStatementOf;
    return this;
}

ExpressionStatementOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementOfContext.prototype.constructor = ExpressionStatementOfContext;

ExpressionStatementOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ExpressionStatementOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

ExpressionStatementOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

ExpressionStatementOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExpressionStatementOf(this);
	}
};

ExpressionStatementOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExpressionStatementOf(this);
	}
};




myGrammarParser.ExpressionStatementOfContext = ExpressionStatementOfContext;

myGrammarParser.prototype.expressionStatementOf = function() {

    var localctx = new ExpressionStatementOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, myGrammarParser.RULE_expressionStatementOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 624;
        this.of();
        this.state = 628;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        switch(la_) {
        case 1:
            this.state = 625;
            this.functions();
            break;

        case 2:
            this.state = 626;
            this.constructors();
            break;

        case 3:
            this.state = 627;
            this.constructors();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_expressionStatementCondition;
    return this;
}

ExpressionStatementConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementConditionContext.prototype.constructor = ExpressionStatementConditionContext;

ExpressionStatementConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

ExpressionStatementConditionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

ExpressionStatementConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExpressionStatementCondition(this);
	}
};

ExpressionStatementConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExpressionStatementCondition(this);
	}
};




myGrammarParser.ExpressionStatementConditionContext = ExpressionStatementConditionContext;

myGrammarParser.prototype.expressionStatementCondition = function() {

    var localctx = new ExpressionStatementConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, myGrammarParser.RULE_expressionStatementCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 630;
        this.combinatorialWords();
        this.state = 631;
        this.match(myGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitialValuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_initialValues;
    return this;
}

InitialValuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitialValuesContext.prototype.constructor = InitialValuesContext;

InitialValuesContext.prototype.InitialValue = function() {
    return this.getToken(myGrammarParser.InitialValue, 0);
};

InitialValuesContext.prototype.initialValueCondition = function() {
    return this.getTypedRuleContext(InitialValueConditionContext,0);
};

InitialValuesContext.prototype.initialValueOf = function() {
    return this.getTypedRuleContext(InitialValueOfContext,0);
};

InitialValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterInitialValues(this);
	}
};

InitialValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitInitialValues(this);
	}
};




myGrammarParser.InitialValuesContext = InitialValuesContext;

myGrammarParser.prototype.initialValues = function() {

    var localctx = new InitialValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, myGrammarParser.RULE_initialValues);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 633;
        this.match(myGrammarParser.InitialValue);
        this.state = 635;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        if(la_===1) {
            this.state = 634;
            this.initialValueCondition();

        }
        this.state = 638;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        if(la_===1) {
            this.state = 637;
            this.initialValueOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitialValueOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_initialValueOf;
    return this;
}

InitialValueOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitialValueOfContext.prototype.constructor = InitialValueOfContext;

InitialValueOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

InitialValueOfContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

InitialValueOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterInitialValueOf(this);
	}
};

InitialValueOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitInitialValueOf(this);
	}
};




myGrammarParser.InitialValueOfContext = InitialValueOfContext;

myGrammarParser.prototype.initialValueOf = function() {

    var localctx = new InitialValueOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, myGrammarParser.RULE_initialValueOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 640;
        this.of();
        this.state = 641;
        this.declarationStatements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitialValueConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_initialValueCondition;
    return this;
}

InitialValueConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitialValueConditionContext.prototype.constructor = InitialValueConditionContext;

InitialValueConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

InitialValueConditionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

InitialValueConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterInitialValueCondition(this);
	}
};

InitialValueConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitInitialValueCondition(this);
	}
};




myGrammarParser.InitialValueConditionContext = InitialValueConditionContext;

myGrammarParser.prototype.initialValueCondition = function() {

    var localctx = new InitialValueConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, myGrammarParser.RULE_initialValueCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 643;
        this.combinatorialWords();
        this.state = 644;
        this.match(myGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_classes;
    return this;
}

ClassesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassesContext.prototype.constructor = ClassesContext;

ClassesContext.prototype.CLASSES = function() {
    return this.getToken(myGrammarParser.CLASSES, 0);
};

ClassesContext.prototype.classCondition = function() {
    return this.getTypedRuleContext(ClassConditionContext,0);
};

ClassesContext.prototype.classOf = function() {
    return this.getTypedRuleContext(ClassOfContext,0);
};

ClassesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterClasses(this);
	}
};

ClassesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitClasses(this);
	}
};




myGrammarParser.ClassesContext = ClassesContext;

myGrammarParser.prototype.classes = function() {

    var localctx = new ClassesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, myGrammarParser.RULE_classes);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 646;
        this.match(myGrammarParser.CLASSES);
        this.state = 648;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        if(la_===1) {
            this.state = 647;
            this.classCondition();

        }
        this.state = 651;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        if(la_===1) {
            this.state = 650;
            this.classOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_classOf;
    return this;
}

ClassOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassOfContext.prototype.constructor = ClassOfContext;

ClassOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ClassOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

ClassOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterClassOf(this);
	}
};

ClassOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitClassOf(this);
	}
};




myGrammarParser.ClassOfContext = ClassOfContext;

myGrammarParser.prototype.classOf = function() {

    var localctx = new ClassOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, myGrammarParser.RULE_classOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 653;
        this.of();
        this.state = 654;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_classCondition;
    return this;
}

ClassConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassConditionContext.prototype.constructor = ClassConditionContext;

ClassConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

ClassConditionContext.prototype.classExpression = function() {
    return this.getTypedRuleContext(ClassExpressionContext,0);
};

ClassConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterClassCondition(this);
	}
};

ClassConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitClassCondition(this);
	}
};




myGrammarParser.ClassConditionContext = ClassConditionContext;

myGrammarParser.prototype.classCondition = function() {

    var localctx = new ClassConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, myGrammarParser.RULE_classCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 656;
        this.withWord();
        this.state = 657;
        this.classExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_classExpression;
    this.left = null; // ClassExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ClassExpressionContext
    return this;
}

ClassExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassExpressionContext.prototype.constructor = ClassExpressionContext;

ClassExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

ClassExpressionContext.prototype.classExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassExpressionContext);
    } else {
        return this.getTypedRuleContext(ClassExpressionContext,i);
    }
};

ClassExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

ClassExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

ClassExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

ClassExpressionContext.prototype.visibilities = function() {
    return this.getTypedRuleContext(VisibilitiesContext,0);
};

ClassExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

ClassExpressionContext.prototype.extensions = function() {
    return this.getTypedRuleContext(ExtensionsContext,0);
};

ClassExpressionContext.prototype.implementations = function() {
    return this.getTypedRuleContext(ImplementationsContext,0);
};

ClassExpressionContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

ClassExpressionContext.prototype.interfaces = function() {
    return this.getTypedRuleContext(InterfacesContext,0);
};

ClassExpressionContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

ClassExpressionContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

ClassExpressionContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

ClassExpressionContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

ClassExpressionContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

ClassExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ClassExpressionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

ClassExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterClassExpression(this);
	}
};

ClassExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitClassExpression(this);
	}
};



myGrammarParser.prototype.classExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ClassExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 134;
    this.enterRecursionRule(localctx, 134, myGrammarParser.RULE_classExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 679;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 660;
            this.match(myGrammarParser.LPAREN);
            this.state = 661;
            this.classExpression(0);
            this.state = 662;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.NAME:
        case myGrammarParser.ANNOTATION:
        case myGrammarParser.EXTENSION:
        case myGrammarParser.IMPLEMENTATION:
        case myGrammarParser.FUNCTION:
        case myGrammarParser.AbstractFunctions:
        case myGrammarParser.CONSTRUCTOR:
        case myGrammarParser.SPECIFIER:
        case myGrammarParser.VISIBILITY:
        case myGrammarParser.ReturnValue:
        case myGrammarParser.DeclarationStatement:
        case myGrammarParser.CLASSES:
        case myGrammarParser.INTERFACES:
            this.state = 677;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.ANNOTATION:
                this.state = 664;
                this.annotations();
                break;
            case myGrammarParser.SPECIFIER:
                this.state = 665;
                this.specifiers();
                break;
            case myGrammarParser.VISIBILITY:
                this.state = 666;
                this.visibilities();
                break;
            case myGrammarParser.NAME:
                this.state = 667;
                this.names();
                break;
            case myGrammarParser.EXTENSION:
                this.state = 668;
                this.extensions();
                break;
            case myGrammarParser.IMPLEMENTATION:
                this.state = 669;
                this.implementations();
                break;
            case myGrammarParser.FUNCTION:
                this.state = 670;
                this.functions();
                break;
            case myGrammarParser.INTERFACES:
                this.state = 671;
                this.interfaces();
                break;
            case myGrammarParser.AbstractFunctions:
                this.state = 672;
                this.abstractFunctions();
                break;
            case myGrammarParser.CONSTRUCTOR:
                this.state = 673;
                this.constructors();
                break;
            case myGrammarParser.DeclarationStatement:
                this.state = 674;
                this.declarationStatements();
                break;
            case myGrammarParser.CLASSES:
                this.state = 675;
                this.classes();
                break;
            case myGrammarParser.ReturnValue:
                this.state = 676;
                this.returnValues();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 689;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 687;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ClassExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_classExpression);
                    this.state = 681;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 682;
                    localctx.op = this.binary();
                    this.state = 683;
                    localctx.right = this.classExpression(4);
                    break;

                case 2:
                    localctx = new ClassExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_classExpression);
                    this.state = 685;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 686;
                    this.match(myGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 691;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function InterfacesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_interfaces;
    return this;
}

InterfacesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfacesContext.prototype.constructor = InterfacesContext;

InterfacesContext.prototype.INTERFACES = function() {
    return this.getToken(myGrammarParser.INTERFACES, 0);
};

InterfacesContext.prototype.interfaceCondition = function() {
    return this.getTypedRuleContext(InterfaceConditionContext,0);
};

InterfacesContext.prototype.interfaceOf = function() {
    return this.getTypedRuleContext(InterfaceOfContext,0);
};

InterfacesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterInterfaces(this);
	}
};

InterfacesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitInterfaces(this);
	}
};




myGrammarParser.InterfacesContext = InterfacesContext;

myGrammarParser.prototype.interfaces = function() {

    var localctx = new InterfacesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, myGrammarParser.RULE_interfaces);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 692;
        this.match(myGrammarParser.INTERFACES);
        this.state = 694;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        if(la_===1) {
            this.state = 693;
            this.interfaceCondition();

        }
        this.state = 697;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        if(la_===1) {
            this.state = 696;
            this.interfaceOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_interfaceOf;
    return this;
}

InterfaceOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceOfContext.prototype.constructor = InterfaceOfContext;

InterfaceOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

InterfaceOfContext.prototype.interfaces = function() {
    return this.getTypedRuleContext(InterfacesContext,0);
};

InterfaceOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

InterfaceOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterInterfaceOf(this);
	}
};

InterfaceOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitInterfaceOf(this);
	}
};




myGrammarParser.InterfaceOfContext = InterfaceOfContext;

myGrammarParser.prototype.interfaceOf = function() {

    var localctx = new InterfaceOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, myGrammarParser.RULE_interfaceOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 699;
        this.of();
        this.state = 702;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.INTERFACES:
            this.state = 700;
            this.interfaces();
            break;
        case myGrammarParser.CLASSES:
            this.state = 701;
            this.classes();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_interfaceCondition;
    return this;
}

InterfaceConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceConditionContext.prototype.constructor = InterfaceConditionContext;

InterfaceConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

InterfaceConditionContext.prototype.interfaceExpression = function() {
    return this.getTypedRuleContext(InterfaceExpressionContext,0);
};

InterfaceConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterInterfaceCondition(this);
	}
};

InterfaceConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitInterfaceCondition(this);
	}
};




myGrammarParser.InterfaceConditionContext = InterfaceConditionContext;

myGrammarParser.prototype.interfaceCondition = function() {

    var localctx = new InterfaceConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, myGrammarParser.RULE_interfaceCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 704;
        this.withWord();
        this.state = 705;
        this.interfaceExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_interfaceExpression;
    this.left = null; // InterfaceExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // InterfaceExpressionContext
    return this;
}

InterfaceExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceExpressionContext.prototype.constructor = InterfaceExpressionContext;

InterfaceExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

InterfaceExpressionContext.prototype.interfaceExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceExpressionContext);
    } else {
        return this.getTypedRuleContext(InterfaceExpressionContext,i);
    }
};

InterfaceExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

InterfaceExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

InterfaceExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

InterfaceExpressionContext.prototype.visibilities = function() {
    return this.getTypedRuleContext(VisibilitiesContext,0);
};

InterfaceExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

InterfaceExpressionContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

InterfaceExpressionContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

InterfaceExpressionContext.prototype.interfaces = function() {
    return this.getTypedRuleContext(InterfacesContext,0);
};

InterfaceExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

InterfaceExpressionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

InterfaceExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterInterfaceExpression(this);
	}
};

InterfaceExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitInterfaceExpression(this);
	}
};



myGrammarParser.prototype.interfaceExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new InterfaceExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 142;
    this.enterRecursionRule(localctx, 142, myGrammarParser.RULE_interfaceExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 721;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 708;
            this.match(myGrammarParser.LPAREN);
            this.state = 709;
            this.interfaceExpression(0);
            this.state = 710;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.NAME:
        case myGrammarParser.ANNOTATION:
        case myGrammarParser.AbstractFunctions:
        case myGrammarParser.SPECIFIER:
        case myGrammarParser.VISIBILITY:
        case myGrammarParser.DeclarationStatement:
        case myGrammarParser.INTERFACES:
            this.state = 719;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.ANNOTATION:
                this.state = 712;
                this.annotations();
                break;
            case myGrammarParser.SPECIFIER:
                this.state = 713;
                this.specifiers();
                break;
            case myGrammarParser.VISIBILITY:
                this.state = 714;
                this.visibilities();
                break;
            case myGrammarParser.NAME:
                this.state = 715;
                this.names();
                break;
            case myGrammarParser.AbstractFunctions:
                this.state = 716;
                this.abstractFunctions();
                break;
            case myGrammarParser.DeclarationStatement:
                this.state = 717;
                this.declarationStatements();
                break;
            case myGrammarParser.INTERFACES:
                this.state = 718;
                this.interfaces();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 731;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,79,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 729;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new InterfaceExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_interfaceExpression);
                    this.state = 723;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 724;
                    localctx.op = this.binary();
                    this.state = 725;
                    localctx.right = this.interfaceExpression(4);
                    break;

                case 2:
                    localctx = new InterfaceExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_interfaceExpression);
                    this.state = 727;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 728;
                    this.match(myGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 733;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,79,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


myGrammarParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 29:
			return this.functionExpression_sempred(localctx, predIndex);
	case 33:
			return this.abstractFunctionExpression_sempred(localctx, predIndex);
	case 37:
			return this.constructorExpression_sempred(localctx, predIndex);
	case 41:
			return this.parameterExpression_sempred(localctx, predIndex);
	case 57:
			return this.declarationStatementExpression_sempred(localctx, predIndex);
	case 67:
			return this.classExpression_sempred(localctx, predIndex);
	case 71:
			return this.interfaceExpression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

myGrammarParser.prototype.functionExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 3);
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.abstractFunctionExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 3);
		case 3:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.constructorExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return this.precpred(this._ctx, 3);
		case 5:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.parameterExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.precpred(this._ctx, 3);
		case 7:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.declarationStatementExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.precpred(this._ctx, 3);
		case 9:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.classExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 10:
			return this.precpred(this._ctx, 3);
		case 11:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.interfaceExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 12:
			return this.precpred(this._ctx, 3);
		case 13:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.myGrammarParser = myGrammarParser;
