// Generated from rulePadGrammar.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var rulePadGrammarListener = require('./rulePadGrammarListener').rulePadGrammarListener;
var grammarFileName = "rulePadGrammar.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003<\u02f6\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0003\u0002\u0007\u0002\u0094\n\u0002\f\u0002\u000e\u0002",
    "\u0097\u000b\u0002\u0003\u0002\u0005\u0002\u009a\n\u0002\u0003\u0002",
    "\u0005\u0002\u009d\n\u0002\u0003\u0002\u0007\u0002\u00a0\n\u0002\f\u0002",
    "\u000e\u0002\u00a3\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u00ca\n\u0003",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0007\u0004\u00d3\n\u0004\f\u0004\u000e\u0004\u00d6\u000b",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0006\u0005\u00dc",
    "\n\u0005\r\u0005\u000e\u0005\u00dd\u0003\u0005\u0003\u0005\u0006\u0005",
    "\u00e2\n\u0005\r\u0005\u000e\u0005\u00e3\u0003\u0005\u0003\u0005\u0006",
    "\u0005\u00e8\n\u0005\r\u0005\u000e\u0005\u00e9\u0003\u0005\u0003\u0005",
    "\u0006\u0005\u00ee\n\u0005\r\u0005\u000e\u0005\u00ef\u0003\u0005\u0006",
    "\u0005\u00f3\n\u0005\r\u0005\u000e\u0005\u00f4\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0006\u0005\u00fa\n\u0005\r\u0005\u000e\u0005\u00fb\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0006\u0005\u0101\n\u0005\r\u0005\u000e",
    "\u0005\u0102\u0003\u0005\u0003\u0005\u0003\u0005\u0006\u0005\u0108\n",
    "\u0005\r\u0005\u000e\u0005\u0109\u0003\u0005\u0005\u0005\u010d\n\u0005",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0006\u0006\u0113\n",
    "\u0006\r\u0006\u000e\u0006\u0114\u0003\u0006\u0003\u0006\u0003\u0007",
    "\u0003\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n",
    "\u0006\n\u0122\n\n\r\n\u000e\n\u0123\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u012c\n\u000b\f\u000b",
    "\u000e\u000b\u012f\u000b\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003",
    "\f\u0003\r\u0003\r\u0003\r\u0005\r\u0138\n\r\u0003\r\u0003\r\u0003\u000e",
    "\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0011",
    "\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0014",
    "\u0003\u0014\u0005\u0014\u014a\n\u0014\u0003\u0015\u0003\u0015\u0005",
    "\u0015\u014e\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017",
    "\u0003\u0017\u0005\u0017\u0155\n\u0017\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0019\u0003\u0019\u0005\u0019\u015c\n\u0019\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a",
    "\u0164\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0005\u001c\u0171\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0005\u001e\u017e\n\u001e\u0003\u001f\u0003",
    "\u001f\u0005\u001f\u0182\n\u001f\u0003\u001f\u0005\u001f\u0185\n\u001f",
    "\u0003 \u0003 \u0003 \u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0005\"\u019c\n\"\u0005\"\u019e\n\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0007\"\u01a6\n\"\f\"\u000e\"\u01a9",
    "\u000b\"\u0003#\u0003#\u0005#\u01ad\n#\u0003#\u0005#\u01b0\n#\u0003",
    "$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u01c3\n&\u0005&\u01c5",
    "\n&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0007&\u01cd\n&\f&\u000e",
    "&\u01d0\u000b&\u0003\'\u0003\'\u0005\'\u01d4\n\'\u0003\'\u0005\'\u01d7",
    "\n\'\u0003(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003*\u0003*\u0003*",
    "\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0005*\u01ed\n*\u0005*\u01ef\n*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0007*\u01f7\n*\f*\u000e*\u01fa\u000b*\u0003+\u0003",
    "+\u0005+\u01fe\n+\u0003,\u0003,\u0003,\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0005-\u020a\n-\u0005-\u020c\n-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0007-\u0214\n-\f-\u000e-\u0217\u000b-\u0003",
    ".\u0003.\u0005.\u021b\n.\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0005",
    "/\u0223\n/\u00030\u00030\u00050\u0227\n0\u00031\u00031\u00031\u0003",
    "2\u00032\u00052\u022e\n2\u00033\u00033\u00033\u00034\u00034\u00054\u0235",
    "\n4\u00035\u00035\u00035\u00036\u00036\u00056\u023c\n6\u00036\u0005",
    "6\u023f\n6\u00037\u00037\u00037\u00037\u00057\u0245\n7\u00038\u0003",
    "8\u00038\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00059\u0256\n9\u00059\u0258\n9\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00079\u0260\n9\f9\u000e9\u0263\u000b",
    "9\u0003:\u0003:\u0005:\u0267\n:\u0003:\u0005:\u026a\n:\u0003;\u0003",
    ";\u0003;\u0003;\u0005;\u0270\n;\u0003<\u0003<\u0003<\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0005=\u027c\n=\u0005=\u027e\n=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0007=\u0286\n=\f=\u000e=\u0289",
    "\u000b=\u0003>\u0003>\u0005>\u028d\n>\u0003?\u0003?\u0003?\u0003@\u0003",
    "@\u0005@\u0294\n@\u0003@\u0005@\u0297\n@\u0003A\u0003A\u0003A\u0003",
    "B\u0003B\u0003B\u0003C\u0003C\u0005C\u02a1\nC\u0003D\u0003D\u0003D\u0003",
    "E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0005E\u02b8\nE\u0005",
    "E\u02ba\nE\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0007E\u02c2\n",
    "E\fE\u000eE\u02c5\u000bE\u0003F\u0003F\u0005F\u02c9\nF\u0003F\u0005",
    "F\u02cc\nF\u0003G\u0003G\u0003G\u0003H\u0003H\u0003H\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0005I\u02e7\nI\u0005I\u02e9",
    "\nI\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0007I\u02f1\nI\fI\u000e",
    "I\u02f4\u000bI\u0003I\u0002\nBJRXpx\u0088\u0090J\u0002\u0004\u0006\b",
    "\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.",
    "02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0002\u0004\u0004\u0002\t\u000f\'(\u0003\u0002",
    "\u0010\u001d\u0002\u0343\u0002\u0099\u0003\u0002\u0002\u0002\u0004\u00c9",
    "\u0003\u0002\u0002\u0002\u0006\u00cb\u0003\u0002\u0002\u0002\b\u010c",
    "\u0003\u0002\u0002\u0002\n\u010e\u0003\u0002\u0002\u0002\f\u0118\u0003",
    "\u0002\u0002\u0002\u000e\u011a\u0003\u0002\u0002\u0002\u0010\u011c\u0003",
    "\u0002\u0002\u0002\u0012\u0121\u0003\u0002\u0002\u0002\u0014\u012d\u0003",
    "\u0002\u0002\u0002\u0016\u0132\u0003\u0002\u0002\u0002\u0018\u0134\u0003",
    "\u0002\u0002\u0002\u001a\u013b\u0003\u0002\u0002\u0002\u001c\u013d\u0003",
    "\u0002\u0002\u0002\u001e\u013f\u0003\u0002\u0002\u0002 \u0141\u0003",
    "\u0002\u0002\u0002\"\u0143\u0003\u0002\u0002\u0002$\u0145\u0003\u0002",
    "\u0002\u0002&\u0149\u0003\u0002\u0002\u0002(\u014b\u0003\u0002\u0002",
    "\u0002*\u014f\u0003\u0002\u0002\u0002,\u0152\u0003\u0002\u0002\u0002",
    ".\u0156\u0003\u0002\u0002\u00020\u0159\u0003\u0002\u0002\u00022\u0163",
    "\u0003\u0002\u0002\u00024\u0165\u0003\u0002\u0002\u00026\u0168\u0003",
    "\u0002\u0002\u00028\u0172\u0003\u0002\u0002\u0002:\u0175\u0003\u0002",
    "\u0002\u0002<\u017f\u0003\u0002\u0002\u0002>\u0186\u0003\u0002\u0002",
    "\u0002@\u0189\u0003\u0002\u0002\u0002B\u019d\u0003\u0002\u0002\u0002",
    "D\u01aa\u0003\u0002\u0002\u0002F\u01b1\u0003\u0002\u0002\u0002H\u01b4",
    "\u0003\u0002\u0002\u0002J\u01c4\u0003\u0002\u0002\u0002L\u01d1\u0003",
    "\u0002\u0002\u0002N\u01d8\u0003\u0002\u0002\u0002P\u01db\u0003\u0002",
    "\u0002\u0002R\u01ee\u0003\u0002\u0002\u0002T\u01fb\u0003\u0002\u0002",
    "\u0002V\u01ff\u0003\u0002\u0002\u0002X\u020b\u0003\u0002\u0002\u0002",
    "Z\u0218\u0003\u0002\u0002\u0002\\\u0222\u0003\u0002\u0002\u0002^\u0224",
    "\u0003\u0002\u0002\u0002`\u0228\u0003\u0002\u0002\u0002b\u022b\u0003",
    "\u0002\u0002\u0002d\u022f\u0003\u0002\u0002\u0002f\u0232\u0003\u0002",
    "\u0002\u0002h\u0236\u0003\u0002\u0002\u0002j\u0239\u0003\u0002\u0002",
    "\u0002l\u0240\u0003\u0002\u0002\u0002n\u0246\u0003\u0002\u0002\u0002",
    "p\u0257\u0003\u0002\u0002\u0002r\u0264\u0003\u0002\u0002\u0002t\u026b",
    "\u0003\u0002\u0002\u0002v\u0271\u0003\u0002\u0002\u0002x\u027d\u0003",
    "\u0002\u0002\u0002z\u028a\u0003\u0002\u0002\u0002|\u028e\u0003\u0002",
    "\u0002\u0002~\u0291\u0003\u0002\u0002\u0002\u0080\u0298\u0003\u0002",
    "\u0002\u0002\u0082\u029b\u0003\u0002\u0002\u0002\u0084\u029e\u0003\u0002",
    "\u0002\u0002\u0086\u02a2\u0003\u0002\u0002\u0002\u0088\u02b9\u0003\u0002",
    "\u0002\u0002\u008a\u02c6\u0003\u0002\u0002\u0002\u008c\u02cd\u0003\u0002",
    "\u0002\u0002\u008e\u02d0\u0003\u0002\u0002\u0002\u0090\u02e8\u0003\u0002",
    "\u0002\u0002\u0092\u0094\u0005\u0010\t\u0002\u0093\u0092\u0003\u0002",
    "\u0002\u0002\u0094\u0097\u0003\u0002\u0002\u0002\u0095\u0093\u0003\u0002",
    "\u0002\u0002\u0095\u0096\u0003\u0002\u0002\u0002\u0096\u009a\u0003\u0002",
    "\u0002\u0002\u0097\u0095\u0003\u0002\u0002\u0002\u0098\u009a\u0005\u0004",
    "\u0003\u0002\u0099\u0095\u0003\u0002\u0002\u0002\u0099\u0098\u0003\u0002",
    "\u0002\u0002\u009a\u009c\u0003\u0002\u0002\u0002\u009b\u009d\u0005\u000e",
    "\b\u0002\u009c\u009b\u0003\u0002\u0002\u0002\u009c\u009d\u0003\u0002",
    "\u0002\u0002\u009d\u00a1\u0003\u0002\u0002\u0002\u009e\u00a0\u0007&",
    "\u0002\u0002\u009f\u009e\u0003\u0002\u0002\u0002\u00a0\u00a3\u0003\u0002",
    "\u0002\u0002\u00a1\u009f\u0003\u0002\u0002\u0002\u00a1\u00a2\u0003\u0002",
    "\u0002\u0002\u00a2\u00a4\u0003\u0002\u0002\u0002\u00a3\u00a1\u0003\u0002",
    "\u0002\u0002\u00a4\u00a5\u0007\u0002\u0002\u0003\u00a5\u0003\u0003\u0002",
    "\u0002\u0002\u00a6\u00a7\u0005<\u001f\u0002\u00a7\u00a8\u0005\u001a",
    "\u000e\u0002\u00a8\u00a9\u0005\"\u0012\u0002\u00a9\u00aa\u0005B\"\u0002",
    "\u00aa\u00ca\u0003\u0002\u0002\u0002\u00ab\u00ac\u0005D#\u0002\u00ac",
    "\u00ad\u0005\u001a\u000e\u0002\u00ad\u00ae\u0005\"\u0012\u0002\u00ae",
    "\u00af\u0005J&\u0002\u00af\u00ca\u0003\u0002\u0002\u0002\u00b0\u00b1",
    "\u0005L\'\u0002\u00b1\u00b2\u0005\u001a\u000e\u0002\u00b2\u00b3\u0005",
    "\"\u0012\u0002\u00b3\u00b4\u0005R*\u0002\u00b4\u00ca\u0003\u0002\u0002",
    "\u0002\u00b5\u00b6\u0005\u0084C\u0002\u00b6\u00b7\u0005\u001a\u000e",
    "\u0002\u00b7\u00b8\u0005\"\u0012\u0002\u00b8\u00b9\u0005\u0088E\u0002",
    "\u00b9\u00ca\u0003\u0002\u0002\u0002\u00ba\u00bb\u0005T+\u0002\u00bb",
    "\u00bc\u0005\u001a\u000e\u0002\u00bc\u00bd\u0005\"\u0012\u0002\u00bd",
    "\u00be\u0005X-\u0002\u00be\u00ca\u0003\u0002\u0002\u0002\u00bf\u00c0",
    "\u0005j6\u0002\u00c0\u00c1\u0005\u001a\u000e\u0002\u00c1\u00c2\u0005",
    "\"\u0012\u0002\u00c2\u00c3\u0005p9\u0002\u00c3\u00ca\u0003\u0002\u0002",
    "\u0002\u00c4\u00c5\u0005\u008aF\u0002\u00c5\u00c6\u0005\u001a\u000e",
    "\u0002\u00c6\u00c7\u0005\"\u0012\u0002\u00c7\u00c8\u0005\u0090I\u0002",
    "\u00c8\u00ca\u0003\u0002\u0002\u0002\u00c9\u00a6\u0003\u0002\u0002\u0002",
    "\u00c9\u00ab\u0003\u0002\u0002\u0002\u00c9\u00b0\u0003\u0002\u0002\u0002",
    "\u00c9\u00b5\u0003\u0002\u0002\u0002\u00c9\u00ba\u0003\u0002\u0002\u0002",
    "\u00c9\u00bf\u0003\u0002\u0002\u0002\u00c9\u00c4\u0003\u0002\u0002\u0002",
    "\u00ca\u0005\u0003\u0002\u0002\u0002\u00cb\u00d4\u0007\u0003\u0002\u0002",
    "\u00cc\u00cd\u0005\b\u0005\u0002\u00cd\u00ce\u0007\u0004\u0002\u0002",
    "\u00ce\u00d3\u0003\u0002\u0002\u0002\u00cf\u00d0\u0005\b\u0005\u0002",
    "\u00d0\u00d1\u0007\u0005\u0002\u0002\u00d1\u00d3\u0003\u0002\u0002\u0002",
    "\u00d2\u00cc\u0003\u0002\u0002\u0002\u00d2\u00cf\u0003\u0002\u0002\u0002",
    "\u00d3\u00d6\u0003\u0002\u0002\u0002\u00d4\u00d2\u0003\u0002\u0002\u0002",
    "\u00d4\u00d5\u0003\u0002\u0002\u0002\u00d5\u00d7\u0003\u0002\u0002\u0002",
    "\u00d6\u00d4\u0003\u0002\u0002\u0002\u00d7\u00d8\u0005\b\u0005\u0002",
    "\u00d8\u00d9\u0007\u0003\u0002\u0002\u00d9\u0007\u0003\u0002\u0002\u0002",
    "\u00da\u00dc\u0007%\u0002\u0002\u00db\u00da\u0003\u0002\u0002\u0002",
    "\u00dc\u00dd\u0003\u0002\u0002\u0002\u00dd\u00db\u0003\u0002\u0002\u0002",
    "\u00dd\u00de\u0003\u0002\u0002\u0002\u00de\u010d\u0003\u0002\u0002\u0002",
    "\u00df\u00e1\u0007\u0006\u0002\u0002\u00e0\u00e2\u0007%\u0002\u0002",
    "\u00e1\u00e0\u0003\u0002\u0002\u0002\u00e2\u00e3\u0003\u0002\u0002\u0002",
    "\u00e3\u00e1\u0003\u0002\u0002\u0002\u00e3\u00e4\u0003\u0002\u0002\u0002",
    "\u00e4\u010d\u0003\u0002\u0002\u0002\u00e5\u00e7\u0007\u0007\u0002\u0002",
    "\u00e6\u00e8\u0007%\u0002\u0002\u00e7\u00e6\u0003\u0002\u0002\u0002",
    "\u00e8\u00e9\u0003\u0002\u0002\u0002\u00e9\u00e7\u0003\u0002\u0002\u0002",
    "\u00e9\u00ea\u0003\u0002\u0002\u0002\u00ea\u010d\u0003\u0002\u0002\u0002",
    "\u00eb\u00ed\u0007\b\u0002\u0002\u00ec\u00ee\u0007%\u0002\u0002\u00ed",
    "\u00ec\u0003\u0002\u0002\u0002\u00ee\u00ef\u0003\u0002\u0002\u0002\u00ef",
    "\u00ed\u0003\u0002\u0002\u0002\u00ef\u00f0\u0003\u0002\u0002\u0002\u00f0",
    "\u010d\u0003\u0002\u0002\u0002\u00f1\u00f3\u0007%\u0002\u0002\u00f2",
    "\u00f1\u0003\u0002\u0002\u0002\u00f3\u00f4\u0003\u0002\u0002\u0002\u00f4",
    "\u00f2\u0003\u0002\u0002\u0002\u00f4\u00f5\u0003\u0002\u0002\u0002\u00f5",
    "\u00f6\u0003\u0002\u0002\u0002\u00f6\u010d\u0007\u0007\u0002\u0002\u00f7",
    "\u00f9\u0007\u0006\u0002\u0002\u00f8\u00fa\u0007%\u0002\u0002\u00f9",
    "\u00f8\u0003\u0002\u0002\u0002\u00fa\u00fb\u0003\u0002\u0002\u0002\u00fb",
    "\u00f9\u0003\u0002\u0002\u0002\u00fb\u00fc\u0003\u0002\u0002\u0002\u00fc",
    "\u00fd\u0003\u0002\u0002\u0002\u00fd\u010d\u0007\u0007\u0002\u0002\u00fe",
    "\u0100\u0007\u0007\u0002\u0002\u00ff\u0101\u0007%\u0002\u0002\u0100",
    "\u00ff\u0003\u0002\u0002\u0002\u0101\u0102\u0003\u0002\u0002\u0002\u0102",
    "\u0100\u0003\u0002\u0002\u0002\u0102\u0103\u0003\u0002\u0002\u0002\u0103",
    "\u0104\u0003\u0002\u0002\u0002\u0104\u010d\u0007\u0007\u0002\u0002\u0105",
    "\u0107\u0007\b\u0002\u0002\u0106\u0108\u0007%\u0002\u0002\u0107\u0106",
    "\u0003\u0002\u0002\u0002\u0108\u0109\u0003\u0002\u0002\u0002\u0109\u0107",
    "\u0003\u0002\u0002\u0002\u0109\u010a\u0003\u0002\u0002\u0002\u010a\u010b",
    "\u0003\u0002\u0002\u0002\u010b\u010d\u0007\u0007\u0002\u0002\u010c\u00db",
    "\u0003\u0002\u0002\u0002\u010c\u00df\u0003\u0002\u0002\u0002\u010c\u00e5",
    "\u0003\u0002\u0002\u0002\u010c\u00eb\u0003\u0002\u0002\u0002\u010c\u00f2",
    "\u0003\u0002\u0002\u0002\u010c\u00f7\u0003\u0002\u0002\u0002\u010c\u00fe",
    "\u0003\u0002\u0002\u0002\u010c\u0105\u0003\u0002\u0002\u0002\u010d\t",
    "\u0003\u0002\u0002\u0002\u010e\u0112\u0007\u0003\u0002\u0002\u010f\u0113",
    "\u0007%\u0002\u0002\u0110\u0113\u0005\f\u0007\u0002\u0111\u0113\u0007",
    "$\u0002\u0002\u0112\u010f\u0003\u0002\u0002\u0002\u0112\u0110\u0003",
    "\u0002\u0002\u0002\u0112\u0111\u0003\u0002\u0002\u0002\u0113\u0114\u0003",
    "\u0002\u0002\u0002\u0114\u0112\u0003\u0002\u0002\u0002\u0114\u0115\u0003",
    "\u0002\u0002\u0002\u0115\u0116\u0003\u0002\u0002\u0002\u0116\u0117\u0007",
    "\u0003\u0002\u0002\u0117\u000b\u0003\u0002\u0002\u0002\u0118\u0119\t",
    "\u0002\u0002\u0002\u0119\r\u0003\u0002\u0002\u0002\u011a\u011b\u0007",
    "\t\u0002\u0002\u011b\u000f\u0003\u0002\u0002\u0002\u011c\u011d\u0007",
    "&\u0002\u0002\u011d\u0011\u0003\u0002\u0002\u0002\u011e\u0122\u0007",
    "%\u0002\u0002\u011f\u0122\u0005\f\u0007\u0002\u0120\u0122\u0007$\u0002",
    "\u0002\u0121\u011e\u0003\u0002\u0002\u0002\u0121\u011f\u0003\u0002\u0002",
    "\u0002\u0121\u0120\u0003\u0002\u0002\u0002\u0122\u0123\u0003\u0002\u0002",
    "\u0002\u0123\u0121\u0003\u0002\u0002\u0002\u0123\u0124\u0003\u0002\u0002",
    "\u0002\u0124\u0013\u0003\u0002\u0002\u0002\u0125\u0126\u0005\u0012\n",
    "\u0002\u0126\u0127\u0007\u0004\u0002\u0002\u0127\u012c\u0003\u0002\u0002",
    "\u0002\u0128\u0129\u0005\u0012\n\u0002\u0129\u012a\u0007\u0005\u0002",
    "\u0002\u012a\u012c\u0003\u0002\u0002\u0002\u012b\u0125\u0003\u0002\u0002",
    "\u0002\u012b\u0128\u0003\u0002\u0002\u0002\u012c\u012f\u0003\u0002\u0002",
    "\u0002\u012d\u012b\u0003\u0002\u0002\u0002\u012d\u012e\u0003\u0002\u0002",
    "\u0002\u012e\u0130\u0003\u0002\u0002\u0002\u012f\u012d\u0003\u0002\u0002",
    "\u0002\u0130\u0131\u0005\u0012\n\u0002\u0131\u0015\u0003\u0002\u0002",
    "\u0002\u0132\u0133\t\u0003\u0002\u0002\u0133\u0017\u0003\u0002\u0002",
    "\u0002\u0134\u0135\u0007\u0003\u0002\u0002\u0135\u0137\u0005\u0016\f",
    "\u0002\u0136\u0138\u0005\u0014\u000b\u0002\u0137\u0136\u0003\u0002\u0002",
    "\u0002\u0137\u0138\u0003\u0002\u0002\u0002\u0138\u0139\u0003\u0002\u0002",
    "\u0002\u0139\u013a\u0007\u0003\u0002\u0002\u013a\u0019\u0003\u0002\u0002",
    "\u0002\u013b\u013c\u0007\u001e\u0002\u0002\u013c\u001b\u0003\u0002\u0002",
    "\u0002\u013d\u013e\u0007\u001f\u0002\u0002\u013e\u001d\u0003\u0002\u0002",
    "\u0002\u013f\u0140\u0007 \u0002\u0002\u0140\u001f\u0003\u0002\u0002",
    "\u0002\u0141\u0142\u0007!\u0002\u0002\u0142!\u0003\u0002\u0002\u0002",
    "\u0143\u0144\u0007\"\u0002\u0002\u0144#\u0003\u0002\u0002\u0002\u0145",
    "\u0146\u0007#\u0002\u0002\u0146%\u0003\u0002\u0002\u0002\u0147\u014a",
    "\u0005\u001e\u0010\u0002\u0148\u014a\u0005 \u0011\u0002\u0149\u0147",
    "\u0003\u0002\u0002\u0002\u0149\u0148\u0003\u0002\u0002\u0002\u014a\'",
    "\u0003\u0002\u0002\u0002\u014b\u014d\u0007)\u0002\u0002\u014c\u014e",
    "\u0005*\u0016\u0002\u014d\u014c\u0003\u0002\u0002\u0002\u014d\u014e",
    "\u0003\u0002\u0002\u0002\u014e)\u0003\u0002\u0002\u0002\u014f\u0150",
    "\u0005\u0006\u0004\u0002\u0150\u0151\u0007$\u0002\u0002\u0151+\u0003",
    "\u0002\u0002\u0002\u0152\u0154\u0007)\u0002\u0002\u0153\u0155\u0005",
    ".\u0018\u0002\u0154\u0153\u0003\u0002\u0002\u0002\u0154\u0155\u0003",
    "\u0002\u0002\u0002\u0155-\u0003\u0002\u0002\u0002\u0156\u0157\u0005",
    "\n\u0006\u0002\u0157\u0158\u0007$\u0002\u0002\u0158/\u0003\u0002\u0002",
    "\u0002\u0159\u015b\u0007*\u0002\u0002\u015a\u015c\u00052\u001a\u0002",
    "\u015b\u015a\u0003\u0002\u0002\u0002\u015b\u015c\u0003\u0002\u0002\u0002",
    "\u015c1\u0003\u0002\u0002\u0002\u015d\u015e\u0005\n\u0006\u0002\u015e",
    "\u015f\u0007$\u0002\u0002\u015f\u0164\u0003\u0002\u0002\u0002\u0160",
    "\u0161\u0005\u0006\u0004\u0002\u0161\u0162\u0007$\u0002\u0002\u0162",
    "\u0164\u0003\u0002\u0002\u0002\u0163\u015d\u0003\u0002\u0002\u0002\u0163",
    "\u0160\u0003\u0002\u0002\u0002\u01643\u0003\u0002\u0002\u0002\u0165",
    "\u0166\u0007+\u0002\u0002\u0166\u0167\u00056\u001c\u0002\u01675\u0003",
    "\u0002\u0002\u0002\u0168\u0170\u0005\u001c\u000f\u0002\u0169\u016a\u0005",
    "\n\u0006\u0002\u016a\u016b\u0007$\u0002\u0002\u016b\u0171\u0003\u0002",
    "\u0002\u0002\u016c\u016d\u0005\u0006\u0004\u0002\u016d\u016e\u0007$",
    "\u0002\u0002\u016e\u0171\u0003\u0002\u0002\u0002\u016f\u0171\u0007,",
    "\u0002\u0002\u0170\u0169\u0003\u0002\u0002\u0002\u0170\u016c\u0003\u0002",
    "\u0002\u0002\u0170\u016f\u0003\u0002\u0002\u0002\u01717\u0003\u0002",
    "\u0002\u0002\u0172\u0173\u0007-\u0002\u0002\u0173\u0174\u0005:\u001e",
    "\u0002\u01749\u0003\u0002\u0002\u0002\u0175\u017d\u0005\u001c\u000f",
    "\u0002\u0176\u0177\u0005\n\u0006\u0002\u0177\u0178\u0007$\u0002\u0002",
    "\u0178\u017e\u0003\u0002\u0002\u0002\u0179\u017a\u0005\u0006\u0004\u0002",
    "\u017a\u017b\u0007$\u0002\u0002\u017b\u017e\u0003\u0002\u0002\u0002",
    "\u017c\u017e\u0007.\u0002\u0002\u017d\u0176\u0003\u0002\u0002\u0002",
    "\u017d\u0179\u0003\u0002\u0002\u0002\u017d\u017c\u0003\u0002\u0002\u0002",
    "\u017e;\u0003\u0002\u0002\u0002\u017f\u0181\u0007/\u0002\u0002\u0180",
    "\u0182\u0005@!\u0002\u0181\u0180\u0003\u0002\u0002\u0002\u0181\u0182",
    "\u0003\u0002\u0002\u0002\u0182\u0184\u0003\u0002\u0002\u0002\u0183\u0185",
    "\u0005> \u0002\u0184\u0183\u0003\u0002\u0002\u0002\u0184\u0185\u0003",
    "\u0002\u0002\u0002\u0185=\u0003\u0002\u0002\u0002\u0186\u0187\u0005",
    "\u001c\u000f\u0002\u0187\u0188\u0005\u0084C\u0002\u0188?\u0003\u0002",
    "\u0002\u0002\u0189\u018a\u0005$\u0013\u0002\u018a\u018b\u0005B\"\u0002",
    "\u018bA\u0003\u0002\u0002\u0002\u018c\u018d\b\"\u0001\u0002\u018d\u018e",
    "\u0007\'\u0002\u0002\u018e\u018f\u0005B\"\u0002\u018f\u0190\u0007(\u0002",
    "\u0002\u0190\u019e\u0003\u0002\u0002\u0002\u0191\u019c\u00050\u0019",
    "\u0002\u0192\u019c\u0005^0\u0002\u0193\u019c\u0005b2\u0002\u0194\u019c",
    "\u0005Z.\u0002\u0195\u019c\u0005(\u0015\u0002\u0196\u019c\u0005T+\u0002",
    "\u0197\u019c\u0005f4\u0002\u0198\u019c\u0005j6\u0002\u0199\u019c\u0005",
    "r:\u0002\u019a\u019c\u0005\u0018\r\u0002\u019b\u0191\u0003\u0002\u0002",
    "\u0002\u019b\u0192\u0003\u0002\u0002\u0002\u019b\u0193\u0003\u0002\u0002",
    "\u0002\u019b\u0194\u0003\u0002\u0002\u0002\u019b\u0195\u0003\u0002\u0002",
    "\u0002\u019b\u0196\u0003\u0002\u0002\u0002\u019b\u0197\u0003\u0002\u0002",
    "\u0002\u019b\u0198\u0003\u0002\u0002\u0002\u019b\u0199\u0003\u0002\u0002",
    "\u0002\u019b\u019a\u0003\u0002\u0002\u0002\u019c\u019e\u0003\u0002\u0002",
    "\u0002\u019d\u018c\u0003\u0002\u0002\u0002\u019d\u019b\u0003\u0002\u0002",
    "\u0002\u019e\u01a7\u0003\u0002\u0002\u0002\u019f\u01a0\f\u0005\u0002",
    "\u0002\u01a0\u01a1\u0005&\u0014\u0002\u01a1\u01a2\u0005B\"\u0006\u01a2",
    "\u01a6\u0003\u0002\u0002\u0002\u01a3\u01a4\f\u0003\u0002\u0002\u01a4",
    "\u01a6\u0007$\u0002\u0002\u01a5\u019f\u0003\u0002\u0002\u0002\u01a5",
    "\u01a3\u0003\u0002\u0002\u0002\u01a6\u01a9\u0003\u0002\u0002\u0002\u01a7",
    "\u01a5\u0003\u0002\u0002\u0002\u01a7\u01a8\u0003\u0002\u0002\u0002\u01a8",
    "C\u0003\u0002\u0002\u0002\u01a9\u01a7\u0003\u0002\u0002\u0002\u01aa",
    "\u01ac\u00070\u0002\u0002\u01ab\u01ad\u0005H%\u0002\u01ac\u01ab\u0003",
    "\u0002\u0002\u0002\u01ac\u01ad\u0003\u0002\u0002\u0002\u01ad\u01af\u0003",
    "\u0002\u0002\u0002\u01ae\u01b0\u0005F$\u0002\u01af\u01ae\u0003\u0002",
    "\u0002\u0002\u01af\u01b0\u0003\u0002\u0002\u0002\u01b0E\u0003\u0002",
    "\u0002\u0002\u01b1\u01b2\u0005\u001c\u000f\u0002\u01b2\u01b3\u0005\u0084",
    "C\u0002\u01b3G\u0003\u0002\u0002\u0002\u01b4\u01b5\u0005$\u0013\u0002",
    "\u01b5\u01b6\u0005J&\u0002\u01b6I\u0003\u0002\u0002\u0002\u01b7\u01b8",
    "\b&\u0001\u0002\u01b8\u01b9\u0007\'\u0002\u0002\u01b9\u01ba\u0005J&",
    "\u0002\u01ba\u01bb\u0007(\u0002\u0002\u01bb\u01c5\u0003\u0002\u0002",
    "\u0002\u01bc\u01c3\u00050\u0019\u0002\u01bd\u01c3\u0005^0\u0002\u01be",
    "\u01c3\u0005b2\u0002\u01bf\u01c3\u0005Z.\u0002\u01c0\u01c3\u0005(\u0015",
    "\u0002\u01c1\u01c3\u0005T+\u0002\u01c2\u01bc\u0003\u0002\u0002\u0002",
    "\u01c2\u01bd\u0003\u0002\u0002\u0002\u01c2\u01be\u0003\u0002\u0002\u0002",
    "\u01c2\u01bf\u0003\u0002\u0002\u0002\u01c2\u01c0\u0003\u0002\u0002\u0002",
    "\u01c2\u01c1\u0003\u0002\u0002\u0002\u01c3\u01c5\u0003\u0002\u0002\u0002",
    "\u01c4\u01b7\u0003\u0002\u0002\u0002\u01c4\u01c2\u0003\u0002\u0002\u0002",
    "\u01c5\u01ce\u0003\u0002\u0002\u0002\u01c6\u01c7\f\u0005\u0002\u0002",
    "\u01c7\u01c8\u0005&\u0014\u0002\u01c8\u01c9\u0005J&\u0006\u01c9\u01cd",
    "\u0003\u0002\u0002\u0002\u01ca\u01cb\f\u0003\u0002\u0002\u01cb\u01cd",
    "\u0007$\u0002\u0002\u01cc\u01c6\u0003\u0002\u0002\u0002\u01cc\u01ca",
    "\u0003\u0002\u0002\u0002\u01cd\u01d0\u0003\u0002\u0002\u0002\u01ce\u01cc",
    "\u0003\u0002\u0002\u0002\u01ce\u01cf\u0003\u0002\u0002\u0002\u01cfK",
    "\u0003\u0002\u0002\u0002\u01d0\u01ce\u0003\u0002\u0002\u0002\u01d1\u01d3",
    "\u00071\u0002\u0002\u01d2\u01d4\u0005P)\u0002\u01d3\u01d2\u0003\u0002",
    "\u0002\u0002\u01d3\u01d4\u0003\u0002\u0002\u0002\u01d4\u01d6\u0003\u0002",
    "\u0002\u0002\u01d5\u01d7\u0005N(\u0002\u01d6\u01d5\u0003\u0002\u0002",
    "\u0002\u01d6\u01d7\u0003\u0002\u0002\u0002\u01d7M\u0003\u0002\u0002",
    "\u0002\u01d8\u01d9\u0005\u001c\u000f\u0002\u01d9\u01da\u0005\u0084C",
    "\u0002\u01daO\u0003\u0002\u0002\u0002\u01db\u01dc\u0005$\u0013\u0002",
    "\u01dc\u01dd\u0005R*\u0002\u01ddQ\u0003\u0002\u0002\u0002\u01de\u01df",
    "\b*\u0001\u0002\u01df\u01e0\u0007\'\u0002\u0002\u01e0\u01e1\u0005R*",
    "\u0002\u01e1\u01e2\u0007(\u0002\u0002\u01e2\u01ef\u0003\u0002\u0002",
    "\u0002\u01e3\u01ed\u00050\u0019\u0002\u01e4\u01ed\u0005^0\u0002\u01e5",
    "\u01ed\u0005b2\u0002\u01e6\u01ed\u0005(\u0015\u0002\u01e7\u01ed\u0005",
    "T+\u0002\u01e8\u01ed\u0005f4\u0002\u01e9\u01ed\u0005j6\u0002\u01ea\u01ed",
    "\u0005r:\u0002\u01eb\u01ed\u0005\u0018\r\u0002\u01ec\u01e3\u0003\u0002",
    "\u0002\u0002\u01ec\u01e4\u0003\u0002\u0002\u0002\u01ec\u01e5\u0003\u0002",
    "\u0002\u0002\u01ec\u01e6\u0003\u0002\u0002\u0002\u01ec\u01e7\u0003\u0002",
    "\u0002\u0002\u01ec\u01e8\u0003\u0002\u0002\u0002\u01ec\u01e9\u0003\u0002",
    "\u0002\u0002\u01ec\u01ea\u0003\u0002\u0002\u0002\u01ec\u01eb\u0003\u0002",
    "\u0002\u0002\u01ed\u01ef\u0003\u0002\u0002\u0002\u01ee\u01de\u0003\u0002",
    "\u0002\u0002\u01ee\u01ec\u0003\u0002\u0002\u0002\u01ef\u01f8\u0003\u0002",
    "\u0002\u0002\u01f0\u01f1\f\u0005\u0002\u0002\u01f1\u01f2\u0005&\u0014",
    "\u0002\u01f2\u01f3\u0005R*\u0006\u01f3\u01f7\u0003\u0002\u0002\u0002",
    "\u01f4\u01f5\f\u0003\u0002\u0002\u01f5\u01f7\u0007$\u0002\u0002\u01f6",
    "\u01f0\u0003\u0002\u0002\u0002\u01f6\u01f4\u0003\u0002\u0002\u0002\u01f7",
    "\u01fa\u0003\u0002\u0002\u0002\u01f8\u01f6\u0003\u0002\u0002\u0002\u01f8",
    "\u01f9\u0003\u0002\u0002\u0002\u01f9S\u0003\u0002\u0002\u0002\u01fa",
    "\u01f8\u0003\u0002\u0002\u0002\u01fb\u01fd\u00072\u0002\u0002\u01fc",
    "\u01fe\u0005V,\u0002\u01fd\u01fc\u0003\u0002\u0002\u0002\u01fd\u01fe",
    "\u0003\u0002\u0002\u0002\u01feU\u0003\u0002\u0002\u0002\u01ff\u0200",
    "\u0005$\u0013\u0002\u0200\u0201\u0005X-\u0002\u0201W\u0003\u0002\u0002",
    "\u0002\u0202\u0203\b-\u0001\u0002\u0203\u0204\u0007\'\u0002\u0002\u0204",
    "\u0205\u0005X-\u0002\u0205\u0206\u0007(\u0002\u0002\u0206\u020c\u0003",
    "\u0002\u0002\u0002\u0207\u020a\u0005Z.\u0002\u0208\u020a\u0005(\u0015",
    "\u0002\u0209\u0207\u0003\u0002\u0002\u0002\u0209\u0208\u0003\u0002\u0002",
    "\u0002\u020a\u020c\u0003\u0002\u0002\u0002\u020b\u0202\u0003\u0002\u0002",
    "\u0002\u020b\u0209\u0003\u0002\u0002\u0002\u020c\u0215\u0003\u0002\u0002",
    "\u0002\u020d\u020e\f\u0005\u0002\u0002\u020e\u020f\u0005&\u0014\u0002",
    "\u020f\u0210\u0005X-\u0006\u0210\u0214\u0003\u0002\u0002\u0002\u0211",
    "\u0212\f\u0003\u0002\u0002\u0212\u0214\u0007$\u0002\u0002\u0213\u020d",
    "\u0003\u0002\u0002\u0002\u0213\u0211\u0003\u0002\u0002\u0002\u0214\u0217",
    "\u0003\u0002\u0002\u0002\u0215\u0213\u0003\u0002\u0002\u0002\u0215\u0216",
    "\u0003\u0002\u0002\u0002\u0216Y\u0003\u0002\u0002\u0002\u0217\u0215",
    "\u0003\u0002\u0002\u0002\u0218\u021a\u00073\u0002\u0002\u0219\u021b",
    "\u0005\\/\u0002\u021a\u0219\u0003\u0002\u0002\u0002\u021a\u021b\u0003",
    "\u0002\u0002\u0002\u021b[\u0003\u0002\u0002\u0002\u021c\u021d\u0005",
    "\n\u0006\u0002\u021d\u021e\u0007$\u0002\u0002\u021e\u0223\u0003\u0002",
    "\u0002\u0002\u021f\u0220\u0005\u0006\u0004\u0002\u0220\u0221\u0007$",
    "\u0002\u0002\u0221\u0223\u0003\u0002\u0002\u0002\u0222\u021c\u0003\u0002",
    "\u0002\u0002\u0222\u021f\u0003\u0002\u0002\u0002\u0223]\u0003\u0002",
    "\u0002\u0002\u0224\u0226\u00074\u0002\u0002\u0225\u0227\u0005`1\u0002",
    "\u0226\u0225\u0003\u0002\u0002\u0002\u0226\u0227\u0003\u0002\u0002\u0002",
    "\u0227_\u0003\u0002\u0002\u0002\u0228\u0229\u0005\u0006\u0004\u0002",
    "\u0229\u022a\u0007$\u0002\u0002\u022aa\u0003\u0002\u0002\u0002\u022b",
    "\u022d\u00075\u0002\u0002\u022c\u022e\u0005d3\u0002\u022d\u022c\u0003",
    "\u0002\u0002\u0002\u022d\u022e\u0003\u0002\u0002\u0002\u022ec\u0003",
    "\u0002\u0002\u0002\u022f\u0230\u0005\u0006\u0004\u0002\u0230\u0231\u0007",
    "$\u0002\u0002\u0231e\u0003\u0002\u0002\u0002\u0232\u0234\u00076\u0002",
    "\u0002\u0233\u0235\u0005h5\u0002\u0234\u0233\u0003\u0002\u0002\u0002",
    "\u0234\u0235\u0003\u0002\u0002\u0002\u0235g\u0003\u0002\u0002\u0002",
    "\u0236\u0237\u0005\n\u0006\u0002\u0237\u0238\u0007$\u0002\u0002\u0238",
    "i\u0003\u0002\u0002\u0002\u0239\u023b\u00077\u0002\u0002\u023a\u023c",
    "\u0005n8\u0002\u023b\u023a\u0003\u0002\u0002\u0002\u023b\u023c\u0003",
    "\u0002\u0002\u0002\u023c\u023e\u0003\u0002\u0002\u0002\u023d\u023f\u0005",
    "l7\u0002\u023e\u023d\u0003\u0002\u0002\u0002\u023e\u023f\u0003\u0002",
    "\u0002\u0002\u023fk\u0003\u0002\u0002\u0002\u0240\u0244\u0005\u001c",
    "\u000f\u0002\u0241\u0245\u0005\u0084C\u0002\u0242\u0245\u0005<\u001f",
    "\u0002\u0243\u0245\u0005L\'\u0002\u0244\u0241\u0003\u0002\u0002\u0002",
    "\u0244\u0242\u0003\u0002\u0002\u0002\u0244\u0243\u0003\u0002\u0002\u0002",
    "\u0245m\u0003\u0002\u0002\u0002\u0246\u0247\u0005$\u0013\u0002\u0247",
    "\u0248\u0005p9\u0002\u0248o\u0003\u0002\u0002\u0002\u0249\u024a\b9\u0001",
    "\u0002\u024a\u024b\u0007\'\u0002\u0002\u024b\u024c\u0005p9\u0002\u024c",
    "\u024d\u0007(\u0002\u0002\u024d\u0258\u0003\u0002\u0002\u0002\u024e",
    "\u0256\u00050\u0019\u0002\u024f\u0256\u0005^0\u0002\u0250\u0256\u0005",
    "b2\u0002\u0251\u0256\u0005Z.\u0002\u0252\u0256\u0005(\u0015\u0002\u0253",
    "\u0256\u0005~@\u0002\u0254\u0256\u0005\u0018\r\u0002\u0255\u024e\u0003",
    "\u0002\u0002\u0002\u0255\u024f\u0003\u0002\u0002\u0002\u0255\u0250\u0003",
    "\u0002\u0002\u0002\u0255\u0251\u0003\u0002\u0002\u0002\u0255\u0252\u0003",
    "\u0002\u0002\u0002\u0255\u0253\u0003\u0002\u0002\u0002\u0255\u0254\u0003",
    "\u0002\u0002\u0002\u0256\u0258\u0003\u0002\u0002\u0002\u0257\u0249\u0003",
    "\u0002\u0002\u0002\u0257\u0255\u0003\u0002\u0002\u0002\u0258\u0261\u0003",
    "\u0002\u0002\u0002\u0259\u025a\f\u0005\u0002\u0002\u025a\u025b\u0005",
    "&\u0014\u0002\u025b\u025c\u0005p9\u0006\u025c\u0260\u0003\u0002\u0002",
    "\u0002\u025d\u025e\f\u0003\u0002\u0002\u025e\u0260\u0007$\u0002\u0002",
    "\u025f\u0259\u0003\u0002\u0002\u0002\u025f\u025d\u0003\u0002\u0002\u0002",
    "\u0260\u0263\u0003\u0002\u0002\u0002\u0261\u025f\u0003\u0002\u0002\u0002",
    "\u0261\u0262\u0003\u0002\u0002\u0002\u0262q\u0003\u0002\u0002\u0002",
    "\u0263\u0261\u0003\u0002\u0002\u0002\u0264\u0266\u00078\u0002\u0002",
    "\u0265\u0267\u0005v<\u0002\u0266\u0265\u0003\u0002\u0002\u0002\u0266",
    "\u0267\u0003\u0002\u0002\u0002\u0267\u0269\u0003\u0002\u0002\u0002\u0268",
    "\u026a\u0005t;\u0002\u0269\u0268\u0003\u0002\u0002\u0002\u0269\u026a",
    "\u0003\u0002\u0002\u0002\u026as\u0003\u0002\u0002\u0002\u026b\u026f",
    "\u0005\u001c\u000f\u0002\u026c\u0270\u0005<\u001f\u0002\u026d\u0270",
    "\u0005L\'\u0002\u026e\u0270\u0005L\'\u0002\u026f\u026c\u0003\u0002\u0002",
    "\u0002\u026f\u026d\u0003\u0002\u0002\u0002\u026f\u026e\u0003\u0002\u0002",
    "\u0002\u0270u\u0003\u0002\u0002\u0002\u0271\u0272\u0005$\u0013\u0002",
    "\u0272\u0273\u0005x=\u0002\u0273w\u0003\u0002\u0002\u0002\u0274\u0275",
    "\b=\u0001\u0002\u0275\u0276\u0007\'\u0002\u0002\u0276\u0277\u0005x=",
    "\u0002\u0277\u0278\u0007(\u0002\u0002\u0278\u027e\u0003\u0002\u0002",
    "\u0002\u0279\u027c\u0005\u0018\r\u0002\u027a\u027c\u0005z>\u0002\u027b",
    "\u0279\u0003\u0002\u0002\u0002\u027b\u027a\u0003\u0002\u0002\u0002\u027c",
    "\u027e\u0003\u0002\u0002\u0002\u027d\u0274\u0003\u0002\u0002\u0002\u027d",
    "\u027b\u0003\u0002\u0002\u0002\u027e\u0287\u0003\u0002\u0002\u0002\u027f",
    "\u0280\f\u0005\u0002\u0002\u0280\u0281\u0005&\u0014\u0002\u0281\u0282",
    "\u0005x=\u0006\u0282\u0286\u0003\u0002\u0002\u0002\u0283\u0284\f\u0003",
    "\u0002\u0002\u0284\u0286\u0007$\u0002\u0002\u0285\u027f\u0003\u0002",
    "\u0002\u0002\u0285\u0283\u0003\u0002\u0002\u0002\u0286\u0289\u0003\u0002",
    "\u0002\u0002\u0287\u0285\u0003\u0002\u0002\u0002\u0287\u0288\u0003\u0002",
    "\u0002\u0002\u0288y\u0003\u0002\u0002\u0002\u0289\u0287\u0003\u0002",
    "\u0002\u0002\u028a\u028c\u00079\u0002\u0002\u028b\u028d\u0005|?\u0002",
    "\u028c\u028b\u0003\u0002\u0002\u0002\u028c\u028d\u0003\u0002\u0002\u0002",
    "\u028d{\u0003\u0002\u0002\u0002\u028e\u028f\u0005\n\u0006\u0002\u028f",
    "\u0290\u0007$\u0002\u0002\u0290}\u0003\u0002\u0002\u0002\u0291\u0293",
    "\u0007:\u0002\u0002\u0292\u0294\u0005\u0082B\u0002\u0293\u0292\u0003",
    "\u0002\u0002\u0002\u0293\u0294\u0003\u0002\u0002\u0002\u0294\u0296\u0003",
    "\u0002\u0002\u0002\u0295\u0297\u0005\u0080A\u0002\u0296\u0295\u0003",
    "\u0002\u0002\u0002\u0296\u0297\u0003\u0002\u0002\u0002\u0297\u007f\u0003",
    "\u0002\u0002\u0002\u0298\u0299\u0005\u001c\u000f\u0002\u0299\u029a\u0005",
    "j6\u0002\u029a\u0081\u0003\u0002\u0002\u0002\u029b\u029c\u0005\n\u0006",
    "\u0002\u029c\u029d\u0007$\u0002\u0002\u029d\u0083\u0003\u0002\u0002",
    "\u0002\u029e\u02a0\u0007;\u0002\u0002\u029f\u02a1\u0005\u0086D\u0002",
    "\u02a0\u029f\u0003\u0002\u0002\u0002\u02a0\u02a1\u0003\u0002\u0002\u0002",
    "\u02a1\u0085\u0003\u0002\u0002\u0002\u02a2\u02a3\u0005$\u0013\u0002",
    "\u02a3\u02a4\u0005\u0088E\u0002\u02a4\u0087\u0003\u0002\u0002\u0002",
    "\u02a5\u02a6\bE\u0001\u0002\u02a6\u02a7\u0007\'\u0002\u0002\u02a7\u02a8",
    "\u0005\u0088E\u0002\u02a8\u02a9\u0007(\u0002\u0002\u02a9\u02ba\u0003",
    "\u0002\u0002\u0002\u02aa\u02b8\u00050\u0019\u0002\u02ab\u02b8\u0005",
    "^0\u0002\u02ac\u02b8\u0005b2\u0002\u02ad\u02b8\u0005,\u0017\u0002\u02ae",
    "\u02b8\u00054\u001b\u0002\u02af\u02b8\u00058\u001d\u0002\u02b0\u02b8",
    "\u0005<\u001f\u0002\u02b1\u02b8\u0005D#\u0002\u02b2\u02b8\u0005L\'\u0002",
    "\u02b3\u02b8\u0005j6\u0002\u02b4\u02b8\u0005f4\u0002\u02b5\u02b8\u0005",
    "\u0018\r\u0002\u02b6\u02b8\u0005\u008aF\u0002\u02b7\u02aa\u0003\u0002",
    "\u0002\u0002\u02b7\u02ab\u0003\u0002\u0002\u0002\u02b7\u02ac\u0003\u0002",
    "\u0002\u0002\u02b7\u02ad\u0003\u0002\u0002\u0002\u02b7\u02ae\u0003\u0002",
    "\u0002\u0002\u02b7\u02af\u0003\u0002\u0002\u0002\u02b7\u02b0\u0003\u0002",
    "\u0002\u0002\u02b7\u02b1\u0003\u0002\u0002\u0002\u02b7\u02b2\u0003\u0002",
    "\u0002\u0002\u02b7\u02b3\u0003\u0002\u0002\u0002\u02b7\u02b4\u0003\u0002",
    "\u0002\u0002\u02b7\u02b5\u0003\u0002\u0002\u0002\u02b7\u02b6\u0003\u0002",
    "\u0002\u0002\u02b8\u02ba\u0003\u0002\u0002\u0002\u02b9\u02a5\u0003\u0002",
    "\u0002\u0002\u02b9\u02b7\u0003\u0002\u0002\u0002\u02ba\u02c3\u0003\u0002",
    "\u0002\u0002\u02bb\u02bc\f\u0005\u0002\u0002\u02bc\u02bd\u0005&\u0014",
    "\u0002\u02bd\u02be\u0005\u0088E\u0006\u02be\u02c2\u0003\u0002\u0002",
    "\u0002\u02bf\u02c0\f\u0003\u0002\u0002\u02c0\u02c2\u0007$\u0002\u0002",
    "\u02c1\u02bb\u0003\u0002\u0002\u0002\u02c1\u02bf\u0003\u0002\u0002\u0002",
    "\u02c2\u02c5\u0003\u0002\u0002\u0002\u02c3\u02c1\u0003\u0002\u0002\u0002",
    "\u02c3\u02c4\u0003\u0002\u0002\u0002\u02c4\u0089\u0003\u0002\u0002\u0002",
    "\u02c5\u02c3\u0003\u0002\u0002\u0002\u02c6\u02c8\u0007<\u0002\u0002",
    "\u02c7\u02c9\u0005\u008eH\u0002\u02c8\u02c7\u0003\u0002\u0002\u0002",
    "\u02c8\u02c9\u0003\u0002\u0002\u0002\u02c9\u02cb\u0003\u0002\u0002\u0002",
    "\u02ca\u02cc\u0005\u008cG\u0002\u02cb\u02ca\u0003\u0002\u0002\u0002",
    "\u02cb\u02cc\u0003\u0002\u0002\u0002\u02cc\u008b\u0003\u0002\u0002\u0002",
    "\u02cd\u02ce\u0005\u001c\u000f\u0002\u02ce\u02cf\u0005\u0084C\u0002",
    "\u02cf\u008d\u0003\u0002\u0002\u0002\u02d0\u02d1\u0005$\u0013\u0002",
    "\u02d1\u02d2\u0005\u0090I\u0002\u02d2\u008f\u0003\u0002\u0002\u0002",
    "\u02d3\u02d4\bI\u0001\u0002\u02d4\u02d5\u0007\'\u0002\u0002\u02d5\u02d6",
    "\u0005\u0090I\u0002\u02d6\u02d7\u0007(\u0002\u0002\u02d7\u02e9\u0003",
    "\u0002\u0002\u0002\u02d8\u02e7\u00050\u0019\u0002\u02d9\u02e7\u0005",
    "^0\u0002\u02da\u02e7\u0005b2\u0002\u02db\u02e7\u0005,\u0017\u0002\u02dc",
    "\u02e7\u00054\u001b\u0002\u02dd\u02e7\u00058\u001d\u0002\u02de\u02e7",
    "\u0005<\u001f\u0002\u02df\u02e7\u0005\u008aF\u0002\u02e0\u02e7\u0003",
    "\u0002\u0002\u0002\u02e1\u02e7\u0005D#\u0002\u02e2\u02e7\u0005L\'\u0002",
    "\u02e3\u02e7\u0005j6\u0002\u02e4\u02e7\u0005f4\u0002\u02e5\u02e7\u0005",
    "\u0018\r\u0002\u02e6\u02d8\u0003\u0002\u0002\u0002\u02e6\u02d9\u0003",
    "\u0002\u0002\u0002\u02e6\u02da\u0003\u0002\u0002\u0002\u02e6\u02db\u0003",
    "\u0002\u0002\u0002\u02e6\u02dc\u0003\u0002\u0002\u0002\u02e6\u02dd\u0003",
    "\u0002\u0002\u0002\u02e6\u02de\u0003\u0002\u0002\u0002\u02e6\u02df\u0003",
    "\u0002\u0002\u0002\u02e6\u02e0\u0003\u0002\u0002\u0002\u02e6\u02e1\u0003",
    "\u0002\u0002\u0002\u02e6\u02e2\u0003\u0002\u0002\u0002\u02e6\u02e3\u0003",
    "\u0002\u0002\u0002\u02e6\u02e4\u0003\u0002\u0002\u0002\u02e6\u02e5\u0003",
    "\u0002\u0002\u0002\u02e7\u02e9\u0003\u0002\u0002\u0002\u02e8\u02d3\u0003",
    "\u0002\u0002\u0002\u02e8\u02e6\u0003\u0002\u0002\u0002\u02e9\u02f2\u0003",
    "\u0002\u0002\u0002\u02ea\u02eb\f\u0005\u0002\u0002\u02eb\u02ec\u0005",
    "&\u0014\u0002\u02ec\u02ed\u0005\u0090I\u0006\u02ed\u02f1\u0003\u0002",
    "\u0002\u0002\u02ee\u02ef\f\u0003\u0002\u0002\u02ef\u02f1\u0007$\u0002",
    "\u0002\u02f0\u02ea\u0003\u0002\u0002\u0002\u02f0\u02ee\u0003\u0002\u0002",
    "\u0002\u02f1\u02f4\u0003\u0002\u0002\u0002\u02f2\u02f0\u0003\u0002\u0002",
    "\u0002\u02f2\u02f3\u0003\u0002\u0002\u0002\u02f3\u0091\u0003\u0002\u0002",
    "\u0002\u02f4\u02f2\u0003\u0002\u0002\u0002X\u0095\u0099\u009c\u00a1",
    "\u00c9\u00d2\u00d4\u00dd\u00e3\u00e9\u00ef\u00f4\u00fb\u0102\u0109\u010c",
    "\u0112\u0114\u0121\u0123\u012b\u012d\u0137\u0149\u014d\u0154\u015b\u0163",
    "\u0170\u017d\u0181\u0184\u019b\u019d\u01a5\u01a7\u01ac\u01af\u01c2\u01c4",
    "\u01cc\u01ce\u01d3\u01d6\u01ec\u01ee\u01f6\u01f8\u01fd\u0209\u020b\u0213",
    "\u0215\u021a\u0222\u0226\u022d\u0234\u023b\u023e\u0244\u0255\u0257\u025f",
    "\u0261\u0266\u0269\u026f\u027b\u027d\u0285\u0287\u028c\u0293\u0296\u02a0",
    "\u02b7\u02b9\u02c1\u02c3\u02c8\u02cb\u02e6\u02e8\u02f0\u02f2"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'\"'", "'||'", "'&&'", "'!'", "'...'", "'!...'", 
                     "'.'", "'='", "'>'", "'<'", "','", "'''", "'&'", "'No Constructor'", 
                     "'No Function'", "'Empty Body'", "'No Parameter'", 
                     "'Initialization'", "'Calling Constructor: '", "'Calling Function: '", 
                     "'Modifying Field: '", "'Calling a Function With Argument: '", 
                     "'Initialized by Calling Function: '", "'Initialized by Calling a Function With Argument: '", 
                     "'Initialized with: '", "'Caller: '", "'Assigned Value: '", 
                     "'must '", "'of '", "'and '", "'or '", "'have '", "'with '", 
                     null, null, null, "'('", "')'", "'name '", "'annotation '", 
                     "'extension '", "'Superclass'", "'implementation '", 
                     "'Interface '", "'function '", "'abstract function '", 
                     "'constructor '", "'parameter '", "'type '", "'specifier '", 
                     "'visibility '", "'return value '", "'declaration statement '", 
                     "'expression statement '", "'value '", "'initial value '", 
                     "'class '", "'subclass '" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, "SPACE", 
                      "Alphabet", "NL", "LPAREN", "RPAREN", "NAME", "ANNOTATION", 
                      "EXTENSION", "SUPERCLASS", "IMPLEMENTATION", "INTERFACE", 
                      "FUNCTION", "AbstractFunctions", "CONSTRUCTOR", "PARAMETER", 
                      "TYPES", "SPECIFIER", "VISIBILITY", "ReturnValue", 
                      "DeclarationStatement", "ExpressionStatement", "VALUE", 
                      "InitialValue", "CLASSES", "SUBCLASSES" ];

var ruleNames =  [ "inputSentence", "mustClause", "words", "word", "combinatorialWords", 
                   "symbols", "end", "emptyLine", "identifier", "identifiers", 
                   "commentPrefix", "comments", "must", "of", "and", "or", 
                   "have", "withWord", "binary", "names", "nameCondition", 
                   "classNames", "classNameCondition", "annotations", "annotationCondition", 
                   "extensions", "extensionCondition", "implementations", 
                   "implementationCondition", "functions", "functionOf", 
                   "functionCondition", "functionExpression", "abstractFunctions", 
                   "abstractFunctionOf", "abstractFunctionCondition", "abstractFunctionExpression", 
                   "constructors", "constructorOf", "constructorCondition", 
                   "constructorExpression", "parameters", "parameterCondition", 
                   "parameterExpression", "types", "typeCondition", "specifiers", 
                   "specifierCondition", "visibilities", "visibilityCondition", 
                   "returnValues", "returnValueCondition", "declarationStatements", 
                   "declarationStatementOf", "declarationStatementCondition", 
                   "declarationStatementExpression", "expressionStatements", 
                   "expressionStatementOf", "expressionStatementCondition", 
                   "expressionStatementExpression", "value", "valueCondition", 
                   "initialValues", "initialValueOf", "initialValueCondition", 
                   "classes", "classCondition", "classExpression", "subclasses", 
                   "subclassOf", "subclassCondition", "subclassExpression" ];

function rulePadGrammarParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

rulePadGrammarParser.prototype = Object.create(antlr4.Parser.prototype);
rulePadGrammarParser.prototype.constructor = rulePadGrammarParser;

Object.defineProperty(rulePadGrammarParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

rulePadGrammarParser.EOF = antlr4.Token.EOF;
rulePadGrammarParser.T__0 = 1;
rulePadGrammarParser.T__1 = 2;
rulePadGrammarParser.T__2 = 3;
rulePadGrammarParser.T__3 = 4;
rulePadGrammarParser.T__4 = 5;
rulePadGrammarParser.T__5 = 6;
rulePadGrammarParser.T__6 = 7;
rulePadGrammarParser.T__7 = 8;
rulePadGrammarParser.T__8 = 9;
rulePadGrammarParser.T__9 = 10;
rulePadGrammarParser.T__10 = 11;
rulePadGrammarParser.T__11 = 12;
rulePadGrammarParser.T__12 = 13;
rulePadGrammarParser.T__13 = 14;
rulePadGrammarParser.T__14 = 15;
rulePadGrammarParser.T__15 = 16;
rulePadGrammarParser.T__16 = 17;
rulePadGrammarParser.T__17 = 18;
rulePadGrammarParser.T__18 = 19;
rulePadGrammarParser.T__19 = 20;
rulePadGrammarParser.T__20 = 21;
rulePadGrammarParser.T__21 = 22;
rulePadGrammarParser.T__22 = 23;
rulePadGrammarParser.T__23 = 24;
rulePadGrammarParser.T__24 = 25;
rulePadGrammarParser.T__25 = 26;
rulePadGrammarParser.T__26 = 27;
rulePadGrammarParser.T__27 = 28;
rulePadGrammarParser.T__28 = 29;
rulePadGrammarParser.T__29 = 30;
rulePadGrammarParser.T__30 = 31;
rulePadGrammarParser.T__31 = 32;
rulePadGrammarParser.T__32 = 33;
rulePadGrammarParser.SPACE = 34;
rulePadGrammarParser.Alphabet = 35;
rulePadGrammarParser.NL = 36;
rulePadGrammarParser.LPAREN = 37;
rulePadGrammarParser.RPAREN = 38;
rulePadGrammarParser.NAME = 39;
rulePadGrammarParser.ANNOTATION = 40;
rulePadGrammarParser.EXTENSION = 41;
rulePadGrammarParser.SUPERCLASS = 42;
rulePadGrammarParser.IMPLEMENTATION = 43;
rulePadGrammarParser.INTERFACE = 44;
rulePadGrammarParser.FUNCTION = 45;
rulePadGrammarParser.AbstractFunctions = 46;
rulePadGrammarParser.CONSTRUCTOR = 47;
rulePadGrammarParser.PARAMETER = 48;
rulePadGrammarParser.TYPES = 49;
rulePadGrammarParser.SPECIFIER = 50;
rulePadGrammarParser.VISIBILITY = 51;
rulePadGrammarParser.ReturnValue = 52;
rulePadGrammarParser.DeclarationStatement = 53;
rulePadGrammarParser.ExpressionStatement = 54;
rulePadGrammarParser.VALUE = 55;
rulePadGrammarParser.InitialValue = 56;
rulePadGrammarParser.CLASSES = 57;
rulePadGrammarParser.SUBCLASSES = 58;

rulePadGrammarParser.RULE_inputSentence = 0;
rulePadGrammarParser.RULE_mustClause = 1;
rulePadGrammarParser.RULE_words = 2;
rulePadGrammarParser.RULE_word = 3;
rulePadGrammarParser.RULE_combinatorialWords = 4;
rulePadGrammarParser.RULE_symbols = 5;
rulePadGrammarParser.RULE_end = 6;
rulePadGrammarParser.RULE_emptyLine = 7;
rulePadGrammarParser.RULE_identifier = 8;
rulePadGrammarParser.RULE_identifiers = 9;
rulePadGrammarParser.RULE_commentPrefix = 10;
rulePadGrammarParser.RULE_comments = 11;
rulePadGrammarParser.RULE_must = 12;
rulePadGrammarParser.RULE_of = 13;
rulePadGrammarParser.RULE_and = 14;
rulePadGrammarParser.RULE_or = 15;
rulePadGrammarParser.RULE_have = 16;
rulePadGrammarParser.RULE_withWord = 17;
rulePadGrammarParser.RULE_binary = 18;
rulePadGrammarParser.RULE_names = 19;
rulePadGrammarParser.RULE_nameCondition = 20;
rulePadGrammarParser.RULE_classNames = 21;
rulePadGrammarParser.RULE_classNameCondition = 22;
rulePadGrammarParser.RULE_annotations = 23;
rulePadGrammarParser.RULE_annotationCondition = 24;
rulePadGrammarParser.RULE_extensions = 25;
rulePadGrammarParser.RULE_extensionCondition = 26;
rulePadGrammarParser.RULE_implementations = 27;
rulePadGrammarParser.RULE_implementationCondition = 28;
rulePadGrammarParser.RULE_functions = 29;
rulePadGrammarParser.RULE_functionOf = 30;
rulePadGrammarParser.RULE_functionCondition = 31;
rulePadGrammarParser.RULE_functionExpression = 32;
rulePadGrammarParser.RULE_abstractFunctions = 33;
rulePadGrammarParser.RULE_abstractFunctionOf = 34;
rulePadGrammarParser.RULE_abstractFunctionCondition = 35;
rulePadGrammarParser.RULE_abstractFunctionExpression = 36;
rulePadGrammarParser.RULE_constructors = 37;
rulePadGrammarParser.RULE_constructorOf = 38;
rulePadGrammarParser.RULE_constructorCondition = 39;
rulePadGrammarParser.RULE_constructorExpression = 40;
rulePadGrammarParser.RULE_parameters = 41;
rulePadGrammarParser.RULE_parameterCondition = 42;
rulePadGrammarParser.RULE_parameterExpression = 43;
rulePadGrammarParser.RULE_types = 44;
rulePadGrammarParser.RULE_typeCondition = 45;
rulePadGrammarParser.RULE_specifiers = 46;
rulePadGrammarParser.RULE_specifierCondition = 47;
rulePadGrammarParser.RULE_visibilities = 48;
rulePadGrammarParser.RULE_visibilityCondition = 49;
rulePadGrammarParser.RULE_returnValues = 50;
rulePadGrammarParser.RULE_returnValueCondition = 51;
rulePadGrammarParser.RULE_declarationStatements = 52;
rulePadGrammarParser.RULE_declarationStatementOf = 53;
rulePadGrammarParser.RULE_declarationStatementCondition = 54;
rulePadGrammarParser.RULE_declarationStatementExpression = 55;
rulePadGrammarParser.RULE_expressionStatements = 56;
rulePadGrammarParser.RULE_expressionStatementOf = 57;
rulePadGrammarParser.RULE_expressionStatementCondition = 58;
rulePadGrammarParser.RULE_expressionStatementExpression = 59;
rulePadGrammarParser.RULE_value = 60;
rulePadGrammarParser.RULE_valueCondition = 61;
rulePadGrammarParser.RULE_initialValues = 62;
rulePadGrammarParser.RULE_initialValueOf = 63;
rulePadGrammarParser.RULE_initialValueCondition = 64;
rulePadGrammarParser.RULE_classes = 65;
rulePadGrammarParser.RULE_classCondition = 66;
rulePadGrammarParser.RULE_classExpression = 67;
rulePadGrammarParser.RULE_subclasses = 68;
rulePadGrammarParser.RULE_subclassOf = 69;
rulePadGrammarParser.RULE_subclassCondition = 70;
rulePadGrammarParser.RULE_subclassExpression = 71;

function InputSentenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_inputSentence;
    return this;
}

InputSentenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InputSentenceContext.prototype.constructor = InputSentenceContext;

InputSentenceContext.prototype.EOF = function() {
    return this.getToken(rulePadGrammarParser.EOF, 0);
};

InputSentenceContext.prototype.mustClause = function() {
    return this.getTypedRuleContext(MustClauseContext,0);
};

InputSentenceContext.prototype.end = function() {
    return this.getTypedRuleContext(EndContext,0);
};

InputSentenceContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(rulePadGrammarParser.NL);
    } else {
        return this.getToken(rulePadGrammarParser.NL, i);
    }
};


InputSentenceContext.prototype.emptyLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EmptyLineContext);
    } else {
        return this.getTypedRuleContext(EmptyLineContext,i);
    }
};

InputSentenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterInputSentence(this);
	}
};

InputSentenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitInputSentence(this);
	}
};




rulePadGrammarParser.InputSentenceContext = InputSentenceContext;

rulePadGrammarParser.prototype.inputSentence = function() {

    var localctx = new InputSentenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, rulePadGrammarParser.RULE_inputSentence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 151;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.EOF:
        case rulePadGrammarParser.T__6:
        case rulePadGrammarParser.NL:
            this.state = 147;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 144;
                    this.emptyLine(); 
                }
                this.state = 149;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
            }

            break;
        case rulePadGrammarParser.FUNCTION:
        case rulePadGrammarParser.AbstractFunctions:
        case rulePadGrammarParser.CONSTRUCTOR:
        case rulePadGrammarParser.PARAMETER:
        case rulePadGrammarParser.DeclarationStatement:
        case rulePadGrammarParser.CLASSES:
        case rulePadGrammarParser.SUBCLASSES:
            this.state = 150;
            this.mustClause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 154;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===rulePadGrammarParser.T__6) {
            this.state = 153;
            this.end();
        }

        this.state = 159;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===rulePadGrammarParser.NL) {
            this.state = 156;
            this.match(rulePadGrammarParser.NL);
            this.state = 161;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 162;
        this.match(rulePadGrammarParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MustClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_mustClause;
    return this;
}

MustClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MustClauseContext.prototype.constructor = MustClauseContext;

MustClauseContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

MustClauseContext.prototype.must = function() {
    return this.getTypedRuleContext(MustContext,0);
};

MustClauseContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

MustClauseContext.prototype.functionExpression = function() {
    return this.getTypedRuleContext(FunctionExpressionContext,0);
};

MustClauseContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

MustClauseContext.prototype.abstractFunctionExpression = function() {
    return this.getTypedRuleContext(AbstractFunctionExpressionContext,0);
};

MustClauseContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

MustClauseContext.prototype.constructorExpression = function() {
    return this.getTypedRuleContext(ConstructorExpressionContext,0);
};

MustClauseContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

MustClauseContext.prototype.classExpression = function() {
    return this.getTypedRuleContext(ClassExpressionContext,0);
};

MustClauseContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

MustClauseContext.prototype.parameterExpression = function() {
    return this.getTypedRuleContext(ParameterExpressionContext,0);
};

MustClauseContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

MustClauseContext.prototype.declarationStatementExpression = function() {
    return this.getTypedRuleContext(DeclarationStatementExpressionContext,0);
};

MustClauseContext.prototype.subclasses = function() {
    return this.getTypedRuleContext(SubclassesContext,0);
};

MustClauseContext.prototype.subclassExpression = function() {
    return this.getTypedRuleContext(SubclassExpressionContext,0);
};

MustClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterMustClause(this);
	}
};

MustClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitMustClause(this);
	}
};




rulePadGrammarParser.MustClauseContext = MustClauseContext;

rulePadGrammarParser.prototype.mustClause = function() {

    var localctx = new MustClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, rulePadGrammarParser.RULE_mustClause);
    try {
        this.state = 199;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.FUNCTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 164;
            this.functions();
            this.state = 165;
            this.must();
            this.state = 166;
            this.have();
            this.state = 167;
            this.functionExpression(0);
            break;
        case rulePadGrammarParser.AbstractFunctions:
            this.enterOuterAlt(localctx, 2);
            this.state = 169;
            this.abstractFunctions();
            this.state = 170;
            this.must();
            this.state = 171;
            this.have();
            this.state = 172;
            this.abstractFunctionExpression(0);
            break;
        case rulePadGrammarParser.CONSTRUCTOR:
            this.enterOuterAlt(localctx, 3);
            this.state = 174;
            this.constructors();
            this.state = 175;
            this.must();
            this.state = 176;
            this.have();
            this.state = 177;
            this.constructorExpression(0);
            break;
        case rulePadGrammarParser.CLASSES:
            this.enterOuterAlt(localctx, 4);
            this.state = 179;
            this.classes();
            this.state = 180;
            this.must();
            this.state = 181;
            this.have();
            this.state = 182;
            this.classExpression(0);
            break;
        case rulePadGrammarParser.PARAMETER:
            this.enterOuterAlt(localctx, 5);
            this.state = 184;
            this.parameters();
            this.state = 185;
            this.must();
            this.state = 186;
            this.have();
            this.state = 187;
            this.parameterExpression(0);
            break;
        case rulePadGrammarParser.DeclarationStatement:
            this.enterOuterAlt(localctx, 6);
            this.state = 189;
            this.declarationStatements();
            this.state = 190;
            this.must();
            this.state = 191;
            this.have();
            this.state = 192;
            this.declarationStatementExpression(0);
            break;
        case rulePadGrammarParser.SUBCLASSES:
            this.enterOuterAlt(localctx, 7);
            this.state = 194;
            this.subclasses();
            this.state = 195;
            this.must();
            this.state = 196;
            this.have();
            this.state = 197;
            this.subclassExpression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WordsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_words;
    return this;
}

WordsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WordsContext.prototype.constructor = WordsContext;

WordsContext.prototype.word = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WordContext);
    } else {
        return this.getTypedRuleContext(WordContext,i);
    }
};

WordsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterWords(this);
	}
};

WordsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitWords(this);
	}
};




rulePadGrammarParser.WordsContext = WordsContext;

rulePadGrammarParser.prototype.words = function() {

    var localctx = new WordsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, rulePadGrammarParser.RULE_words);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 201;
        this.match(rulePadGrammarParser.T__0);
        this.state = 210;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 208;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 202;
                    this.word();
                    this.state = 203;
                    this.match(rulePadGrammarParser.T__1);
                    break;

                case 2:
                    this.state = 205;
                    this.word();
                    this.state = 206;
                    this.match(rulePadGrammarParser.T__2);
                    break;

                } 
            }
            this.state = 212;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
        }

        this.state = 213;
        this.word();
        this.state = 214;
        this.match(rulePadGrammarParser.T__0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_word;
    return this;
}

WordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WordContext.prototype.constructor = WordContext;

WordContext.prototype.Alphabet = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(rulePadGrammarParser.Alphabet);
    } else {
        return this.getToken(rulePadGrammarParser.Alphabet, i);
    }
};


WordContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterWord(this);
	}
};

WordContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitWord(this);
	}
};




rulePadGrammarParser.WordContext = WordContext;

rulePadGrammarParser.prototype.word = function() {

    var localctx = new WordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, rulePadGrammarParser.RULE_word);
    var _la = 0; // Token type
    try {
        this.state = 266;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 217; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 216;
                this.match(rulePadGrammarParser.Alphabet);
                this.state = 219; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===rulePadGrammarParser.Alphabet);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 221;
            this.match(rulePadGrammarParser.T__3);
            this.state = 223; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 222;
                this.match(rulePadGrammarParser.Alphabet);
                this.state = 225; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===rulePadGrammarParser.Alphabet);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 227;
            this.match(rulePadGrammarParser.T__4);
            this.state = 229; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 228;
                this.match(rulePadGrammarParser.Alphabet);
                this.state = 231; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===rulePadGrammarParser.Alphabet);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 233;
            this.match(rulePadGrammarParser.T__5);
            this.state = 235; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 234;
                this.match(rulePadGrammarParser.Alphabet);
                this.state = 237; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===rulePadGrammarParser.Alphabet);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 240; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 239;
                this.match(rulePadGrammarParser.Alphabet);
                this.state = 242; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===rulePadGrammarParser.Alphabet);
            this.state = 244;
            this.match(rulePadGrammarParser.T__4);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 245;
            this.match(rulePadGrammarParser.T__3);
            this.state = 247; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 246;
                this.match(rulePadGrammarParser.Alphabet);
                this.state = 249; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===rulePadGrammarParser.Alphabet);
            this.state = 251;
            this.match(rulePadGrammarParser.T__4);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 252;
            this.match(rulePadGrammarParser.T__4);
            this.state = 254; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 253;
                this.match(rulePadGrammarParser.Alphabet);
                this.state = 256; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===rulePadGrammarParser.Alphabet);
            this.state = 258;
            this.match(rulePadGrammarParser.T__4);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 259;
            this.match(rulePadGrammarParser.T__5);
            this.state = 261; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 260;
                this.match(rulePadGrammarParser.Alphabet);
                this.state = 263; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===rulePadGrammarParser.Alphabet);
            this.state = 265;
            this.match(rulePadGrammarParser.T__4);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CombinatorialWordsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_combinatorialWords;
    return this;
}

CombinatorialWordsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CombinatorialWordsContext.prototype.constructor = CombinatorialWordsContext;

CombinatorialWordsContext.prototype.Alphabet = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(rulePadGrammarParser.Alphabet);
    } else {
        return this.getToken(rulePadGrammarParser.Alphabet, i);
    }
};


CombinatorialWordsContext.prototype.symbols = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolsContext);
    } else {
        return this.getTypedRuleContext(SymbolsContext,i);
    }
};

CombinatorialWordsContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(rulePadGrammarParser.SPACE);
    } else {
        return this.getToken(rulePadGrammarParser.SPACE, i);
    }
};


CombinatorialWordsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterCombinatorialWords(this);
	}
};

CombinatorialWordsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitCombinatorialWords(this);
	}
};




rulePadGrammarParser.CombinatorialWordsContext = CombinatorialWordsContext;

rulePadGrammarParser.prototype.combinatorialWords = function() {

    var localctx = new CombinatorialWordsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, rulePadGrammarParser.RULE_combinatorialWords);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 268;
        this.match(rulePadGrammarParser.T__0);
        this.state = 272; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 272;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case rulePadGrammarParser.Alphabet:
                this.state = 269;
                this.match(rulePadGrammarParser.Alphabet);
                break;
            case rulePadGrammarParser.T__6:
            case rulePadGrammarParser.T__7:
            case rulePadGrammarParser.T__8:
            case rulePadGrammarParser.T__9:
            case rulePadGrammarParser.T__10:
            case rulePadGrammarParser.T__11:
            case rulePadGrammarParser.T__12:
            case rulePadGrammarParser.LPAREN:
            case rulePadGrammarParser.RPAREN:
                this.state = 270;
                this.symbols();
                break;
            case rulePadGrammarParser.SPACE:
                this.state = 271;
                this.match(rulePadGrammarParser.SPACE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 274; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 7)) & ~0x1f) == 0 && ((1 << (_la - 7)) & ((1 << (rulePadGrammarParser.T__6 - 7)) | (1 << (rulePadGrammarParser.T__7 - 7)) | (1 << (rulePadGrammarParser.T__8 - 7)) | (1 << (rulePadGrammarParser.T__9 - 7)) | (1 << (rulePadGrammarParser.T__10 - 7)) | (1 << (rulePadGrammarParser.T__11 - 7)) | (1 << (rulePadGrammarParser.T__12 - 7)) | (1 << (rulePadGrammarParser.SPACE - 7)) | (1 << (rulePadGrammarParser.Alphabet - 7)) | (1 << (rulePadGrammarParser.LPAREN - 7)) | (1 << (rulePadGrammarParser.RPAREN - 7)))) !== 0));
        this.state = 276;
        this.match(rulePadGrammarParser.T__0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SymbolsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_symbols;
    return this;
}

SymbolsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SymbolsContext.prototype.constructor = SymbolsContext;


SymbolsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterSymbols(this);
	}
};

SymbolsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitSymbols(this);
	}
};




rulePadGrammarParser.SymbolsContext = SymbolsContext;

rulePadGrammarParser.prototype.symbols = function() {

    var localctx = new SymbolsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, rulePadGrammarParser.RULE_symbols);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 278;
        _la = this._input.LA(1);
        if(!(((((_la - 7)) & ~0x1f) == 0 && ((1 << (_la - 7)) & ((1 << (rulePadGrammarParser.T__6 - 7)) | (1 << (rulePadGrammarParser.T__7 - 7)) | (1 << (rulePadGrammarParser.T__8 - 7)) | (1 << (rulePadGrammarParser.T__9 - 7)) | (1 << (rulePadGrammarParser.T__10 - 7)) | (1 << (rulePadGrammarParser.T__11 - 7)) | (1 << (rulePadGrammarParser.T__12 - 7)) | (1 << (rulePadGrammarParser.LPAREN - 7)) | (1 << (rulePadGrammarParser.RPAREN - 7)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_end;
    return this;
}

EndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EndContext.prototype.constructor = EndContext;


EndContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterEnd(this);
	}
};

EndContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitEnd(this);
	}
};




rulePadGrammarParser.EndContext = EndContext;

rulePadGrammarParser.prototype.end = function() {

    var localctx = new EndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, rulePadGrammarParser.RULE_end);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 280;
        this.match(rulePadGrammarParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmptyLineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_emptyLine;
    return this;
}

EmptyLineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyLineContext.prototype.constructor = EmptyLineContext;

EmptyLineContext.prototype.NL = function() {
    return this.getToken(rulePadGrammarParser.NL, 0);
};

EmptyLineContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterEmptyLine(this);
	}
};

EmptyLineContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitEmptyLine(this);
	}
};




rulePadGrammarParser.EmptyLineContext = EmptyLineContext;

rulePadGrammarParser.prototype.emptyLine = function() {

    var localctx = new EmptyLineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, rulePadGrammarParser.RULE_emptyLine);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 282;
        this.match(rulePadGrammarParser.NL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.Alphabet = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(rulePadGrammarParser.Alphabet);
    } else {
        return this.getToken(rulePadGrammarParser.Alphabet, i);
    }
};


IdentifierContext.prototype.symbols = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolsContext);
    } else {
        return this.getTypedRuleContext(SymbolsContext,i);
    }
};

IdentifierContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(rulePadGrammarParser.SPACE);
    } else {
        return this.getToken(rulePadGrammarParser.SPACE, i);
    }
};


IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitIdentifier(this);
	}
};




rulePadGrammarParser.IdentifierContext = IdentifierContext;

rulePadGrammarParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, rulePadGrammarParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 287; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 287;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case rulePadGrammarParser.Alphabet:
                this.state = 284;
                this.match(rulePadGrammarParser.Alphabet);
                break;
            case rulePadGrammarParser.T__6:
            case rulePadGrammarParser.T__7:
            case rulePadGrammarParser.T__8:
            case rulePadGrammarParser.T__9:
            case rulePadGrammarParser.T__10:
            case rulePadGrammarParser.T__11:
            case rulePadGrammarParser.T__12:
            case rulePadGrammarParser.LPAREN:
            case rulePadGrammarParser.RPAREN:
                this.state = 285;
                this.symbols();
                break;
            case rulePadGrammarParser.SPACE:
                this.state = 286;
                this.match(rulePadGrammarParser.SPACE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 289; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 7)) & ~0x1f) == 0 && ((1 << (_la - 7)) & ((1 << (rulePadGrammarParser.T__6 - 7)) | (1 << (rulePadGrammarParser.T__7 - 7)) | (1 << (rulePadGrammarParser.T__8 - 7)) | (1 << (rulePadGrammarParser.T__9 - 7)) | (1 << (rulePadGrammarParser.T__10 - 7)) | (1 << (rulePadGrammarParser.T__11 - 7)) | (1 << (rulePadGrammarParser.T__12 - 7)) | (1 << (rulePadGrammarParser.SPACE - 7)) | (1 << (rulePadGrammarParser.Alphabet - 7)) | (1 << (rulePadGrammarParser.LPAREN - 7)) | (1 << (rulePadGrammarParser.RPAREN - 7)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_identifiers;
    return this;
}

IdentifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifiersContext.prototype.constructor = IdentifiersContext;

IdentifiersContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

IdentifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterIdentifiers(this);
	}
};

IdentifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitIdentifiers(this);
	}
};




rulePadGrammarParser.IdentifiersContext = IdentifiersContext;

rulePadGrammarParser.prototype.identifiers = function() {

    var localctx = new IdentifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, rulePadGrammarParser.RULE_identifiers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 299;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 297;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 291;
                    this.identifier();
                    this.state = 292;
                    this.match(rulePadGrammarParser.T__1);
                    break;

                case 2:
                    this.state = 294;
                    this.identifier();
                    this.state = 295;
                    this.match(rulePadGrammarParser.T__2);
                    break;

                } 
            }
            this.state = 301;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
        }

        this.state = 302;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CommentPrefixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_commentPrefix;
    return this;
}

CommentPrefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommentPrefixContext.prototype.constructor = CommentPrefixContext;


CommentPrefixContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterCommentPrefix(this);
	}
};

CommentPrefixContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitCommentPrefix(this);
	}
};




rulePadGrammarParser.CommentPrefixContext = CommentPrefixContext;

rulePadGrammarParser.prototype.commentPrefix = function() {

    var localctx = new CommentPrefixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, rulePadGrammarParser.RULE_commentPrefix);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 304;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << rulePadGrammarParser.T__13) | (1 << rulePadGrammarParser.T__14) | (1 << rulePadGrammarParser.T__15) | (1 << rulePadGrammarParser.T__16) | (1 << rulePadGrammarParser.T__17) | (1 << rulePadGrammarParser.T__18) | (1 << rulePadGrammarParser.T__19) | (1 << rulePadGrammarParser.T__20) | (1 << rulePadGrammarParser.T__21) | (1 << rulePadGrammarParser.T__22) | (1 << rulePadGrammarParser.T__23) | (1 << rulePadGrammarParser.T__24) | (1 << rulePadGrammarParser.T__25) | (1 << rulePadGrammarParser.T__26))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CommentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_comments;
    return this;
}

CommentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommentsContext.prototype.constructor = CommentsContext;

CommentsContext.prototype.commentPrefix = function() {
    return this.getTypedRuleContext(CommentPrefixContext,0);
};

CommentsContext.prototype.identifiers = function() {
    return this.getTypedRuleContext(IdentifiersContext,0);
};

CommentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterComments(this);
	}
};

CommentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitComments(this);
	}
};




rulePadGrammarParser.CommentsContext = CommentsContext;

rulePadGrammarParser.prototype.comments = function() {

    var localctx = new CommentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, rulePadGrammarParser.RULE_comments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 306;
        this.match(rulePadGrammarParser.T__0);
        this.state = 307;
        this.commentPrefix();
        this.state = 309;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 7)) & ~0x1f) == 0 && ((1 << (_la - 7)) & ((1 << (rulePadGrammarParser.T__6 - 7)) | (1 << (rulePadGrammarParser.T__7 - 7)) | (1 << (rulePadGrammarParser.T__8 - 7)) | (1 << (rulePadGrammarParser.T__9 - 7)) | (1 << (rulePadGrammarParser.T__10 - 7)) | (1 << (rulePadGrammarParser.T__11 - 7)) | (1 << (rulePadGrammarParser.T__12 - 7)) | (1 << (rulePadGrammarParser.SPACE - 7)) | (1 << (rulePadGrammarParser.Alphabet - 7)) | (1 << (rulePadGrammarParser.LPAREN - 7)) | (1 << (rulePadGrammarParser.RPAREN - 7)))) !== 0)) {
            this.state = 308;
            this.identifiers();
        }

        this.state = 311;
        this.match(rulePadGrammarParser.T__0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MustContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_must;
    return this;
}

MustContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MustContext.prototype.constructor = MustContext;


MustContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterMust(this);
	}
};

MustContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitMust(this);
	}
};




rulePadGrammarParser.MustContext = MustContext;

rulePadGrammarParser.prototype.must = function() {

    var localctx = new MustContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, rulePadGrammarParser.RULE_must);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 313;
        this.match(rulePadGrammarParser.T__27);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_of;
    return this;
}

OfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OfContext.prototype.constructor = OfContext;


OfContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterOf(this);
	}
};

OfContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitOf(this);
	}
};




rulePadGrammarParser.OfContext = OfContext;

rulePadGrammarParser.prototype.of = function() {

    var localctx = new OfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, rulePadGrammarParser.RULE_of);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 315;
        this.match(rulePadGrammarParser.T__28);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_and;
    return this;
}

AndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AndContext.prototype.constructor = AndContext;


AndContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterAnd(this);
	}
};

AndContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitAnd(this);
	}
};




rulePadGrammarParser.AndContext = AndContext;

rulePadGrammarParser.prototype.and = function() {

    var localctx = new AndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, rulePadGrammarParser.RULE_and);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 317;
        this.match(rulePadGrammarParser.T__29);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_or;
    return this;
}

OrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrContext.prototype.constructor = OrContext;


OrContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterOr(this);
	}
};

OrContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitOr(this);
	}
};




rulePadGrammarParser.OrContext = OrContext;

rulePadGrammarParser.prototype.or = function() {

    var localctx = new OrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, rulePadGrammarParser.RULE_or);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 319;
        this.match(rulePadGrammarParser.T__30);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HaveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_have;
    return this;
}

HaveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HaveContext.prototype.constructor = HaveContext;


HaveContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterHave(this);
	}
};

HaveContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitHave(this);
	}
};




rulePadGrammarParser.HaveContext = HaveContext;

rulePadGrammarParser.prototype.have = function() {

    var localctx = new HaveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, rulePadGrammarParser.RULE_have);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 321;
        this.match(rulePadGrammarParser.T__31);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WithWordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_withWord;
    return this;
}

WithWordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithWordContext.prototype.constructor = WithWordContext;


WithWordContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterWithWord(this);
	}
};

WithWordContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitWithWord(this);
	}
};




rulePadGrammarParser.WithWordContext = WithWordContext;

rulePadGrammarParser.prototype.withWord = function() {

    var localctx = new WithWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, rulePadGrammarParser.RULE_withWord);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 323;
        this.match(rulePadGrammarParser.T__32);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BinaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_binary;
    return this;
}

BinaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BinaryContext.prototype.constructor = BinaryContext;

BinaryContext.prototype.and = function() {
    return this.getTypedRuleContext(AndContext,0);
};

BinaryContext.prototype.or = function() {
    return this.getTypedRuleContext(OrContext,0);
};

BinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterBinary(this);
	}
};

BinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitBinary(this);
	}
};




rulePadGrammarParser.BinaryContext = BinaryContext;

rulePadGrammarParser.prototype.binary = function() {

    var localctx = new BinaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, rulePadGrammarParser.RULE_binary);
    try {
        this.state = 327;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.T__29:
            this.enterOuterAlt(localctx, 1);
            this.state = 325;
            this.and();
            break;
        case rulePadGrammarParser.T__30:
            this.enterOuterAlt(localctx, 2);
            this.state = 326;
            this.or();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_names;
    return this;
}

NamesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamesContext.prototype.constructor = NamesContext;

NamesContext.prototype.NAME = function() {
    return this.getToken(rulePadGrammarParser.NAME, 0);
};

NamesContext.prototype.nameCondition = function() {
    return this.getTypedRuleContext(NameConditionContext,0);
};

NamesContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterNames(this);
	}
};

NamesContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitNames(this);
	}
};




rulePadGrammarParser.NamesContext = NamesContext;

rulePadGrammarParser.prototype.names = function() {

    var localctx = new NamesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, rulePadGrammarParser.RULE_names);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 329;
        this.match(rulePadGrammarParser.NAME);
        this.state = 331;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        if(la_===1) {
            this.state = 330;
            this.nameCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_nameCondition;
    return this;
}

NameConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameConditionContext.prototype.constructor = NameConditionContext;

NameConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

NameConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

NameConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterNameCondition(this);
	}
};

NameConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitNameCondition(this);
	}
};




rulePadGrammarParser.NameConditionContext = NameConditionContext;

rulePadGrammarParser.prototype.nameCondition = function() {

    var localctx = new NameConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, rulePadGrammarParser.RULE_nameCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 333;
        this.words();
        this.state = 334;
        this.match(rulePadGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassNamesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_classNames;
    return this;
}

ClassNamesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassNamesContext.prototype.constructor = ClassNamesContext;

ClassNamesContext.prototype.NAME = function() {
    return this.getToken(rulePadGrammarParser.NAME, 0);
};

ClassNamesContext.prototype.classNameCondition = function() {
    return this.getTypedRuleContext(ClassNameConditionContext,0);
};

ClassNamesContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterClassNames(this);
	}
};

ClassNamesContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitClassNames(this);
	}
};




rulePadGrammarParser.ClassNamesContext = ClassNamesContext;

rulePadGrammarParser.prototype.classNames = function() {

    var localctx = new ClassNamesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, rulePadGrammarParser.RULE_classNames);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 336;
        this.match(rulePadGrammarParser.NAME);
        this.state = 338;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        if(la_===1) {
            this.state = 337;
            this.classNameCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassNameConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_classNameCondition;
    return this;
}

ClassNameConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassNameConditionContext.prototype.constructor = ClassNameConditionContext;

ClassNameConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

ClassNameConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

ClassNameConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterClassNameCondition(this);
	}
};

ClassNameConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitClassNameCondition(this);
	}
};




rulePadGrammarParser.ClassNameConditionContext = ClassNameConditionContext;

rulePadGrammarParser.prototype.classNameCondition = function() {

    var localctx = new ClassNameConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, rulePadGrammarParser.RULE_classNameCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 340;
        this.combinatorialWords();
        this.state = 341;
        this.match(rulePadGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_annotations;
    return this;
}

AnnotationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationsContext.prototype.constructor = AnnotationsContext;

AnnotationsContext.prototype.ANNOTATION = function() {
    return this.getToken(rulePadGrammarParser.ANNOTATION, 0);
};

AnnotationsContext.prototype.annotationCondition = function() {
    return this.getTypedRuleContext(AnnotationConditionContext,0);
};

AnnotationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterAnnotations(this);
	}
};

AnnotationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitAnnotations(this);
	}
};




rulePadGrammarParser.AnnotationsContext = AnnotationsContext;

rulePadGrammarParser.prototype.annotations = function() {

    var localctx = new AnnotationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, rulePadGrammarParser.RULE_annotations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 343;
        this.match(rulePadGrammarParser.ANNOTATION);
        this.state = 345;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        if(la_===1) {
            this.state = 344;
            this.annotationCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_annotationCondition;
    return this;
}

AnnotationConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationConditionContext.prototype.constructor = AnnotationConditionContext;

AnnotationConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

AnnotationConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

AnnotationConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

AnnotationConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterAnnotationCondition(this);
	}
};

AnnotationConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitAnnotationCondition(this);
	}
};




rulePadGrammarParser.AnnotationConditionContext = AnnotationConditionContext;

rulePadGrammarParser.prototype.annotationCondition = function() {

    var localctx = new AnnotationConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, rulePadGrammarParser.RULE_annotationCondition);
    try {
        this.state = 353;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 347;
            this.combinatorialWords();
            this.state = 348;
            this.match(rulePadGrammarParser.SPACE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 350;
            this.words();
            this.state = 351;
            this.match(rulePadGrammarParser.SPACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtensionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_extensions;
    return this;
}

ExtensionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionsContext.prototype.constructor = ExtensionsContext;

ExtensionsContext.prototype.EXTENSION = function() {
    return this.getToken(rulePadGrammarParser.EXTENSION, 0);
};

ExtensionsContext.prototype.extensionCondition = function() {
    return this.getTypedRuleContext(ExtensionConditionContext,0);
};

ExtensionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterExtensions(this);
	}
};

ExtensionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitExtensions(this);
	}
};




rulePadGrammarParser.ExtensionsContext = ExtensionsContext;

rulePadGrammarParser.prototype.extensions = function() {

    var localctx = new ExtensionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, rulePadGrammarParser.RULE_extensions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 355;
        this.match(rulePadGrammarParser.EXTENSION);
        this.state = 356;
        this.extensionCondition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtensionConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_extensionCondition;
    return this;
}

ExtensionConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionConditionContext.prototype.constructor = ExtensionConditionContext;

ExtensionConditionContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ExtensionConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

ExtensionConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

ExtensionConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

ExtensionConditionContext.prototype.SUPERCLASS = function() {
    return this.getToken(rulePadGrammarParser.SUPERCLASS, 0);
};

ExtensionConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterExtensionCondition(this);
	}
};

ExtensionConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitExtensionCondition(this);
	}
};




rulePadGrammarParser.ExtensionConditionContext = ExtensionConditionContext;

rulePadGrammarParser.prototype.extensionCondition = function() {

    var localctx = new ExtensionConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, rulePadGrammarParser.RULE_extensionCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 358;
        this.of();
        this.state = 366;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        switch(la_) {
        case 1:
            this.state = 359;
            this.combinatorialWords();
            this.state = 360;
            this.match(rulePadGrammarParser.SPACE);
            break;

        case 2:
            this.state = 362;
            this.words();
            this.state = 363;
            this.match(rulePadGrammarParser.SPACE);
            break;

        case 3:
            this.state = 365;
            this.match(rulePadGrammarParser.SUPERCLASS);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImplementationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_implementations;
    return this;
}

ImplementationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImplementationsContext.prototype.constructor = ImplementationsContext;

ImplementationsContext.prototype.IMPLEMENTATION = function() {
    return this.getToken(rulePadGrammarParser.IMPLEMENTATION, 0);
};

ImplementationsContext.prototype.implementationCondition = function() {
    return this.getTypedRuleContext(ImplementationConditionContext,0);
};

ImplementationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterImplementations(this);
	}
};

ImplementationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitImplementations(this);
	}
};




rulePadGrammarParser.ImplementationsContext = ImplementationsContext;

rulePadGrammarParser.prototype.implementations = function() {

    var localctx = new ImplementationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, rulePadGrammarParser.RULE_implementations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 368;
        this.match(rulePadGrammarParser.IMPLEMENTATION);
        this.state = 369;
        this.implementationCondition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImplementationConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_implementationCondition;
    return this;
}

ImplementationConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImplementationConditionContext.prototype.constructor = ImplementationConditionContext;

ImplementationConditionContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ImplementationConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

ImplementationConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

ImplementationConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

ImplementationConditionContext.prototype.INTERFACE = function() {
    return this.getToken(rulePadGrammarParser.INTERFACE, 0);
};

ImplementationConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterImplementationCondition(this);
	}
};

ImplementationConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitImplementationCondition(this);
	}
};




rulePadGrammarParser.ImplementationConditionContext = ImplementationConditionContext;

rulePadGrammarParser.prototype.implementationCondition = function() {

    var localctx = new ImplementationConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, rulePadGrammarParser.RULE_implementationCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 371;
        this.of();
        this.state = 379;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
        switch(la_) {
        case 1:
            this.state = 372;
            this.combinatorialWords();
            this.state = 373;
            this.match(rulePadGrammarParser.SPACE);
            break;

        case 2:
            this.state = 375;
            this.words();
            this.state = 376;
            this.match(rulePadGrammarParser.SPACE);
            break;

        case 3:
            this.state = 378;
            this.match(rulePadGrammarParser.INTERFACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_functions;
    return this;
}

FunctionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionsContext.prototype.constructor = FunctionsContext;

FunctionsContext.prototype.FUNCTION = function() {
    return this.getToken(rulePadGrammarParser.FUNCTION, 0);
};

FunctionsContext.prototype.functionCondition = function() {
    return this.getTypedRuleContext(FunctionConditionContext,0);
};

FunctionsContext.prototype.functionOf = function() {
    return this.getTypedRuleContext(FunctionOfContext,0);
};

FunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterFunctions(this);
	}
};

FunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitFunctions(this);
	}
};




rulePadGrammarParser.FunctionsContext = FunctionsContext;

rulePadGrammarParser.prototype.functions = function() {

    var localctx = new FunctionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, rulePadGrammarParser.RULE_functions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 381;
        this.match(rulePadGrammarParser.FUNCTION);
        this.state = 383;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        if(la_===1) {
            this.state = 382;
            this.functionCondition();

        }
        this.state = 386;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        if(la_===1) {
            this.state = 385;
            this.functionOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_functionOf;
    return this;
}

FunctionOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionOfContext.prototype.constructor = FunctionOfContext;

FunctionOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

FunctionOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

FunctionOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterFunctionOf(this);
	}
};

FunctionOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitFunctionOf(this);
	}
};




rulePadGrammarParser.FunctionOfContext = FunctionOfContext;

rulePadGrammarParser.prototype.functionOf = function() {

    var localctx = new FunctionOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, rulePadGrammarParser.RULE_functionOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 388;
        this.of();
        this.state = 389;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_functionCondition;
    return this;
}

FunctionConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionConditionContext.prototype.constructor = FunctionConditionContext;

FunctionConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

FunctionConditionContext.prototype.functionExpression = function() {
    return this.getTypedRuleContext(FunctionExpressionContext,0);
};

FunctionConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterFunctionCondition(this);
	}
};

FunctionConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitFunctionCondition(this);
	}
};




rulePadGrammarParser.FunctionConditionContext = FunctionConditionContext;

rulePadGrammarParser.prototype.functionCondition = function() {

    var localctx = new FunctionConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, rulePadGrammarParser.RULE_functionCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 391;
        this.withWord();
        this.state = 392;
        this.functionExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_functionExpression;
    this.left = null; // FunctionExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // FunctionExpressionContext
    return this;
}

FunctionExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionExpressionContext.prototype.constructor = FunctionExpressionContext;

FunctionExpressionContext.prototype.LPAREN = function() {
    return this.getToken(rulePadGrammarParser.LPAREN, 0);
};

FunctionExpressionContext.prototype.functionExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionExpressionContext);
    } else {
        return this.getTypedRuleContext(FunctionExpressionContext,i);
    }
};

FunctionExpressionContext.prototype.RPAREN = function() {
    return this.getToken(rulePadGrammarParser.RPAREN, 0);
};

FunctionExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

FunctionExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

FunctionExpressionContext.prototype.visibilities = function() {
    return this.getTypedRuleContext(VisibilitiesContext,0);
};

FunctionExpressionContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

FunctionExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

FunctionExpressionContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

FunctionExpressionContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

FunctionExpressionContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

FunctionExpressionContext.prototype.expressionStatements = function() {
    return this.getTypedRuleContext(ExpressionStatementsContext,0);
};

FunctionExpressionContext.prototype.comments = function() {
    return this.getTypedRuleContext(CommentsContext,0);
};

FunctionExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

FunctionExpressionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

FunctionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterFunctionExpression(this);
	}
};

FunctionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitFunctionExpression(this);
	}
};



rulePadGrammarParser.prototype.functionExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new FunctionExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 64;
    this.enterRecursionRule(localctx, 64, rulePadGrammarParser.RULE_functionExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 411;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.LPAREN:
            this.state = 395;
            this.match(rulePadGrammarParser.LPAREN);
            this.state = 396;
            this.functionExpression(0);
            this.state = 397;
            this.match(rulePadGrammarParser.RPAREN);
            break;
        case rulePadGrammarParser.T__0:
        case rulePadGrammarParser.NAME:
        case rulePadGrammarParser.ANNOTATION:
        case rulePadGrammarParser.PARAMETER:
        case rulePadGrammarParser.TYPES:
        case rulePadGrammarParser.SPECIFIER:
        case rulePadGrammarParser.VISIBILITY:
        case rulePadGrammarParser.ReturnValue:
        case rulePadGrammarParser.DeclarationStatement:
        case rulePadGrammarParser.ExpressionStatement:
            this.state = 409;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case rulePadGrammarParser.ANNOTATION:
                this.state = 399;
                this.annotations();
                break;
            case rulePadGrammarParser.SPECIFIER:
                this.state = 400;
                this.specifiers();
                break;
            case rulePadGrammarParser.VISIBILITY:
                this.state = 401;
                this.visibilities();
                break;
            case rulePadGrammarParser.TYPES:
                this.state = 402;
                this.types();
                break;
            case rulePadGrammarParser.NAME:
                this.state = 403;
                this.names();
                break;
            case rulePadGrammarParser.PARAMETER:
                this.state = 404;
                this.parameters();
                break;
            case rulePadGrammarParser.ReturnValue:
                this.state = 405;
                this.returnValues();
                break;
            case rulePadGrammarParser.DeclarationStatement:
                this.state = 406;
                this.declarationStatements();
                break;
            case rulePadGrammarParser.ExpressionStatement:
                this.state = 407;
                this.expressionStatements();
                break;
            case rulePadGrammarParser.T__0:
                this.state = 408;
                this.comments();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 421;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 419;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new FunctionExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_functionExpression);
                    this.state = 413;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 414;
                    localctx.op = this.binary();
                    this.state = 415;
                    localctx.right = this.functionExpression(4);
                    break;

                case 2:
                    localctx = new FunctionExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_functionExpression);
                    this.state = 417;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 418;
                    this.match(rulePadGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 423;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AbstractFunctionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_abstractFunctions;
    return this;
}

AbstractFunctionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionsContext.prototype.constructor = AbstractFunctionsContext;

AbstractFunctionsContext.prototype.AbstractFunctions = function() {
    return this.getToken(rulePadGrammarParser.AbstractFunctions, 0);
};

AbstractFunctionsContext.prototype.abstractFunctionCondition = function() {
    return this.getTypedRuleContext(AbstractFunctionConditionContext,0);
};

AbstractFunctionsContext.prototype.abstractFunctionOf = function() {
    return this.getTypedRuleContext(AbstractFunctionOfContext,0);
};

AbstractFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterAbstractFunctions(this);
	}
};

AbstractFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitAbstractFunctions(this);
	}
};




rulePadGrammarParser.AbstractFunctionsContext = AbstractFunctionsContext;

rulePadGrammarParser.prototype.abstractFunctions = function() {

    var localctx = new AbstractFunctionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, rulePadGrammarParser.RULE_abstractFunctions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 424;
        this.match(rulePadGrammarParser.AbstractFunctions);
        this.state = 426;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        if(la_===1) {
            this.state = 425;
            this.abstractFunctionCondition();

        }
        this.state = 429;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        if(la_===1) {
            this.state = 428;
            this.abstractFunctionOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractFunctionOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_abstractFunctionOf;
    return this;
}

AbstractFunctionOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionOfContext.prototype.constructor = AbstractFunctionOfContext;

AbstractFunctionOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

AbstractFunctionOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

AbstractFunctionOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterAbstractFunctionOf(this);
	}
};

AbstractFunctionOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitAbstractFunctionOf(this);
	}
};




rulePadGrammarParser.AbstractFunctionOfContext = AbstractFunctionOfContext;

rulePadGrammarParser.prototype.abstractFunctionOf = function() {

    var localctx = new AbstractFunctionOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, rulePadGrammarParser.RULE_abstractFunctionOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 431;
        this.of();
        this.state = 432;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractFunctionConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_abstractFunctionCondition;
    return this;
}

AbstractFunctionConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionConditionContext.prototype.constructor = AbstractFunctionConditionContext;

AbstractFunctionConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

AbstractFunctionConditionContext.prototype.abstractFunctionExpression = function() {
    return this.getTypedRuleContext(AbstractFunctionExpressionContext,0);
};

AbstractFunctionConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterAbstractFunctionCondition(this);
	}
};

AbstractFunctionConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitAbstractFunctionCondition(this);
	}
};




rulePadGrammarParser.AbstractFunctionConditionContext = AbstractFunctionConditionContext;

rulePadGrammarParser.prototype.abstractFunctionCondition = function() {

    var localctx = new AbstractFunctionConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, rulePadGrammarParser.RULE_abstractFunctionCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 434;
        this.withWord();
        this.state = 435;
        this.abstractFunctionExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractFunctionExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_abstractFunctionExpression;
    this.left = null; // AbstractFunctionExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // AbstractFunctionExpressionContext
    return this;
}

AbstractFunctionExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionExpressionContext.prototype.constructor = AbstractFunctionExpressionContext;

AbstractFunctionExpressionContext.prototype.LPAREN = function() {
    return this.getToken(rulePadGrammarParser.LPAREN, 0);
};

AbstractFunctionExpressionContext.prototype.abstractFunctionExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AbstractFunctionExpressionContext);
    } else {
        return this.getTypedRuleContext(AbstractFunctionExpressionContext,i);
    }
};

AbstractFunctionExpressionContext.prototype.RPAREN = function() {
    return this.getToken(rulePadGrammarParser.RPAREN, 0);
};

AbstractFunctionExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

AbstractFunctionExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

AbstractFunctionExpressionContext.prototype.visibilities = function() {
    return this.getTypedRuleContext(VisibilitiesContext,0);
};

AbstractFunctionExpressionContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

AbstractFunctionExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

AbstractFunctionExpressionContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

AbstractFunctionExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

AbstractFunctionExpressionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

AbstractFunctionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterAbstractFunctionExpression(this);
	}
};

AbstractFunctionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitAbstractFunctionExpression(this);
	}
};



rulePadGrammarParser.prototype.abstractFunctionExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AbstractFunctionExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 72;
    this.enterRecursionRule(localctx, 72, rulePadGrammarParser.RULE_abstractFunctionExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 450;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.LPAREN:
            this.state = 438;
            this.match(rulePadGrammarParser.LPAREN);
            this.state = 439;
            this.abstractFunctionExpression(0);
            this.state = 440;
            this.match(rulePadGrammarParser.RPAREN);
            break;
        case rulePadGrammarParser.NAME:
        case rulePadGrammarParser.ANNOTATION:
        case rulePadGrammarParser.PARAMETER:
        case rulePadGrammarParser.TYPES:
        case rulePadGrammarParser.SPECIFIER:
        case rulePadGrammarParser.VISIBILITY:
            this.state = 448;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case rulePadGrammarParser.ANNOTATION:
                this.state = 442;
                this.annotations();
                break;
            case rulePadGrammarParser.SPECIFIER:
                this.state = 443;
                this.specifiers();
                break;
            case rulePadGrammarParser.VISIBILITY:
                this.state = 444;
                this.visibilities();
                break;
            case rulePadGrammarParser.TYPES:
                this.state = 445;
                this.types();
                break;
            case rulePadGrammarParser.NAME:
                this.state = 446;
                this.names();
                break;
            case rulePadGrammarParser.PARAMETER:
                this.state = 447;
                this.parameters();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 460;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 458;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AbstractFunctionExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_abstractFunctionExpression);
                    this.state = 452;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 453;
                    localctx.op = this.binary();
                    this.state = 454;
                    localctx.right = this.abstractFunctionExpression(4);
                    break;

                case 2:
                    localctx = new AbstractFunctionExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_abstractFunctionExpression);
                    this.state = 456;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 457;
                    this.match(rulePadGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 462;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ConstructorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_constructors;
    return this;
}

ConstructorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorsContext.prototype.constructor = ConstructorsContext;

ConstructorsContext.prototype.CONSTRUCTOR = function() {
    return this.getToken(rulePadGrammarParser.CONSTRUCTOR, 0);
};

ConstructorsContext.prototype.constructorCondition = function() {
    return this.getTypedRuleContext(ConstructorConditionContext,0);
};

ConstructorsContext.prototype.constructorOf = function() {
    return this.getTypedRuleContext(ConstructorOfContext,0);
};

ConstructorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterConstructors(this);
	}
};

ConstructorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitConstructors(this);
	}
};




rulePadGrammarParser.ConstructorsContext = ConstructorsContext;

rulePadGrammarParser.prototype.constructors = function() {

    var localctx = new ConstructorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, rulePadGrammarParser.RULE_constructors);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 463;
        this.match(rulePadGrammarParser.CONSTRUCTOR);
        this.state = 465;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        if(la_===1) {
            this.state = 464;
            this.constructorCondition();

        }
        this.state = 468;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        if(la_===1) {
            this.state = 467;
            this.constructorOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_constructorOf;
    return this;
}

ConstructorOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorOfContext.prototype.constructor = ConstructorOfContext;

ConstructorOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ConstructorOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

ConstructorOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterConstructorOf(this);
	}
};

ConstructorOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitConstructorOf(this);
	}
};




rulePadGrammarParser.ConstructorOfContext = ConstructorOfContext;

rulePadGrammarParser.prototype.constructorOf = function() {

    var localctx = new ConstructorOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, rulePadGrammarParser.RULE_constructorOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 470;
        this.of();
        this.state = 471;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_constructorCondition;
    return this;
}

ConstructorConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorConditionContext.prototype.constructor = ConstructorConditionContext;

ConstructorConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

ConstructorConditionContext.prototype.constructorExpression = function() {
    return this.getTypedRuleContext(ConstructorExpressionContext,0);
};

ConstructorConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterConstructorCondition(this);
	}
};

ConstructorConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitConstructorCondition(this);
	}
};




rulePadGrammarParser.ConstructorConditionContext = ConstructorConditionContext;

rulePadGrammarParser.prototype.constructorCondition = function() {

    var localctx = new ConstructorConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, rulePadGrammarParser.RULE_constructorCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 473;
        this.withWord();
        this.state = 474;
        this.constructorExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_constructorExpression;
    this.left = null; // ConstructorExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ConstructorExpressionContext
    return this;
}

ConstructorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorExpressionContext.prototype.constructor = ConstructorExpressionContext;

ConstructorExpressionContext.prototype.LPAREN = function() {
    return this.getToken(rulePadGrammarParser.LPAREN, 0);
};

ConstructorExpressionContext.prototype.constructorExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstructorExpressionContext);
    } else {
        return this.getTypedRuleContext(ConstructorExpressionContext,i);
    }
};

ConstructorExpressionContext.prototype.RPAREN = function() {
    return this.getToken(rulePadGrammarParser.RPAREN, 0);
};

ConstructorExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

ConstructorExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

ConstructorExpressionContext.prototype.visibilities = function() {
    return this.getTypedRuleContext(VisibilitiesContext,0);
};

ConstructorExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

ConstructorExpressionContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

ConstructorExpressionContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

ConstructorExpressionContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

ConstructorExpressionContext.prototype.expressionStatements = function() {
    return this.getTypedRuleContext(ExpressionStatementsContext,0);
};

ConstructorExpressionContext.prototype.comments = function() {
    return this.getTypedRuleContext(CommentsContext,0);
};

ConstructorExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ConstructorExpressionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

ConstructorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterConstructorExpression(this);
	}
};

ConstructorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitConstructorExpression(this);
	}
};



rulePadGrammarParser.prototype.constructorExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ConstructorExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 80;
    this.enterRecursionRule(localctx, 80, rulePadGrammarParser.RULE_constructorExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 492;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.LPAREN:
            this.state = 477;
            this.match(rulePadGrammarParser.LPAREN);
            this.state = 478;
            this.constructorExpression(0);
            this.state = 479;
            this.match(rulePadGrammarParser.RPAREN);
            break;
        case rulePadGrammarParser.T__0:
        case rulePadGrammarParser.NAME:
        case rulePadGrammarParser.ANNOTATION:
        case rulePadGrammarParser.PARAMETER:
        case rulePadGrammarParser.SPECIFIER:
        case rulePadGrammarParser.VISIBILITY:
        case rulePadGrammarParser.ReturnValue:
        case rulePadGrammarParser.DeclarationStatement:
        case rulePadGrammarParser.ExpressionStatement:
            this.state = 490;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case rulePadGrammarParser.ANNOTATION:
                this.state = 481;
                this.annotations();
                break;
            case rulePadGrammarParser.SPECIFIER:
                this.state = 482;
                this.specifiers();
                break;
            case rulePadGrammarParser.VISIBILITY:
                this.state = 483;
                this.visibilities();
                break;
            case rulePadGrammarParser.NAME:
                this.state = 484;
                this.names();
                break;
            case rulePadGrammarParser.PARAMETER:
                this.state = 485;
                this.parameters();
                break;
            case rulePadGrammarParser.ReturnValue:
                this.state = 486;
                this.returnValues();
                break;
            case rulePadGrammarParser.DeclarationStatement:
                this.state = 487;
                this.declarationStatements();
                break;
            case rulePadGrammarParser.ExpressionStatement:
                this.state = 488;
                this.expressionStatements();
                break;
            case rulePadGrammarParser.T__0:
                this.state = 489;
                this.comments();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 502;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,47,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 500;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ConstructorExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_constructorExpression);
                    this.state = 494;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 495;
                    localctx.op = this.binary();
                    this.state = 496;
                    localctx.right = this.constructorExpression(4);
                    break;

                case 2:
                    localctx = new ConstructorExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_constructorExpression);
                    this.state = 498;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 499;
                    this.match(rulePadGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 504;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,47,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_parameters;
    return this;
}

ParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParametersContext.prototype.constructor = ParametersContext;

ParametersContext.prototype.PARAMETER = function() {
    return this.getToken(rulePadGrammarParser.PARAMETER, 0);
};

ParametersContext.prototype.parameterCondition = function() {
    return this.getTypedRuleContext(ParameterConditionContext,0);
};

ParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterParameters(this);
	}
};

ParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitParameters(this);
	}
};




rulePadGrammarParser.ParametersContext = ParametersContext;

rulePadGrammarParser.prototype.parameters = function() {

    var localctx = new ParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, rulePadGrammarParser.RULE_parameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 505;
        this.match(rulePadGrammarParser.PARAMETER);
        this.state = 507;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        if(la_===1) {
            this.state = 506;
            this.parameterCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_parameterCondition;
    return this;
}

ParameterConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterConditionContext.prototype.constructor = ParameterConditionContext;

ParameterConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

ParameterConditionContext.prototype.parameterExpression = function() {
    return this.getTypedRuleContext(ParameterExpressionContext,0);
};

ParameterConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterParameterCondition(this);
	}
};

ParameterConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitParameterCondition(this);
	}
};




rulePadGrammarParser.ParameterConditionContext = ParameterConditionContext;

rulePadGrammarParser.prototype.parameterCondition = function() {

    var localctx = new ParameterConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, rulePadGrammarParser.RULE_parameterCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 509;
        this.withWord();
        this.state = 510;
        this.parameterExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_parameterExpression;
    this.left = null; // ParameterExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ParameterExpressionContext
    return this;
}

ParameterExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterExpressionContext.prototype.constructor = ParameterExpressionContext;

ParameterExpressionContext.prototype.LPAREN = function() {
    return this.getToken(rulePadGrammarParser.LPAREN, 0);
};

ParameterExpressionContext.prototype.parameterExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterExpressionContext);
    } else {
        return this.getTypedRuleContext(ParameterExpressionContext,i);
    }
};

ParameterExpressionContext.prototype.RPAREN = function() {
    return this.getToken(rulePadGrammarParser.RPAREN, 0);
};

ParameterExpressionContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

ParameterExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

ParameterExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ParameterExpressionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

ParameterExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterParameterExpression(this);
	}
};

ParameterExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitParameterExpression(this);
	}
};



rulePadGrammarParser.prototype.parameterExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ParameterExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 86;
    this.enterRecursionRule(localctx, 86, rulePadGrammarParser.RULE_parameterExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 521;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.LPAREN:
            this.state = 513;
            this.match(rulePadGrammarParser.LPAREN);
            this.state = 514;
            this.parameterExpression(0);
            this.state = 515;
            this.match(rulePadGrammarParser.RPAREN);
            break;
        case rulePadGrammarParser.NAME:
        case rulePadGrammarParser.TYPES:
            this.state = 519;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case rulePadGrammarParser.TYPES:
                this.state = 517;
                this.types();
                break;
            case rulePadGrammarParser.NAME:
                this.state = 518;
                this.names();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 531;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 529;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ParameterExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_parameterExpression);
                    this.state = 523;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 524;
                    localctx.op = this.binary();
                    this.state = 525;
                    localctx.right = this.parameterExpression(4);
                    break;

                case 2:
                    localctx = new ParameterExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_parameterExpression);
                    this.state = 527;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 528;
                    this.match(rulePadGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 533;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TypesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_types;
    return this;
}

TypesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypesContext.prototype.constructor = TypesContext;

TypesContext.prototype.TYPES = function() {
    return this.getToken(rulePadGrammarParser.TYPES, 0);
};

TypesContext.prototype.typeCondition = function() {
    return this.getTypedRuleContext(TypeConditionContext,0);
};

TypesContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterTypes(this);
	}
};

TypesContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitTypes(this);
	}
};




rulePadGrammarParser.TypesContext = TypesContext;

rulePadGrammarParser.prototype.types = function() {

    var localctx = new TypesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, rulePadGrammarParser.RULE_types);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 534;
        this.match(rulePadGrammarParser.TYPES);
        this.state = 536;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
        if(la_===1) {
            this.state = 535;
            this.typeCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_typeCondition;
    return this;
}

TypeConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeConditionContext.prototype.constructor = TypeConditionContext;

TypeConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

TypeConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

TypeConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

TypeConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterTypeCondition(this);
	}
};

TypeConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitTypeCondition(this);
	}
};




rulePadGrammarParser.TypeConditionContext = TypeConditionContext;

rulePadGrammarParser.prototype.typeCondition = function() {

    var localctx = new TypeConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, rulePadGrammarParser.RULE_typeCondition);
    try {
        this.state = 544;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 538;
            this.combinatorialWords();
            this.state = 539;
            this.match(rulePadGrammarParser.SPACE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 541;
            this.words();
            this.state = 542;
            this.match(rulePadGrammarParser.SPACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_specifiers;
    return this;
}

SpecifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecifiersContext.prototype.constructor = SpecifiersContext;

SpecifiersContext.prototype.SPECIFIER = function() {
    return this.getToken(rulePadGrammarParser.SPECIFIER, 0);
};

SpecifiersContext.prototype.specifierCondition = function() {
    return this.getTypedRuleContext(SpecifierConditionContext,0);
};

SpecifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterSpecifiers(this);
	}
};

SpecifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitSpecifiers(this);
	}
};




rulePadGrammarParser.SpecifiersContext = SpecifiersContext;

rulePadGrammarParser.prototype.specifiers = function() {

    var localctx = new SpecifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, rulePadGrammarParser.RULE_specifiers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 546;
        this.match(rulePadGrammarParser.SPECIFIER);
        this.state = 548;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        if(la_===1) {
            this.state = 547;
            this.specifierCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecifierConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_specifierCondition;
    return this;
}

SpecifierConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecifierConditionContext.prototype.constructor = SpecifierConditionContext;

SpecifierConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

SpecifierConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

SpecifierConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterSpecifierCondition(this);
	}
};

SpecifierConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitSpecifierCondition(this);
	}
};




rulePadGrammarParser.SpecifierConditionContext = SpecifierConditionContext;

rulePadGrammarParser.prototype.specifierCondition = function() {

    var localctx = new SpecifierConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, rulePadGrammarParser.RULE_specifierCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 550;
        this.words();
        this.state = 551;
        this.match(rulePadGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VisibilitiesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_visibilities;
    return this;
}

VisibilitiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VisibilitiesContext.prototype.constructor = VisibilitiesContext;

VisibilitiesContext.prototype.VISIBILITY = function() {
    return this.getToken(rulePadGrammarParser.VISIBILITY, 0);
};

VisibilitiesContext.prototype.visibilityCondition = function() {
    return this.getTypedRuleContext(VisibilityConditionContext,0);
};

VisibilitiesContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterVisibilities(this);
	}
};

VisibilitiesContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitVisibilities(this);
	}
};




rulePadGrammarParser.VisibilitiesContext = VisibilitiesContext;

rulePadGrammarParser.prototype.visibilities = function() {

    var localctx = new VisibilitiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, rulePadGrammarParser.RULE_visibilities);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 553;
        this.match(rulePadGrammarParser.VISIBILITY);
        this.state = 555;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        if(la_===1) {
            this.state = 554;
            this.visibilityCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VisibilityConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_visibilityCondition;
    return this;
}

VisibilityConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VisibilityConditionContext.prototype.constructor = VisibilityConditionContext;

VisibilityConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

VisibilityConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

VisibilityConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterVisibilityCondition(this);
	}
};

VisibilityConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitVisibilityCondition(this);
	}
};




rulePadGrammarParser.VisibilityConditionContext = VisibilityConditionContext;

rulePadGrammarParser.prototype.visibilityCondition = function() {

    var localctx = new VisibilityConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, rulePadGrammarParser.RULE_visibilityCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 557;
        this.words();
        this.state = 558;
        this.match(rulePadGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnValuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_returnValues;
    return this;
}

ReturnValuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnValuesContext.prototype.constructor = ReturnValuesContext;

ReturnValuesContext.prototype.ReturnValue = function() {
    return this.getToken(rulePadGrammarParser.ReturnValue, 0);
};

ReturnValuesContext.prototype.returnValueCondition = function() {
    return this.getTypedRuleContext(ReturnValueConditionContext,0);
};

ReturnValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterReturnValues(this);
	}
};

ReturnValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitReturnValues(this);
	}
};




rulePadGrammarParser.ReturnValuesContext = ReturnValuesContext;

rulePadGrammarParser.prototype.returnValues = function() {

    var localctx = new ReturnValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, rulePadGrammarParser.RULE_returnValues);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 560;
        this.match(rulePadGrammarParser.ReturnValue);
        this.state = 562;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        if(la_===1) {
            this.state = 561;
            this.returnValueCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnValueConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_returnValueCondition;
    return this;
}

ReturnValueConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnValueConditionContext.prototype.constructor = ReturnValueConditionContext;

ReturnValueConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

ReturnValueConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

ReturnValueConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterReturnValueCondition(this);
	}
};

ReturnValueConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitReturnValueCondition(this);
	}
};




rulePadGrammarParser.ReturnValueConditionContext = ReturnValueConditionContext;

rulePadGrammarParser.prototype.returnValueCondition = function() {

    var localctx = new ReturnValueConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, rulePadGrammarParser.RULE_returnValueCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 564;
        this.combinatorialWords();
        this.state = 565;
        this.match(rulePadGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationStatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_declarationStatements;
    return this;
}

DeclarationStatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementsContext.prototype.constructor = DeclarationStatementsContext;

DeclarationStatementsContext.prototype.DeclarationStatement = function() {
    return this.getToken(rulePadGrammarParser.DeclarationStatement, 0);
};

DeclarationStatementsContext.prototype.declarationStatementCondition = function() {
    return this.getTypedRuleContext(DeclarationStatementConditionContext,0);
};

DeclarationStatementsContext.prototype.declarationStatementOf = function() {
    return this.getTypedRuleContext(DeclarationStatementOfContext,0);
};

DeclarationStatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterDeclarationStatements(this);
	}
};

DeclarationStatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitDeclarationStatements(this);
	}
};




rulePadGrammarParser.DeclarationStatementsContext = DeclarationStatementsContext;

rulePadGrammarParser.prototype.declarationStatements = function() {

    var localctx = new DeclarationStatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, rulePadGrammarParser.RULE_declarationStatements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 567;
        this.match(rulePadGrammarParser.DeclarationStatement);
        this.state = 569;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
        if(la_===1) {
            this.state = 568;
            this.declarationStatementCondition();

        }
        this.state = 572;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
        if(la_===1) {
            this.state = 571;
            this.declarationStatementOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationStatementOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_declarationStatementOf;
    return this;
}

DeclarationStatementOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementOfContext.prototype.constructor = DeclarationStatementOfContext;

DeclarationStatementOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

DeclarationStatementOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

DeclarationStatementOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

DeclarationStatementOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

DeclarationStatementOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterDeclarationStatementOf(this);
	}
};

DeclarationStatementOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitDeclarationStatementOf(this);
	}
};




rulePadGrammarParser.DeclarationStatementOfContext = DeclarationStatementOfContext;

rulePadGrammarParser.prototype.declarationStatementOf = function() {

    var localctx = new DeclarationStatementOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, rulePadGrammarParser.RULE_declarationStatementOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 574;
        this.of();
        this.state = 578;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.CLASSES:
            this.state = 575;
            this.classes();
            break;
        case rulePadGrammarParser.FUNCTION:
            this.state = 576;
            this.functions();
            break;
        case rulePadGrammarParser.CONSTRUCTOR:
            this.state = 577;
            this.constructors();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationStatementConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_declarationStatementCondition;
    return this;
}

DeclarationStatementConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementConditionContext.prototype.constructor = DeclarationStatementConditionContext;

DeclarationStatementConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

DeclarationStatementConditionContext.prototype.declarationStatementExpression = function() {
    return this.getTypedRuleContext(DeclarationStatementExpressionContext,0);
};

DeclarationStatementConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterDeclarationStatementCondition(this);
	}
};

DeclarationStatementConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitDeclarationStatementCondition(this);
	}
};




rulePadGrammarParser.DeclarationStatementConditionContext = DeclarationStatementConditionContext;

rulePadGrammarParser.prototype.declarationStatementCondition = function() {

    var localctx = new DeclarationStatementConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, rulePadGrammarParser.RULE_declarationStatementCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 580;
        this.withWord();
        this.state = 581;
        this.declarationStatementExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationStatementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_declarationStatementExpression;
    this.left = null; // DeclarationStatementExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // DeclarationStatementExpressionContext
    return this;
}

DeclarationStatementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementExpressionContext.prototype.constructor = DeclarationStatementExpressionContext;

DeclarationStatementExpressionContext.prototype.LPAREN = function() {
    return this.getToken(rulePadGrammarParser.LPAREN, 0);
};

DeclarationStatementExpressionContext.prototype.declarationStatementExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationStatementExpressionContext);
    } else {
        return this.getTypedRuleContext(DeclarationStatementExpressionContext,i);
    }
};

DeclarationStatementExpressionContext.prototype.RPAREN = function() {
    return this.getToken(rulePadGrammarParser.RPAREN, 0);
};

DeclarationStatementExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

DeclarationStatementExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

DeclarationStatementExpressionContext.prototype.visibilities = function() {
    return this.getTypedRuleContext(VisibilitiesContext,0);
};

DeclarationStatementExpressionContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

DeclarationStatementExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

DeclarationStatementExpressionContext.prototype.initialValues = function() {
    return this.getTypedRuleContext(InitialValuesContext,0);
};

DeclarationStatementExpressionContext.prototype.comments = function() {
    return this.getTypedRuleContext(CommentsContext,0);
};

DeclarationStatementExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

DeclarationStatementExpressionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

DeclarationStatementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterDeclarationStatementExpression(this);
	}
};

DeclarationStatementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitDeclarationStatementExpression(this);
	}
};



rulePadGrammarParser.prototype.declarationStatementExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new DeclarationStatementExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 110;
    this.enterRecursionRule(localctx, 110, rulePadGrammarParser.RULE_declarationStatementExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 597;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.LPAREN:
            this.state = 584;
            this.match(rulePadGrammarParser.LPAREN);
            this.state = 585;
            this.declarationStatementExpression(0);
            this.state = 586;
            this.match(rulePadGrammarParser.RPAREN);
            break;
        case rulePadGrammarParser.T__0:
        case rulePadGrammarParser.NAME:
        case rulePadGrammarParser.ANNOTATION:
        case rulePadGrammarParser.TYPES:
        case rulePadGrammarParser.SPECIFIER:
        case rulePadGrammarParser.VISIBILITY:
        case rulePadGrammarParser.InitialValue:
            this.state = 595;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case rulePadGrammarParser.ANNOTATION:
                this.state = 588;
                this.annotations();
                break;
            case rulePadGrammarParser.SPECIFIER:
                this.state = 589;
                this.specifiers();
                break;
            case rulePadGrammarParser.VISIBILITY:
                this.state = 590;
                this.visibilities();
                break;
            case rulePadGrammarParser.TYPES:
                this.state = 591;
                this.types();
                break;
            case rulePadGrammarParser.NAME:
                this.state = 592;
                this.names();
                break;
            case rulePadGrammarParser.InitialValue:
                this.state = 593;
                this.initialValues();
                break;
            case rulePadGrammarParser.T__0:
                this.state = 594;
                this.comments();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 607;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 605;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new DeclarationStatementExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_declarationStatementExpression);
                    this.state = 599;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 600;
                    localctx.op = this.binary();
                    this.state = 601;
                    localctx.right = this.declarationStatementExpression(4);
                    break;

                case 2:
                    localctx = new DeclarationStatementExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_declarationStatementExpression);
                    this.state = 603;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 604;
                    this.match(rulePadGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 609;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ExpressionStatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_expressionStatements;
    return this;
}

ExpressionStatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementsContext.prototype.constructor = ExpressionStatementsContext;

ExpressionStatementsContext.prototype.ExpressionStatement = function() {
    return this.getToken(rulePadGrammarParser.ExpressionStatement, 0);
};

ExpressionStatementsContext.prototype.expressionStatementCondition = function() {
    return this.getTypedRuleContext(ExpressionStatementConditionContext,0);
};

ExpressionStatementsContext.prototype.expressionStatementOf = function() {
    return this.getTypedRuleContext(ExpressionStatementOfContext,0);
};

ExpressionStatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterExpressionStatements(this);
	}
};

ExpressionStatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitExpressionStatements(this);
	}
};




rulePadGrammarParser.ExpressionStatementsContext = ExpressionStatementsContext;

rulePadGrammarParser.prototype.expressionStatements = function() {

    var localctx = new ExpressionStatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, rulePadGrammarParser.RULE_expressionStatements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 610;
        this.match(rulePadGrammarParser.ExpressionStatement);
        this.state = 612;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        if(la_===1) {
            this.state = 611;
            this.expressionStatementCondition();

        }
        this.state = 615;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        if(la_===1) {
            this.state = 614;
            this.expressionStatementOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_expressionStatementOf;
    return this;
}

ExpressionStatementOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementOfContext.prototype.constructor = ExpressionStatementOfContext;

ExpressionStatementOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ExpressionStatementOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

ExpressionStatementOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

ExpressionStatementOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterExpressionStatementOf(this);
	}
};

ExpressionStatementOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitExpressionStatementOf(this);
	}
};




rulePadGrammarParser.ExpressionStatementOfContext = ExpressionStatementOfContext;

rulePadGrammarParser.prototype.expressionStatementOf = function() {

    var localctx = new ExpressionStatementOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, rulePadGrammarParser.RULE_expressionStatementOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 617;
        this.of();
        this.state = 621;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        switch(la_) {
        case 1:
            this.state = 618;
            this.functions();
            break;

        case 2:
            this.state = 619;
            this.constructors();
            break;

        case 3:
            this.state = 620;
            this.constructors();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_expressionStatementCondition;
    return this;
}

ExpressionStatementConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementConditionContext.prototype.constructor = ExpressionStatementConditionContext;

ExpressionStatementConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

ExpressionStatementConditionContext.prototype.expressionStatementExpression = function() {
    return this.getTypedRuleContext(ExpressionStatementExpressionContext,0);
};

ExpressionStatementConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterExpressionStatementCondition(this);
	}
};

ExpressionStatementConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitExpressionStatementCondition(this);
	}
};




rulePadGrammarParser.ExpressionStatementConditionContext = ExpressionStatementConditionContext;

rulePadGrammarParser.prototype.expressionStatementCondition = function() {

    var localctx = new ExpressionStatementConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, rulePadGrammarParser.RULE_expressionStatementCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 623;
        this.withWord();
        this.state = 624;
        this.expressionStatementExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_expressionStatementExpression;
    this.left = null; // ExpressionStatementExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ExpressionStatementExpressionContext
    return this;
}

ExpressionStatementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementExpressionContext.prototype.constructor = ExpressionStatementExpressionContext;

ExpressionStatementExpressionContext.prototype.LPAREN = function() {
    return this.getToken(rulePadGrammarParser.LPAREN, 0);
};

ExpressionStatementExpressionContext.prototype.expressionStatementExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionStatementExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionStatementExpressionContext,i);
    }
};

ExpressionStatementExpressionContext.prototype.RPAREN = function() {
    return this.getToken(rulePadGrammarParser.RPAREN, 0);
};

ExpressionStatementExpressionContext.prototype.comments = function() {
    return this.getTypedRuleContext(CommentsContext,0);
};

ExpressionStatementExpressionContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

ExpressionStatementExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ExpressionStatementExpressionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

ExpressionStatementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterExpressionStatementExpression(this);
	}
};

ExpressionStatementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitExpressionStatementExpression(this);
	}
};



rulePadGrammarParser.prototype.expressionStatementExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionStatementExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 118;
    this.enterRecursionRule(localctx, 118, rulePadGrammarParser.RULE_expressionStatementExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 635;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.LPAREN:
            this.state = 627;
            this.match(rulePadGrammarParser.LPAREN);
            this.state = 628;
            this.expressionStatementExpression(0);
            this.state = 629;
            this.match(rulePadGrammarParser.RPAREN);
            break;
        case rulePadGrammarParser.T__0:
        case rulePadGrammarParser.VALUE:
            this.state = 633;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case rulePadGrammarParser.T__0:
                this.state = 631;
                this.comments();
                break;
            case rulePadGrammarParser.VALUE:
                this.state = 632;
                this.value();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 645;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 643;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionStatementExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_expressionStatementExpression);
                    this.state = 637;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 638;
                    localctx.op = this.binary();
                    this.state = 639;
                    localctx.right = this.expressionStatementExpression(4);
                    break;

                case 2:
                    localctx = new ExpressionStatementExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_expressionStatementExpression);
                    this.state = 641;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 642;
                    this.match(rulePadGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 647;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_value;
    return this;
}

ValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueContext.prototype.constructor = ValueContext;

ValueContext.prototype.VALUE = function() {
    return this.getToken(rulePadGrammarParser.VALUE, 0);
};

ValueContext.prototype.valueCondition = function() {
    return this.getTypedRuleContext(ValueConditionContext,0);
};

ValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterValue(this);
	}
};

ValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitValue(this);
	}
};




rulePadGrammarParser.ValueContext = ValueContext;

rulePadGrammarParser.prototype.value = function() {

    var localctx = new ValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, rulePadGrammarParser.RULE_value);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 648;
        this.match(rulePadGrammarParser.VALUE);
        this.state = 650;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        if(la_===1) {
            this.state = 649;
            this.valueCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_valueCondition;
    return this;
}

ValueConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueConditionContext.prototype.constructor = ValueConditionContext;

ValueConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

ValueConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

ValueConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterValueCondition(this);
	}
};

ValueConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitValueCondition(this);
	}
};




rulePadGrammarParser.ValueConditionContext = ValueConditionContext;

rulePadGrammarParser.prototype.valueCondition = function() {

    var localctx = new ValueConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, rulePadGrammarParser.RULE_valueCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 652;
        this.combinatorialWords();
        this.state = 653;
        this.match(rulePadGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitialValuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_initialValues;
    return this;
}

InitialValuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitialValuesContext.prototype.constructor = InitialValuesContext;

InitialValuesContext.prototype.InitialValue = function() {
    return this.getToken(rulePadGrammarParser.InitialValue, 0);
};

InitialValuesContext.prototype.initialValueCondition = function() {
    return this.getTypedRuleContext(InitialValueConditionContext,0);
};

InitialValuesContext.prototype.initialValueOf = function() {
    return this.getTypedRuleContext(InitialValueOfContext,0);
};

InitialValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterInitialValues(this);
	}
};

InitialValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitInitialValues(this);
	}
};




rulePadGrammarParser.InitialValuesContext = InitialValuesContext;

rulePadGrammarParser.prototype.initialValues = function() {

    var localctx = new InitialValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, rulePadGrammarParser.RULE_initialValues);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 655;
        this.match(rulePadGrammarParser.InitialValue);
        this.state = 657;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        if(la_===1) {
            this.state = 656;
            this.initialValueCondition();

        }
        this.state = 660;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        if(la_===1) {
            this.state = 659;
            this.initialValueOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitialValueOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_initialValueOf;
    return this;
}

InitialValueOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitialValueOfContext.prototype.constructor = InitialValueOfContext;

InitialValueOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

InitialValueOfContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

InitialValueOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterInitialValueOf(this);
	}
};

InitialValueOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitInitialValueOf(this);
	}
};




rulePadGrammarParser.InitialValueOfContext = InitialValueOfContext;

rulePadGrammarParser.prototype.initialValueOf = function() {

    var localctx = new InitialValueOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, rulePadGrammarParser.RULE_initialValueOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 662;
        this.of();
        this.state = 663;
        this.declarationStatements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitialValueConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_initialValueCondition;
    return this;
}

InitialValueConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitialValueConditionContext.prototype.constructor = InitialValueConditionContext;

InitialValueConditionContext.prototype.combinatorialWords = function() {
    return this.getTypedRuleContext(CombinatorialWordsContext,0);
};

InitialValueConditionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

InitialValueConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterInitialValueCondition(this);
	}
};

InitialValueConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitInitialValueCondition(this);
	}
};




rulePadGrammarParser.InitialValueConditionContext = InitialValueConditionContext;

rulePadGrammarParser.prototype.initialValueCondition = function() {

    var localctx = new InitialValueConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, rulePadGrammarParser.RULE_initialValueCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 665;
        this.combinatorialWords();
        this.state = 666;
        this.match(rulePadGrammarParser.SPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_classes;
    return this;
}

ClassesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassesContext.prototype.constructor = ClassesContext;

ClassesContext.prototype.CLASSES = function() {
    return this.getToken(rulePadGrammarParser.CLASSES, 0);
};

ClassesContext.prototype.classCondition = function() {
    return this.getTypedRuleContext(ClassConditionContext,0);
};

ClassesContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterClasses(this);
	}
};

ClassesContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitClasses(this);
	}
};




rulePadGrammarParser.ClassesContext = ClassesContext;

rulePadGrammarParser.prototype.classes = function() {

    var localctx = new ClassesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, rulePadGrammarParser.RULE_classes);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 668;
        this.match(rulePadGrammarParser.CLASSES);
        this.state = 670;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        if(la_===1) {
            this.state = 669;
            this.classCondition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_classCondition;
    return this;
}

ClassConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassConditionContext.prototype.constructor = ClassConditionContext;

ClassConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

ClassConditionContext.prototype.classExpression = function() {
    return this.getTypedRuleContext(ClassExpressionContext,0);
};

ClassConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterClassCondition(this);
	}
};

ClassConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitClassCondition(this);
	}
};




rulePadGrammarParser.ClassConditionContext = ClassConditionContext;

rulePadGrammarParser.prototype.classCondition = function() {

    var localctx = new ClassConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, rulePadGrammarParser.RULE_classCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 672;
        this.withWord();
        this.state = 673;
        this.classExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_classExpression;
    this.left = null; // ClassExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ClassExpressionContext
    return this;
}

ClassExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassExpressionContext.prototype.constructor = ClassExpressionContext;

ClassExpressionContext.prototype.LPAREN = function() {
    return this.getToken(rulePadGrammarParser.LPAREN, 0);
};

ClassExpressionContext.prototype.classExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassExpressionContext);
    } else {
        return this.getTypedRuleContext(ClassExpressionContext,i);
    }
};

ClassExpressionContext.prototype.RPAREN = function() {
    return this.getToken(rulePadGrammarParser.RPAREN, 0);
};

ClassExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

ClassExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

ClassExpressionContext.prototype.visibilities = function() {
    return this.getTypedRuleContext(VisibilitiesContext,0);
};

ClassExpressionContext.prototype.classNames = function() {
    return this.getTypedRuleContext(ClassNamesContext,0);
};

ClassExpressionContext.prototype.extensions = function() {
    return this.getTypedRuleContext(ExtensionsContext,0);
};

ClassExpressionContext.prototype.implementations = function() {
    return this.getTypedRuleContext(ImplementationsContext,0);
};

ClassExpressionContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

ClassExpressionContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

ClassExpressionContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

ClassExpressionContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

ClassExpressionContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

ClassExpressionContext.prototype.comments = function() {
    return this.getTypedRuleContext(CommentsContext,0);
};

ClassExpressionContext.prototype.subclasses = function() {
    return this.getTypedRuleContext(SubclassesContext,0);
};

ClassExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ClassExpressionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

ClassExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterClassExpression(this);
	}
};

ClassExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitClassExpression(this);
	}
};



rulePadGrammarParser.prototype.classExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ClassExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 134;
    this.enterRecursionRule(localctx, 134, rulePadGrammarParser.RULE_classExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 695;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case rulePadGrammarParser.LPAREN:
            this.state = 676;
            this.match(rulePadGrammarParser.LPAREN);
            this.state = 677;
            this.classExpression(0);
            this.state = 678;
            this.match(rulePadGrammarParser.RPAREN);
            break;
        case rulePadGrammarParser.T__0:
        case rulePadGrammarParser.NAME:
        case rulePadGrammarParser.ANNOTATION:
        case rulePadGrammarParser.EXTENSION:
        case rulePadGrammarParser.IMPLEMENTATION:
        case rulePadGrammarParser.FUNCTION:
        case rulePadGrammarParser.AbstractFunctions:
        case rulePadGrammarParser.CONSTRUCTOR:
        case rulePadGrammarParser.SPECIFIER:
        case rulePadGrammarParser.VISIBILITY:
        case rulePadGrammarParser.ReturnValue:
        case rulePadGrammarParser.DeclarationStatement:
        case rulePadGrammarParser.SUBCLASSES:
            this.state = 693;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case rulePadGrammarParser.ANNOTATION:
                this.state = 680;
                this.annotations();
                break;
            case rulePadGrammarParser.SPECIFIER:
                this.state = 681;
                this.specifiers();
                break;
            case rulePadGrammarParser.VISIBILITY:
                this.state = 682;
                this.visibilities();
                break;
            case rulePadGrammarParser.NAME:
                this.state = 683;
                this.classNames();
                break;
            case rulePadGrammarParser.EXTENSION:
                this.state = 684;
                this.extensions();
                break;
            case rulePadGrammarParser.IMPLEMENTATION:
                this.state = 685;
                this.implementations();
                break;
            case rulePadGrammarParser.FUNCTION:
                this.state = 686;
                this.functions();
                break;
            case rulePadGrammarParser.AbstractFunctions:
                this.state = 687;
                this.abstractFunctions();
                break;
            case rulePadGrammarParser.CONSTRUCTOR:
                this.state = 688;
                this.constructors();
                break;
            case rulePadGrammarParser.DeclarationStatement:
                this.state = 689;
                this.declarationStatements();
                break;
            case rulePadGrammarParser.ReturnValue:
                this.state = 690;
                this.returnValues();
                break;
            case rulePadGrammarParser.T__0:
                this.state = 691;
                this.comments();
                break;
            case rulePadGrammarParser.SUBCLASSES:
                this.state = 692;
                this.subclasses();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 705;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,79,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 703;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ClassExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_classExpression);
                    this.state = 697;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 698;
                    localctx.op = this.binary();
                    this.state = 699;
                    localctx.right = this.classExpression(4);
                    break;

                case 2:
                    localctx = new ClassExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_classExpression);
                    this.state = 701;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 702;
                    this.match(rulePadGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 707;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,79,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function SubclassesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_subclasses;
    return this;
}

SubclassesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubclassesContext.prototype.constructor = SubclassesContext;

SubclassesContext.prototype.SUBCLASSES = function() {
    return this.getToken(rulePadGrammarParser.SUBCLASSES, 0);
};

SubclassesContext.prototype.subclassCondition = function() {
    return this.getTypedRuleContext(SubclassConditionContext,0);
};

SubclassesContext.prototype.subclassOf = function() {
    return this.getTypedRuleContext(SubclassOfContext,0);
};

SubclassesContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterSubclasses(this);
	}
};

SubclassesContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitSubclasses(this);
	}
};




rulePadGrammarParser.SubclassesContext = SubclassesContext;

rulePadGrammarParser.prototype.subclasses = function() {

    var localctx = new SubclassesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, rulePadGrammarParser.RULE_subclasses);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 708;
        this.match(rulePadGrammarParser.SUBCLASSES);
        this.state = 710;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
        if(la_===1) {
            this.state = 709;
            this.subclassCondition();

        }
        this.state = 713;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
        if(la_===1) {
            this.state = 712;
            this.subclassOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubclassOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_subclassOf;
    return this;
}

SubclassOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubclassOfContext.prototype.constructor = SubclassOfContext;

SubclassOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

SubclassOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

SubclassOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterSubclassOf(this);
	}
};

SubclassOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitSubclassOf(this);
	}
};




rulePadGrammarParser.SubclassOfContext = SubclassOfContext;

rulePadGrammarParser.prototype.subclassOf = function() {

    var localctx = new SubclassOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, rulePadGrammarParser.RULE_subclassOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 715;
        this.of();
        this.state = 716;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubclassConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_subclassCondition;
    return this;
}

SubclassConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubclassConditionContext.prototype.constructor = SubclassConditionContext;

SubclassConditionContext.prototype.withWord = function() {
    return this.getTypedRuleContext(WithWordContext,0);
};

SubclassConditionContext.prototype.subclassExpression = function() {
    return this.getTypedRuleContext(SubclassExpressionContext,0);
};

SubclassConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterSubclassCondition(this);
	}
};

SubclassConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitSubclassCondition(this);
	}
};




rulePadGrammarParser.SubclassConditionContext = SubclassConditionContext;

rulePadGrammarParser.prototype.subclassCondition = function() {

    var localctx = new SubclassConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, rulePadGrammarParser.RULE_subclassCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 718;
        this.withWord();
        this.state = 719;
        this.subclassExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubclassExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = rulePadGrammarParser.RULE_subclassExpression;
    this.left = null; // SubclassExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // SubclassExpressionContext
    return this;
}

SubclassExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubclassExpressionContext.prototype.constructor = SubclassExpressionContext;

SubclassExpressionContext.prototype.LPAREN = function() {
    return this.getToken(rulePadGrammarParser.LPAREN, 0);
};

SubclassExpressionContext.prototype.subclassExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SubclassExpressionContext);
    } else {
        return this.getTypedRuleContext(SubclassExpressionContext,i);
    }
};

SubclassExpressionContext.prototype.RPAREN = function() {
    return this.getToken(rulePadGrammarParser.RPAREN, 0);
};

SubclassExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

SubclassExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

SubclassExpressionContext.prototype.visibilities = function() {
    return this.getTypedRuleContext(VisibilitiesContext,0);
};

SubclassExpressionContext.prototype.classNames = function() {
    return this.getTypedRuleContext(ClassNamesContext,0);
};

SubclassExpressionContext.prototype.extensions = function() {
    return this.getTypedRuleContext(ExtensionsContext,0);
};

SubclassExpressionContext.prototype.implementations = function() {
    return this.getTypedRuleContext(ImplementationsContext,0);
};

SubclassExpressionContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

SubclassExpressionContext.prototype.subclasses = function() {
    return this.getTypedRuleContext(SubclassesContext,0);
};

SubclassExpressionContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

SubclassExpressionContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

SubclassExpressionContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

SubclassExpressionContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

SubclassExpressionContext.prototype.comments = function() {
    return this.getTypedRuleContext(CommentsContext,0);
};

SubclassExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

SubclassExpressionContext.prototype.SPACE = function() {
    return this.getToken(rulePadGrammarParser.SPACE, 0);
};

SubclassExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.enterSubclassExpression(this);
	}
};

SubclassExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof rulePadGrammarListener ) {
        listener.exitSubclassExpression(this);
	}
};



rulePadGrammarParser.prototype.subclassExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new SubclassExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 142;
    this.enterRecursionRule(localctx, 142, rulePadGrammarParser.RULE_subclassExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 742;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
        switch(la_) {
        case 1:
            this.state = 722;
            this.match(rulePadGrammarParser.LPAREN);
            this.state = 723;
            this.subclassExpression(0);
            this.state = 724;
            this.match(rulePadGrammarParser.RPAREN);
            break;

        case 2:
            this.state = 740;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
            switch(la_) {
            case 1:
                this.state = 726;
                this.annotations();
                break;

            case 2:
                this.state = 727;
                this.specifiers();
                break;

            case 3:
                this.state = 728;
                this.visibilities();
                break;

            case 4:
                this.state = 729;
                this.classNames();
                break;

            case 5:
                this.state = 730;
                this.extensions();
                break;

            case 6:
                this.state = 731;
                this.implementations();
                break;

            case 7:
                this.state = 732;
                this.functions();
                break;

            case 8:
                this.state = 733;
                this.subclasses();
                break;

            case 9:
                break;

            case 10:
                this.state = 735;
                this.abstractFunctions();
                break;

            case 11:
                this.state = 736;
                this.constructors();
                break;

            case 12:
                this.state = 737;
                this.declarationStatements();
                break;

            case 13:
                this.state = 738;
                this.returnValues();
                break;

            case 14:
                this.state = 739;
                this.comments();
                break;

            }
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 752;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,85,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 750;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new SubclassExpressionContext(this, _parentctx, _parentState);
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_subclassExpression);
                    this.state = 744;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 745;
                    localctx.op = this.binary();
                    this.state = 746;
                    localctx.right = this.subclassExpression(4);
                    break;

                case 2:
                    localctx = new SubclassExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, rulePadGrammarParser.RULE_subclassExpression);
                    this.state = 748;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 749;
                    this.match(rulePadGrammarParser.SPACE);
                    break;

                } 
            }
            this.state = 754;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,85,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


rulePadGrammarParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 32:
			return this.functionExpression_sempred(localctx, predIndex);
	case 36:
			return this.abstractFunctionExpression_sempred(localctx, predIndex);
	case 40:
			return this.constructorExpression_sempred(localctx, predIndex);
	case 43:
			return this.parameterExpression_sempred(localctx, predIndex);
	case 55:
			return this.declarationStatementExpression_sempred(localctx, predIndex);
	case 59:
			return this.expressionStatementExpression_sempred(localctx, predIndex);
	case 67:
			return this.classExpression_sempred(localctx, predIndex);
	case 71:
			return this.subclassExpression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

rulePadGrammarParser.prototype.functionExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 3);
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

rulePadGrammarParser.prototype.abstractFunctionExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 3);
		case 3:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

rulePadGrammarParser.prototype.constructorExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return this.precpred(this._ctx, 3);
		case 5:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

rulePadGrammarParser.prototype.parameterExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.precpred(this._ctx, 3);
		case 7:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

rulePadGrammarParser.prototype.declarationStatementExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.precpred(this._ctx, 3);
		case 9:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

rulePadGrammarParser.prototype.expressionStatementExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 10:
			return this.precpred(this._ctx, 3);
		case 11:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

rulePadGrammarParser.prototype.classExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 12:
			return this.precpred(this._ctx, 3);
		case 13:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

rulePadGrammarParser.prototype.subclassExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 14:
			return this.precpred(this._ctx, 3);
		case 15:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.rulePadGrammarParser = rulePadGrammarParser;
