// Generated from myGrammar.g4 by ANTLR 4.7.1
// jshint ignore: start
/* eslint-disable */
var antlr4 = require('antlr4/index');
var myGrammarListener = require('./myGrammarListener').myGrammarListener;
var grammarFileName = "myGrammar.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003*\u03f8\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0003\u0002\u0007\u0002",
    "\u00b6\n\u0002\f\u0002\u000e\u0002\u00b9\u000b\u0002\u0003\u0002\u0005",
    "\u0002\u00bc\n\u0002\u0003\u0002\u0005\u0002\u00bf\n\u0002\u0003\u0002",
    "\u0007\u0002\u00c2\n\u0002\f\u0002\u000e\u0002\u00c5\u000b\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0005\u0003\u00cb\n\u0003",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0005\u0004\u00fd\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u012f\n\u0005\u0003\u0006",
    "\u0003\u0006\u0006\u0006\u0133\n\u0006\r\u0006\u000e\u0006\u0134\u0003",
    "\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\t\u0003",
    "\t\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\r\u0003",
    "\r\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u0010\u0003",
    "\u0010\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0013\u0003",
    "\u0013\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0005\u0015\u0157",
    "\n\u0015\u0003\u0016\u0003\u0016\u0005\u0016\u015b\n\u0016\u0003\u0016",
    "\u0005\u0016\u015e\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u016c\n\u0017\u0003\u0018",
    "\u0003\u0018\u0005\u0018\u0170\n\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0005\u0018\u0176\n\u0018\u0003\u0018\u0003\u0018",
    "\u0005\u0018\u017a\n\u0018\u0003\u0019\u0003\u0019\u0005\u0019\u017e",
    "\n\u0019\u0003\u0019\u0005\u0019\u0181\n\u0019\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0189\n",
    "\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u018e\n\u001b",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0005\u001c\u0198\n\u001c\u0003\u001c\u0005",
    "\u001c\u019b\n\u001c\u0005\u001c\u019d\n\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0007\u001c\u01a3\n\u001c\f\u001c\u000e\u001c",
    "\u01a6\u000b\u001c\u0003\u001d\u0003\u001d\u0005\u001d\u01aa\n\u001d",
    "\u0003\u001d\u0005\u001d\u01ad\n\u001d\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001f\u0003\u001f\u0005\u001f\u01b4\n\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0005\u001f\u01b9\n\u001f\u0003 \u0003 \u0005",
    " \u01bd\n \u0003 \u0005 \u01c0\n \u0003!\u0003!\u0003!\u0003\"\u0003",
    "\"\u0005\"\u01c7\n\"\u0003\"\u0003\"\u0003\"\u0005\"\u01cc\n\"\u0003",
    "#\u0003#\u0005#\u01d0\n#\u0003#\u0005#\u01d3\n#\u0003$\u0003$\u0003",
    "$\u0003%\u0003%\u0003%\u0005%\u01db\n%\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u01ea",
    "\n&\u0003&\u0005&\u01ed\n&\u0005&\u01ef\n&\u0003&\u0003&\u0003&\u0003",
    "&\u0007&\u01f5\n&\f&\u000e&\u01f8\u000b&\u0003\'\u0003\'\u0005\'\u01fc",
    "\n\'\u0003\'\u0005\'\u01ff\n\'\u0003(\u0003(\u0003(\u0003)\u0003)\u0003",
    ")\u0005)\u0207\n)\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0005*\u0213\n*\u0003*\u0005*\u0216\n*\u0005*\u0218",
    "\n*\u0003*\u0003*\u0003*\u0003*\u0007*\u021e\n*\f*\u000e*\u0221\u000b",
    "*\u0003+\u0003+\u0005+\u0225\n+\u0003+\u0005+\u0228\n+\u0003,\u0003",
    ",\u0003,\u0003-\u0003-\u0003-\u0005-\u0230\n-\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u023e",
    "\n.\u0003.\u0005.\u0241\n.\u0005.\u0243\n.\u0003.\u0003.\u0003.\u0003",
    ".\u0007.\u0249\n.\f.\u000e.\u024c\u000b.\u0003/\u0003/\u0005/\u0250",
    "\n/\u0003/\u0005/\u0253\n/\u00030\u00030\u00030\u00030\u00050\u0259",
    "\n0\u00031\u00031\u00031\u00051\u025e\n1\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00052\u0268\n2\u00032\u00052\u026b\n",
    "2\u00052\u026d\n2\u00032\u00032\u00032\u00032\u00072\u0273\n2\f2\u000e",
    "2\u0276\u000b2\u00033\u00033\u00053\u027a\n3\u00033\u00053\u027d\n3",
    "\u00034\u00034\u00034\u00054\u0282\n4\u00035\u00035\u00055\u0286\n5",
    "\u00035\u00035\u00035\u00055\u028b\n5\u00036\u00036\u00056\u028f\n6",
    "\u00036\u00056\u0292\n6\u00037\u00037\u00037\u00037\u00037\u00037\u0005",
    "7\u029a\n7\u00038\u00038\u00058\u029e\n8\u00038\u00038\u00038\u0005",
    "8\u02a3\n8\u00039\u00039\u00059\u02a7\n9\u00039\u00059\u02aa\n9\u0003",
    ":\u0003:\u0003:\u0003;\u0003;\u0003;\u0005;\u02b2\n;\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0005<\u02bc\n<\u0003<\u0005<\u02bf",
    "\n<\u0005<\u02c1\n<\u0003<\u0003<\u0003<\u0003<\u0007<\u02c7\n<\f<\u000e",
    "<\u02ca\u000b<\u0003=\u0003=\u0005=\u02ce\n=\u0003=\u0005=\u02d1\n=",
    "\u0003>\u0003>\u0003>\u0003>\u0005>\u02d7\n>\u0003?\u0003?\u0003?\u0005",
    "?\u02dc\n?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0005@\u02e9\n@\u0003@\u0005@\u02ec\n@\u0005@\u02ee",
    "\n@\u0003@\u0003@\u0003@\u0003@\u0007@\u02f4\n@\f@\u000e@\u02f7\u000b",
    "@\u0003A\u0003A\u0005A\u02fb\nA\u0003A\u0005A\u02fe\nA\u0003B\u0003",
    "B\u0003B\u0003B\u0005B\u0304\nB\u0003C\u0003C\u0003C\u0005C\u0309\n",
    "C\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u0313",
    "\nD\u0003D\u0005D\u0316\nD\u0005D\u0318\nD\u0003D\u0003D\u0003D\u0003",
    "D\u0007D\u031e\nD\fD\u000eD\u0321\u000bD\u0003E\u0003E\u0005E\u0325",
    "\nE\u0003E\u0005E\u0328\nE\u0003F\u0003F\u0003F\u0003G\u0003G\u0003",
    "G\u0005G\u0330\nG\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0005H\u033a\nH\u0003H\u0005H\u033d\nH\u0005H\u033f\nH\u0003H\u0003",
    "H\u0003H\u0003H\u0007H\u0345\nH\fH\u000eH\u0348\u000bH\u0003I\u0003",
    "I\u0005I\u034c\nI\u0003I\u0005I\u034f\nI\u0003J\u0003J\u0003J\u0003",
    "K\u0003K\u0003K\u0005K\u0357\nK\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0003L\u0005L\u0361\nL\u0003L\u0005L\u0364\nL\u0005L\u0366",
    "\nL\u0003L\u0003L\u0003L\u0003L\u0007L\u036c\nL\fL\u000eL\u036f\u000b",
    "L\u0003M\u0003M\u0005M\u0373\nM\u0003M\u0005M\u0376\nM\u0003N\u0003",
    "N\u0003N\u0003N\u0003N\u0005N\u037d\nN\u0003O\u0003O\u0003O\u0005O\u0382",
    "\nO\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0005P\u038c",
    "\nP\u0003P\u0005P\u038f\nP\u0005P\u0391\nP\u0003P\u0003P\u0003P\u0003",
    "P\u0007P\u0397\nP\fP\u000eP\u039a\u000bP\u0003Q\u0003Q\u0005Q\u039e",
    "\nQ\u0003Q\u0005Q\u03a1\nQ\u0003R\u0003R\u0003R\u0003S\u0003S\u0003",
    "S\u0003S\u0005S\u03aa\nS\u0003S\u0003S\u0003S\u0005S\u03af\nS\u0003",
    "T\u0003T\u0005T\u03b3\nT\u0003T\u0005T\u03b6\nT\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0005U\u03bd\nU\u0003V\u0003V\u0005V\u03c1\nV\u0003",
    "V\u0003V\u0003V\u0005V\u03c6\nV\u0003W\u0003W\u0005W\u03ca\nW\u0003",
    "W\u0005W\u03cd\nW\u0003X\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u0005Y\u03d5",
    "\nY\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0005Z\u03e8\nZ\u0003",
    "Z\u0005Z\u03eb\nZ\u0005Z\u03ed\nZ\u0003Z\u0003Z\u0003Z\u0003Z\u0007",
    "Z\u03f3\nZ\fZ\u000eZ\u03f6\u000bZ\u0003Z\u0002\u000e6JRZbv~\u0086\u008e",
    "\u0096\u009e\u00b2[\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014",
    "\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd",
    "fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090",
    "\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8",
    "\u00aa\u00ac\u00ae\u00b0\u00b2\u0002\u0002\u0002\u0464\u0002\u00bb\u0003",
    "\u0002\u0002\u0002\u0004\u00ca\u0003\u0002\u0002\u0002\u0006\u00fc\u0003",
    "\u0002\u0002\u0002\b\u012e\u0003\u0002\u0002\u0002\n\u0130\u0003\u0002",
    "\u0002\u0002\f\u0138\u0003\u0002\u0002\u0002\u000e\u013a\u0003\u0002",
    "\u0002\u0002\u0010\u013c\u0003\u0002\u0002\u0002\u0012\u013e\u0003\u0002",
    "\u0002\u0002\u0014\u0140\u0003\u0002\u0002\u0002\u0016\u0142\u0003\u0002",
    "\u0002\u0002\u0018\u0144\u0003\u0002\u0002\u0002\u001a\u0146\u0003\u0002",
    "\u0002\u0002\u001c\u0148\u0003\u0002\u0002\u0002\u001e\u014a\u0003\u0002",
    "\u0002\u0002 \u014c\u0003\u0002\u0002\u0002\"\u014e\u0003\u0002\u0002",
    "\u0002$\u0150\u0003\u0002\u0002\u0002&\u0152\u0003\u0002\u0002\u0002",
    "(\u0156\u0003\u0002\u0002\u0002*\u0158\u0003\u0002\u0002\u0002,\u015f",
    "\u0003\u0002\u0002\u0002.\u016d\u0003\u0002\u0002\u00020\u017b\u0003",
    "\u0002\u0002\u00022\u0182\u0003\u0002\u0002\u00024\u018a\u0003\u0002",
    "\u0002\u00026\u019c\u0003\u0002\u0002\u00028\u01a7\u0003\u0002\u0002",
    "\u0002:\u01ae\u0003\u0002\u0002\u0002<\u01b1\u0003\u0002\u0002\u0002",
    ">\u01ba\u0003\u0002\u0002\u0002@\u01c1\u0003\u0002\u0002\u0002B\u01c4",
    "\u0003\u0002\u0002\u0002D\u01cd\u0003\u0002\u0002\u0002F\u01d4\u0003",
    "\u0002\u0002\u0002H\u01d7\u0003\u0002\u0002\u0002J\u01ee\u0003\u0002",
    "\u0002\u0002L\u01f9\u0003\u0002\u0002\u0002N\u0200\u0003\u0002\u0002",
    "\u0002P\u0203\u0003\u0002\u0002\u0002R\u0217\u0003\u0002\u0002\u0002",
    "T\u0222\u0003\u0002\u0002\u0002V\u0229\u0003\u0002\u0002\u0002X\u022c",
    "\u0003\u0002\u0002\u0002Z\u0242\u0003\u0002\u0002\u0002\\\u024d\u0003",
    "\u0002\u0002\u0002^\u0254\u0003\u0002\u0002\u0002`\u025a\u0003\u0002",
    "\u0002\u0002b\u026c\u0003\u0002\u0002\u0002d\u0277\u0003\u0002\u0002",
    "\u0002f\u027e\u0003\u0002\u0002\u0002h\u0283\u0003\u0002\u0002\u0002",
    "j\u028c\u0003\u0002\u0002\u0002l\u0293\u0003\u0002\u0002\u0002n\u029b",
    "\u0003\u0002\u0002\u0002p\u02a4\u0003\u0002\u0002\u0002r\u02ab\u0003",
    "\u0002\u0002\u0002t\u02ae\u0003\u0002\u0002\u0002v\u02c0\u0003\u0002",
    "\u0002\u0002x\u02cb\u0003\u0002\u0002\u0002z\u02d2\u0003\u0002\u0002",
    "\u0002|\u02d8\u0003\u0002\u0002\u0002~\u02ed\u0003\u0002\u0002\u0002",
    "\u0080\u02f8\u0003\u0002\u0002\u0002\u0082\u02ff\u0003\u0002\u0002\u0002",
    "\u0084\u0305\u0003\u0002\u0002\u0002\u0086\u0317\u0003\u0002\u0002\u0002",
    "\u0088\u0322\u0003\u0002\u0002\u0002\u008a\u0329\u0003\u0002\u0002\u0002",
    "\u008c\u032c\u0003\u0002\u0002\u0002\u008e\u033e\u0003\u0002\u0002\u0002",
    "\u0090\u0349\u0003\u0002\u0002\u0002\u0092\u0350\u0003\u0002\u0002\u0002",
    "\u0094\u0353\u0003\u0002\u0002\u0002\u0096\u0365\u0003\u0002\u0002\u0002",
    "\u0098\u0370\u0003\u0002\u0002\u0002\u009a\u0377\u0003\u0002\u0002\u0002",
    "\u009c\u037e\u0003\u0002\u0002\u0002\u009e\u0390\u0003\u0002\u0002\u0002",
    "\u00a0\u039b\u0003\u0002\u0002\u0002\u00a2\u03a2\u0003\u0002\u0002\u0002",
    "\u00a4\u03a5\u0003\u0002\u0002\u0002\u00a6\u03b0\u0003\u0002\u0002\u0002",
    "\u00a8\u03b7\u0003\u0002\u0002\u0002\u00aa\u03be\u0003\u0002\u0002\u0002",
    "\u00ac\u03c7\u0003\u0002\u0002\u0002\u00ae\u03ce\u0003\u0002\u0002\u0002",
    "\u00b0\u03d1\u0003\u0002\u0002\u0002\u00b2\u03ec\u0003\u0002\u0002\u0002",
    "\u00b4\u00b6\u0005\u000e\b\u0002\u00b5\u00b4\u0003\u0002\u0002\u0002",
    "\u00b6\u00b9\u0003\u0002\u0002\u0002\u00b7\u00b5\u0003\u0002\u0002\u0002",
    "\u00b7\u00b8\u0003\u0002\u0002\u0002\u00b8\u00bc\u0003\u0002\u0002\u0002",
    "\u00b9\u00b7\u0003\u0002\u0002\u0002\u00ba\u00bc\u0005\u0004\u0003\u0002",
    "\u00bb\u00b7\u0003\u0002\u0002\u0002\u00bb\u00ba\u0003\u0002\u0002\u0002",
    "\u00bc\u00be\u0003\u0002\u0002\u0002\u00bd\u00bf\u0005\f\u0007\u0002",
    "\u00be\u00bd\u0003\u0002\u0002\u0002\u00be\u00bf\u0003\u0002\u0002\u0002",
    "\u00bf\u00c3\u0003\u0002\u0002\u0002\u00c0\u00c2\u0007\u0013\u0002\u0002",
    "\u00c1\u00c0\u0003\u0002\u0002\u0002\u00c2\u00c5\u0003\u0002\u0002\u0002",
    "\u00c3\u00c1\u0003\u0002\u0002\u0002\u00c3\u00c4\u0003\u0002\u0002\u0002",
    "\u00c4\u00c6\u0003\u0002\u0002\u0002\u00c5\u00c3\u0003\u0002\u0002\u0002",
    "\u00c6\u00c7\u0007\u0002\u0002\u0003\u00c7\u0003\u0003\u0002\u0002\u0002",
    "\u00c8\u00cb\u0005\u0006\u0004\u0002\u00c9\u00cb\u0005\b\u0005\u0002",
    "\u00ca\u00c8\u0003\u0002\u0002\u0002\u00ca\u00c9\u0003\u0002\u0002\u0002",
    "\u00cb\u0005\u0003\u0002\u0002\u0002\u00cc\u00cd\u0005D#\u0002\u00cd",
    "\u00ce\u0005\u0010\t\u0002\u00ce\u00cf\u0005J&\u0002\u00cf\u00fd\u0003",
    "\u0002\u0002\u0002\u00d0\u00d1\u0005L\'\u0002\u00d1\u00d2\u0005\u0010",
    "\t\u0002\u00d2\u00d3\u0005R*\u0002\u00d3\u00fd\u0003\u0002\u0002\u0002",
    "\u00d4\u00d5\u0005T+\u0002\u00d5\u00d6\u0005\u0010\t\u0002\u00d6\u00d7",
    "\u0005Z.\u0002\u00d7\u00fd\u0003\u0002\u0002\u0002\u00d8\u00d9\u0005",
    "0\u0019\u0002\u00d9\u00da\u0005\u0010\t\u0002\u00da\u00db\u00056\u001c",
    "\u0002\u00db\u00fd\u0003\u0002\u0002\u0002\u00dc\u00dd\u0005\\/\u0002",
    "\u00dd\u00de\u0005\u0010\t\u0002\u00de\u00df\u0005b2\u0002\u00df\u00fd",
    "\u0003\u0002\u0002\u0002\u00e0\u00e1\u0005p9\u0002\u00e1\u00e2\u0005",
    "\u0010\t\u0002\u00e2\u00e3\u0005v<\u0002\u00e3\u00fd\u0003\u0002\u0002",
    "\u0002\u00e4\u00e5\u0005x=\u0002\u00e5\u00e6\u0005\u0010\t\u0002\u00e6",
    "\u00e7\u0005~@\u0002\u00e7\u00fd\u0003\u0002\u0002\u0002\u00e8\u00e9",
    "\u0005\u0080A\u0002\u00e9\u00ea\u0005\u0010\t\u0002\u00ea\u00eb\u0005",
    "\u0086D\u0002\u00eb\u00fd\u0003\u0002\u0002\u0002\u00ec\u00ed\u0005",
    "\u0088E\u0002\u00ed\u00ee\u0005\u0010\t\u0002\u00ee\u00ef\u0005\u008e",
    "H\u0002\u00ef\u00fd\u0003\u0002\u0002\u0002\u00f0\u00f1\u0005\u0090",
    "I\u0002\u00f1\u00f2\u0005\u0010\t\u0002\u00f2\u00f3\u0005\u0096L\u0002",
    "\u00f3\u00fd\u0003\u0002\u0002\u0002\u00f4\u00f5\u0005\u00a0Q\u0002",
    "\u00f5\u00f6\u0005\u0010\t\u0002\u00f6\u00f7\u0005\u009eP\u0002\u00f7",
    "\u00fd\u0003\u0002\u0002\u0002\u00f8\u00f9\u0005\u00acW\u0002\u00f9",
    "\u00fa\u0005\u0010\t\u0002\u00fa\u00fb\u0005\u00b2Z\u0002\u00fb\u00fd",
    "\u0003\u0002\u0002\u0002\u00fc\u00cc\u0003\u0002\u0002\u0002\u00fc\u00d0",
    "\u0003\u0002\u0002\u0002\u00fc\u00d4\u0003\u0002\u0002\u0002\u00fc\u00d8",
    "\u0003\u0002\u0002\u0002\u00fc\u00dc\u0003\u0002\u0002\u0002\u00fc\u00e0",
    "\u0003\u0002\u0002\u0002\u00fc\u00e4\u0003\u0002\u0002\u0002\u00fc\u00e8",
    "\u0003\u0002\u0002\u0002\u00fc\u00ec\u0003\u0002\u0002\u0002\u00fc\u00f0",
    "\u0003\u0002\u0002\u0002\u00fc\u00f4\u0003\u0002\u0002\u0002\u00fc\u00f8",
    "\u0003\u0002\u0002\u0002\u00fd\u0007\u0003\u0002\u0002\u0002\u00fe\u00ff",
    "\u0005D#\u0002\u00ff\u0100\u0005\u0012\n\u0002\u0100\u0101\u0005D#\u0002",
    "\u0101\u012f\u0003\u0002\u0002\u0002\u0102\u0103\u0005L\'\u0002\u0103",
    "\u0104\u0005\u0012\n\u0002\u0104\u0105\u0005L\'\u0002\u0105\u012f\u0003",
    "\u0002\u0002\u0002\u0106\u0107\u0005T+\u0002\u0107\u0108\u0005\u0012",
    "\n\u0002\u0108\u0109\u0005T+\u0002\u0109\u012f\u0003\u0002\u0002\u0002",
    "\u010a\u010b\u00050\u0019\u0002\u010b\u010c\u0005\u0012\n\u0002\u010c",
    "\u010d\u00050\u0019\u0002\u010d\u012f\u0003\u0002\u0002\u0002\u010e",
    "\u010f\u0005\\/\u0002\u010f\u0110\u0005\u0012\n\u0002\u0110\u0111\u0005",
    "\\/\u0002\u0111\u012f\u0003\u0002\u0002\u0002\u0112\u0113\u0005p9\u0002",
    "\u0113\u0114\u0005\u0012\n\u0002\u0114\u0115\u0005p9\u0002\u0115\u012f",
    "\u0003\u0002\u0002\u0002\u0116\u0117\u0005x=\u0002\u0117\u0118\u0005",
    "\u0012\n\u0002\u0118\u0119\u0005x=\u0002\u0119\u012f\u0003\u0002\u0002",
    "\u0002\u011a\u011b\u0005\u0080A\u0002\u011b\u011c\u0005\u0012\n\u0002",
    "\u011c\u011d\u0005\u0080A\u0002\u011d\u012f\u0003\u0002\u0002\u0002",
    "\u011e\u011f\u0005\u0088E\u0002\u011f\u0120\u0005\u0012\n\u0002\u0120",
    "\u0121\u0005\u0088E\u0002\u0121\u012f\u0003\u0002\u0002\u0002\u0122",
    "\u0123\u0005\u0090I\u0002\u0123\u0124\u0005\u0012\n\u0002\u0124\u0125",
    "\u0005\u0090I\u0002\u0125\u012f\u0003\u0002\u0002\u0002\u0126\u0127",
    "\u0005\u00a0Q\u0002\u0127\u0128\u0005\u0012\n\u0002\u0128\u0129\u0005",
    "\u00a0Q\u0002\u0129\u012f\u0003\u0002\u0002\u0002\u012a\u012b\u0005",
    "\u00acW\u0002\u012b\u012c\u0005\u0012\n\u0002\u012c\u012d\u0005\u00ac",
    "W\u0002\u012d\u012f\u0003\u0002\u0002\u0002\u012e\u00fe\u0003\u0002",
    "\u0002\u0002\u012e\u0102\u0003\u0002\u0002\u0002\u012e\u0106\u0003\u0002",
    "\u0002\u0002\u012e\u010a\u0003\u0002\u0002\u0002\u012e\u010e\u0003\u0002",
    "\u0002\u0002\u012e\u0112\u0003\u0002\u0002\u0002\u012e\u0116\u0003\u0002",
    "\u0002\u0002\u012e\u011a\u0003\u0002\u0002\u0002\u012e\u011e\u0003\u0002",
    "\u0002\u0002\u012e\u0122\u0003\u0002\u0002\u0002\u012e\u0126\u0003\u0002",
    "\u0002\u0002\u012e\u012a\u0003\u0002\u0002\u0002\u012f\t\u0003\u0002",
    "\u0002\u0002\u0130\u0132\u0007\u0003\u0002\u0002\u0131\u0133\u0007\u0012",
    "\u0002\u0002\u0132\u0131\u0003\u0002\u0002\u0002\u0133\u0134\u0003\u0002",
    "\u0002\u0002\u0134\u0132\u0003\u0002\u0002\u0002\u0134\u0135\u0003\u0002",
    "\u0002\u0002\u0135\u0136\u0003\u0002\u0002\u0002\u0136\u0137\u0007\u0003",
    "\u0002\u0002\u0137\u000b\u0003\u0002\u0002\u0002\u0138\u0139\u0007\u0004",
    "\u0002\u0002\u0139\r\u0003\u0002\u0002\u0002\u013a\u013b\u0007\u0013",
    "\u0002\u0002\u013b\u000f\u0003\u0002\u0002\u0002\u013c\u013d\u0007\u0005",
    "\u0002\u0002\u013d\u0011\u0003\u0002\u0002\u0002\u013e\u013f\u0007\u0006",
    "\u0002\u0002\u013f\u0013\u0003\u0002\u0002\u0002\u0140\u0141\u0007\u0007",
    "\u0002\u0002\u0141\u0015\u0003\u0002\u0002\u0002\u0142\u0143\u0007\b",
    "\u0002\u0002\u0143\u0017\u0003\u0002\u0002\u0002\u0144\u0145\u0007\t",
    "\u0002\u0002\u0145\u0019\u0003\u0002\u0002\u0002\u0146\u0147\u0007\n",
    "\u0002\u0002\u0147\u001b\u0003\u0002\u0002\u0002\u0148\u0149\u0007\u000b",
    "\u0002\u0002\u0149\u001d\u0003\u0002\u0002\u0002\u014a\u014b\u0007\f",
    "\u0002\u0002\u014b\u001f\u0003\u0002\u0002\u0002\u014c\u014d\u0007\r",
    "\u0002\u0002\u014d!\u0003\u0002\u0002\u0002\u014e\u014f\u0007\u000e",
    "\u0002\u0002\u014f#\u0003\u0002\u0002\u0002\u0150\u0151\u0007\u000f",
    "\u0002\u0002\u0151%\u0003\u0002\u0002\u0002\u0152\u0153\u0007\u0010",
    "\u0002\u0002\u0153\'\u0003\u0002\u0002\u0002\u0154\u0157\u0005\u0018",
    "\r\u0002\u0155\u0157\u0005\u001a\u000e\u0002\u0156\u0154\u0003\u0002",
    "\u0002\u0002\u0156\u0155\u0003\u0002\u0002\u0002\u0157)\u0003\u0002",
    "\u0002\u0002\u0158\u015a\u0007\u0017\u0002\u0002\u0159\u015b\u0005.",
    "\u0018\u0002\u015a\u0159\u0003\u0002\u0002\u0002\u015a\u015b\u0003\u0002",
    "\u0002\u0002\u015b\u015d\u0003\u0002\u0002\u0002\u015c\u015e\u0005,",
    "\u0017\u0002\u015d\u015c\u0003\u0002\u0002\u0002\u015d\u015e\u0003\u0002",
    "\u0002\u0002\u015e+\u0003\u0002\u0002\u0002\u015f\u016b\u0005\u0016",
    "\f\u0002\u0160\u016c\u0005\u00acW\u0002\u0161\u016c\u0005D#\u0002\u0162",
    "\u016c\u0005L\'\u0002\u0163\u016c\u0005x=\u0002\u0164\u016c\u0005\\",
    "/\u0002\u0165\u016c\u00050\u0019\u0002\u0166\u016c\u0005d3\u0002\u0167",
    "\u016c\u0005T+\u0002\u0168\u016c\u0005\u0090I\u0002\u0169\u016c\u0005",
    "8\u001d\u0002\u016a\u016c\u0005> \u0002\u016b\u0160\u0003\u0002\u0002",
    "\u0002\u016b\u0161\u0003\u0002\u0002\u0002\u016b\u0162\u0003\u0002\u0002",
    "\u0002\u016b\u0163\u0003\u0002\u0002\u0002\u016b\u0164\u0003\u0002\u0002",
    "\u0002\u016b\u0165\u0003\u0002\u0002\u0002\u016b\u0166\u0003\u0002\u0002",
    "\u0002\u016b\u0167\u0003\u0002\u0002\u0002\u016b\u0168\u0003\u0002\u0002",
    "\u0002\u016b\u0169\u0003\u0002\u0002\u0002\u016b\u016a\u0003\u0002\u0002",
    "\u0002\u016c-\u0003\u0002\u0002\u0002\u016d\u016f\u0005\u0014\u000b",
    "\u0002\u016e\u0170\u0005&\u0014\u0002\u016f\u016e\u0003\u0002\u0002",
    "\u0002\u016f\u0170\u0003\u0002\u0002\u0002\u0170\u0175\u0003\u0002\u0002",
    "\u0002\u0171\u0176\u0005\u001e\u0010\u0002\u0172\u0176\u0005 \u0011",
    "\u0002\u0173\u0176\u0005\"\u0012\u0002\u0174\u0176\u0005$\u0013\u0002",
    "\u0175\u0171\u0003\u0002\u0002\u0002\u0175\u0172\u0003\u0002\u0002\u0002",
    "\u0175\u0173\u0003\u0002\u0002\u0002\u0175\u0174\u0003\u0002\u0002\u0002",
    "\u0176\u0177\u0003\u0002\u0002\u0002\u0177\u0179\u0005\n\u0006\u0002",
    "\u0178\u017a\u0007\u0014\u0002\u0002\u0179\u0178\u0003\u0002\u0002\u0002",
    "\u0179\u017a\u0003\u0002\u0002\u0002\u017a/\u0003\u0002\u0002\u0002",
    "\u017b\u017d\u0007\u0018\u0002\u0002\u017c\u017e\u00054\u001b\u0002",
    "\u017d\u017c\u0003\u0002\u0002\u0002\u017d\u017e\u0003\u0002\u0002\u0002",
    "\u017e\u0180\u0003\u0002\u0002\u0002\u017f\u0181\u00052\u001a\u0002",
    "\u0180\u017f\u0003\u0002\u0002\u0002\u0180\u0181\u0003\u0002\u0002\u0002",
    "\u01811\u0003\u0002\u0002\u0002\u0182\u0188\u0005\u0016\f\u0002\u0183",
    "\u0189\u0005\u00acW\u0002\u0184\u0189\u0005D#\u0002\u0185\u0189\u0005",
    "T+\u0002\u0186\u0189\u0005L\'\u0002\u0187\u0189\u0005x=\u0002\u0188",
    "\u0183\u0003\u0002\u0002\u0002\u0188\u0184\u0003\u0002\u0002\u0002\u0188",
    "\u0185\u0003\u0002\u0002\u0002\u0188\u0186\u0003\u0002\u0002\u0002\u0188",
    "\u0187\u0003\u0002\u0002\u0002\u01893\u0003\u0002\u0002\u0002\u018a",
    "\u018b\u0005\u0014\u000b\u0002\u018b\u018d\u00056\u001c\u0002\u018c",
    "\u018e\u0007\u0014\u0002\u0002\u018d\u018c\u0003\u0002\u0002\u0002\u018d",
    "\u018e\u0003\u0002\u0002\u0002\u018e5\u0003\u0002\u0002\u0002\u018f",
    "\u0190\b\u001c\u0001\u0002\u0190\u0191\u0007\u0015\u0002\u0002\u0191",
    "\u0192\u00056\u001c\u0002\u0192\u0193\u0007\u0016\u0002\u0002\u0193",
    "\u019d\u0003\u0002\u0002\u0002\u0194\u0197\u0005\u001c\u000f\u0002\u0195",
    "\u0198\u0005*\u0016\u0002\u0196\u0198\u0005\u0090I\u0002\u0197\u0195",
    "\u0003\u0002\u0002\u0002\u0197\u0196\u0003\u0002\u0002\u0002\u0198\u019a",
    "\u0003\u0002\u0002\u0002\u0199\u019b\u0007\u0011\u0002\u0002\u019a\u0199",
    "\u0003\u0002\u0002\u0002\u019a\u019b\u0003\u0002\u0002\u0002\u019b\u019d",
    "\u0003\u0002\u0002\u0002\u019c\u018f\u0003\u0002\u0002\u0002\u019c\u0194",
    "\u0003\u0002\u0002\u0002\u019d\u01a4\u0003\u0002\u0002\u0002\u019e\u019f",
    "\f\u0004\u0002\u0002\u019f\u01a0\u0005(\u0015\u0002\u01a0\u01a1\u0005",
    "6\u001c\u0005\u01a1\u01a3\u0003\u0002\u0002\u0002\u01a2\u019e\u0003",
    "\u0002\u0002\u0002\u01a3\u01a6\u0003\u0002\u0002\u0002\u01a4\u01a2\u0003",
    "\u0002\u0002\u0002\u01a4\u01a5\u0003\u0002\u0002\u0002\u01a57\u0003",
    "\u0002\u0002\u0002\u01a6\u01a4\u0003\u0002\u0002\u0002\u01a7\u01a9\u0007",
    "\u001a\u0002\u0002\u01a8\u01aa\u0005<\u001f\u0002\u01a9\u01a8\u0003",
    "\u0002\u0002\u0002\u01a9\u01aa\u0003\u0002\u0002\u0002\u01aa\u01ac\u0003",
    "\u0002\u0002\u0002\u01ab\u01ad\u0005:\u001e\u0002\u01ac\u01ab\u0003",
    "\u0002\u0002\u0002\u01ac\u01ad\u0003\u0002\u0002\u0002\u01ad9\u0003",
    "\u0002\u0002\u0002\u01ae\u01af\u0005\u0016\f\u0002\u01af\u01b0\u0005",
    "\u00acW\u0002\u01b0;\u0003\u0002\u0002\u0002\u01b1\u01b3\u0005\u0014",
    "\u000b\u0002\u01b2\u01b4\u0005&\u0014\u0002\u01b3\u01b2\u0003\u0002",
    "\u0002\u0002\u01b3\u01b4\u0003\u0002\u0002\u0002\u01b4\u01b5\u0003\u0002",
    "\u0002\u0002\u01b5\u01b6\u0005\u001e\u0010\u0002\u01b6\u01b8\u0005\n",
    "\u0006\u0002\u01b7\u01b9\u0007\u0014\u0002\u0002\u01b8\u01b7\u0003\u0002",
    "\u0002\u0002\u01b8\u01b9\u0003\u0002\u0002\u0002\u01b9=\u0003\u0002",
    "\u0002\u0002\u01ba\u01bc\u0007\u001b\u0002\u0002\u01bb\u01bd\u0005B",
    "\"\u0002\u01bc\u01bb\u0003\u0002\u0002\u0002\u01bc\u01bd\u0003\u0002",
    "\u0002\u0002\u01bd\u01bf\u0003\u0002\u0002\u0002\u01be\u01c0\u0005@",
    "!\u0002\u01bf\u01be\u0003\u0002\u0002\u0002\u01bf\u01c0\u0003\u0002",
    "\u0002\u0002\u01c0?\u0003\u0002\u0002\u0002\u01c1\u01c2\u0005\u0016",
    "\f\u0002\u01c2\u01c3\u0005\u00acW\u0002\u01c3A\u0003\u0002\u0002\u0002",
    "\u01c4\u01c6\u0005\u0014\u000b\u0002\u01c5\u01c7\u0005&\u0014\u0002",
    "\u01c6\u01c5\u0003\u0002\u0002\u0002\u01c6\u01c7\u0003\u0002\u0002\u0002",
    "\u01c7\u01c8\u0003\u0002\u0002\u0002\u01c8\u01c9\u0005\u001e\u0010\u0002",
    "\u01c9\u01cb\u0005\n\u0006\u0002\u01ca\u01cc\u0007\u0014\u0002\u0002",
    "\u01cb\u01ca\u0003\u0002\u0002\u0002\u01cb\u01cc\u0003\u0002\u0002\u0002",
    "\u01ccC\u0003\u0002\u0002\u0002\u01cd\u01cf\u0007\u001c\u0002\u0002",
    "\u01ce\u01d0\u0005H%\u0002\u01cf\u01ce\u0003\u0002\u0002\u0002\u01cf",
    "\u01d0\u0003\u0002\u0002\u0002\u01d0\u01d2\u0003\u0002\u0002\u0002\u01d1",
    "\u01d3\u0005F$\u0002\u01d2\u01d1\u0003\u0002\u0002\u0002\u01d2\u01d3",
    "\u0003\u0002\u0002\u0002\u01d3E\u0003\u0002\u0002\u0002\u01d4\u01d5",
    "\u0005\u0016\f\u0002\u01d5\u01d6\u0005\u00acW\u0002\u01d6G\u0003\u0002",
    "\u0002\u0002\u01d7\u01d8\u0005\u0014\u000b\u0002\u01d8\u01da\u0005J",
    "&\u0002\u01d9\u01db\u0007\u0014\u0002\u0002\u01da\u01d9\u0003\u0002",
    "\u0002\u0002\u01da\u01db\u0003\u0002\u0002\u0002\u01dbI\u0003\u0002",
    "\u0002\u0002\u01dc\u01dd\b&\u0001\u0002\u01dd\u01de\u0007\u0015\u0002",
    "\u0002\u01de\u01df\u0005J&\u0002\u01df\u01e0\u0007\u0016\u0002\u0002",
    "\u01e0\u01ef\u0003\u0002\u0002\u0002\u01e1\u01e9\u0005\u001c\u000f\u0002",
    "\u01e2\u01ea\u00050\u0019\u0002\u01e3\u01ea\u0005j6\u0002\u01e4\u01ea",
    "\u0005*\u0016\u0002\u01e5\u01ea\u0005\\/\u0002\u01e6\u01ea\u0005p9\u0002",
    "\u01e7\u01ea\u0005x=\u0002\u01e8\u01ea\u0005\u0080A\u0002\u01e9\u01e2",
    "\u0003\u0002\u0002\u0002\u01e9\u01e3\u0003\u0002\u0002\u0002\u01e9\u01e4",
    "\u0003\u0002\u0002\u0002\u01e9\u01e5\u0003\u0002\u0002\u0002\u01e9\u01e6",
    "\u0003\u0002\u0002\u0002\u01e9\u01e7\u0003\u0002\u0002\u0002\u01e9\u01e8",
    "\u0003\u0002\u0002\u0002\u01ea\u01ec\u0003\u0002\u0002\u0002\u01eb\u01ed",
    "\u0007\u0011\u0002\u0002\u01ec\u01eb\u0003\u0002\u0002\u0002\u01ec\u01ed",
    "\u0003\u0002\u0002\u0002\u01ed\u01ef\u0003\u0002\u0002\u0002\u01ee\u01dc",
    "\u0003\u0002\u0002\u0002\u01ee\u01e1\u0003\u0002\u0002\u0002\u01ef\u01f6",
    "\u0003\u0002\u0002\u0002\u01f0\u01f1\f\u0004\u0002\u0002\u01f1\u01f2",
    "\u0005(\u0015\u0002\u01f2\u01f3\u0005J&\u0005\u01f3\u01f5\u0003\u0002",
    "\u0002\u0002\u01f4\u01f0\u0003\u0002\u0002\u0002\u01f5\u01f8\u0003\u0002",
    "\u0002\u0002\u01f6\u01f4\u0003\u0002\u0002\u0002\u01f6\u01f7\u0003\u0002",
    "\u0002\u0002\u01f7K\u0003\u0002\u0002\u0002\u01f8\u01f6\u0003\u0002",
    "\u0002\u0002\u01f9\u01fb\u0007\u001d\u0002\u0002\u01fa\u01fc\u0005P",
    ")\u0002\u01fb\u01fa\u0003\u0002\u0002\u0002\u01fb\u01fc\u0003\u0002",
    "\u0002\u0002\u01fc\u01fe\u0003\u0002\u0002\u0002\u01fd\u01ff\u0005N",
    "(\u0002\u01fe\u01fd\u0003\u0002\u0002\u0002\u01fe\u01ff\u0003\u0002",
    "\u0002\u0002\u01ffM\u0003\u0002\u0002\u0002\u0200\u0201\u0005\u0016",
    "\f\u0002\u0201\u0202\u0005\u00acW\u0002\u0202O\u0003\u0002\u0002\u0002",
    "\u0203\u0204\u0005\u0014\u000b\u0002\u0204\u0206\u0005R*\u0002\u0205",
    "\u0207\u0007\u0014\u0002\u0002\u0206\u0205\u0003\u0002\u0002\u0002\u0206",
    "\u0207\u0003\u0002\u0002\u0002\u0207Q\u0003\u0002\u0002\u0002\u0208",
    "\u0209\b*\u0001\u0002\u0209\u020a\u0007\u0015\u0002\u0002\u020a\u020b",
    "\u0005R*\u0002\u020b\u020c\u0007\u0016\u0002\u0002\u020c\u0218\u0003",
    "\u0002\u0002\u0002\u020d\u0212\u0005\u001c\u000f\u0002\u020e\u0213\u0005",
    "0\u0019\u0002\u020f\u0213\u0005j6\u0002\u0210\u0213\u0005*\u0016\u0002",
    "\u0211\u0213\u0005\\/\u0002\u0212\u020e\u0003\u0002\u0002\u0002\u0212",
    "\u020f\u0003\u0002\u0002\u0002\u0212\u0210\u0003\u0002\u0002\u0002\u0212",
    "\u0211\u0003\u0002\u0002\u0002\u0213\u0215\u0003\u0002\u0002\u0002\u0214",
    "\u0216\u0007\u0011\u0002\u0002\u0215\u0214\u0003\u0002\u0002\u0002\u0215",
    "\u0216\u0003\u0002\u0002\u0002\u0216\u0218\u0003\u0002\u0002\u0002\u0217",
    "\u0208\u0003\u0002\u0002\u0002\u0217\u020d\u0003\u0002\u0002\u0002\u0218",
    "\u021f\u0003\u0002\u0002\u0002\u0219\u021a\f\u0004\u0002\u0002\u021a",
    "\u021b\u0005(\u0015\u0002\u021b\u021c\u0005R*\u0005\u021c\u021e\u0003",
    "\u0002\u0002\u0002\u021d\u0219\u0003\u0002\u0002\u0002\u021e\u0221\u0003",
    "\u0002\u0002\u0002\u021f\u021d\u0003\u0002\u0002\u0002\u021f\u0220\u0003",
    "\u0002\u0002\u0002\u0220S\u0003\u0002\u0002\u0002\u0221\u021f\u0003",
    "\u0002\u0002\u0002\u0222\u0224\u0007\u001e\u0002\u0002\u0223\u0225\u0005",
    "X-\u0002\u0224\u0223\u0003\u0002\u0002\u0002\u0224\u0225\u0003\u0002",
    "\u0002\u0002\u0225\u0227\u0003\u0002\u0002\u0002\u0226\u0228\u0005V",
    ",\u0002\u0227\u0226\u0003\u0002\u0002\u0002\u0227\u0228\u0003\u0002",
    "\u0002\u0002\u0228U\u0003\u0002\u0002\u0002\u0229\u022a\u0005\u0016",
    "\f\u0002\u022a\u022b\u0005\u00acW\u0002\u022bW\u0003\u0002\u0002\u0002",
    "\u022c\u022d\u0005\u0014\u000b\u0002\u022d\u022f\u0005Z.\u0002\u022e",
    "\u0230\u0007\u0014\u0002\u0002\u022f\u022e\u0003\u0002\u0002\u0002\u022f",
    "\u0230\u0003\u0002\u0002\u0002\u0230Y\u0003\u0002\u0002\u0002\u0231",
    "\u0232\b.\u0001\u0002\u0232\u0233\u0007\u0015\u0002\u0002\u0233\u0234",
    "\u0005Z.\u0002\u0234\u0235\u0007\u0016\u0002\u0002\u0235\u0243\u0003",
    "\u0002\u0002\u0002\u0236\u023d\u0005\u001c\u000f\u0002\u0237\u023e\u0005",
    "0\u0019\u0002\u0238\u023e\u0005j6\u0002\u0239\u023e\u0005\\/\u0002\u023a",
    "\u023e\u0005p9\u0002\u023b\u023e\u0005x=\u0002\u023c\u023e\u0005\u0080",
    "A\u0002\u023d\u0237\u0003\u0002\u0002\u0002\u023d\u0238\u0003\u0002",
    "\u0002\u0002\u023d\u0239\u0003\u0002\u0002\u0002\u023d\u023a\u0003\u0002",
    "\u0002\u0002\u023d\u023b\u0003\u0002\u0002\u0002\u023d\u023c\u0003\u0002",
    "\u0002\u0002\u023e\u0240\u0003\u0002\u0002\u0002\u023f\u0241\u0007\u0011",
    "\u0002\u0002\u0240\u023f\u0003\u0002\u0002\u0002\u0240\u0241\u0003\u0002",
    "\u0002\u0002\u0241\u0243\u0003\u0002\u0002\u0002\u0242\u0231\u0003\u0002",
    "\u0002\u0002\u0242\u0236\u0003\u0002\u0002\u0002\u0243\u024a\u0003\u0002",
    "\u0002\u0002\u0244\u0245\f\u0004\u0002\u0002\u0245\u0246\u0005(\u0015",
    "\u0002\u0246\u0247\u0005Z.\u0005\u0247\u0249\u0003\u0002\u0002\u0002",
    "\u0248\u0244\u0003\u0002\u0002\u0002\u0249\u024c\u0003\u0002\u0002\u0002",
    "\u024a\u0248\u0003\u0002\u0002\u0002\u024a\u024b\u0003\u0002\u0002\u0002",
    "\u024b[\u0003\u0002\u0002\u0002\u024c\u024a\u0003\u0002\u0002\u0002",
    "\u024d\u024f\u0007\u001f\u0002\u0002\u024e\u0250\u0005`1\u0002\u024f",
    "\u024e\u0003\u0002\u0002\u0002\u024f\u0250\u0003\u0002\u0002\u0002\u0250",
    "\u0252\u0003\u0002\u0002\u0002\u0251\u0253\u0005^0\u0002\u0252\u0251",
    "\u0003\u0002\u0002\u0002\u0252\u0253\u0003\u0002\u0002\u0002\u0253]",
    "\u0003\u0002\u0002\u0002\u0254\u0258\u0005\u0016\f\u0002\u0255\u0259",
    "\u0005D#\u0002\u0256\u0259\u0005T+\u0002\u0257\u0259\u0005L\'\u0002",
    "\u0258\u0255\u0003\u0002\u0002\u0002\u0258\u0256\u0003\u0002\u0002\u0002",
    "\u0258\u0257\u0003\u0002\u0002\u0002\u0259_\u0003\u0002\u0002\u0002",
    "\u025a\u025b\u0005\u0014\u000b\u0002\u025b\u025d\u0005b2\u0002\u025c",
    "\u025e\u0007\u0014\u0002\u0002\u025d\u025c\u0003\u0002\u0002\u0002\u025d",
    "\u025e\u0003\u0002\u0002\u0002\u025ea\u0003\u0002\u0002\u0002\u025f",
    "\u0260\b2\u0001\u0002\u0260\u0261\u0007\u0015\u0002\u0002\u0261\u0262",
    "\u0005b2\u0002\u0262\u0263\u0007\u0016\u0002\u0002\u0263\u026d\u0003",
    "\u0002\u0002\u0002\u0264\u0267\u0005\u001c\u000f\u0002\u0265\u0268\u0005",
    "*\u0016\u0002\u0266\u0268\u0005d3\u0002\u0267\u0265\u0003\u0002\u0002",
    "\u0002\u0267\u0266\u0003\u0002\u0002\u0002\u0268\u026a\u0003\u0002\u0002",
    "\u0002\u0269\u026b\u0007\u0011\u0002\u0002\u026a\u0269\u0003\u0002\u0002",
    "\u0002\u026a\u026b\u0003\u0002\u0002\u0002\u026b\u026d\u0003\u0002\u0002",
    "\u0002\u026c\u025f\u0003\u0002\u0002\u0002\u026c\u0264\u0003\u0002\u0002",
    "\u0002\u026d\u0274\u0003\u0002\u0002\u0002\u026e\u026f\f\u0004\u0002",
    "\u0002\u026f\u0270\u0005(\u0015\u0002\u0270\u0271\u0005b2\u0005\u0271",
    "\u0273\u0003\u0002\u0002\u0002\u0272\u026e\u0003\u0002\u0002\u0002\u0273",
    "\u0276\u0003\u0002\u0002\u0002\u0274\u0272\u0003\u0002\u0002\u0002\u0274",
    "\u0275\u0003\u0002\u0002\u0002\u0275c\u0003\u0002\u0002\u0002\u0276",
    "\u0274\u0003\u0002\u0002\u0002\u0277\u0279\u0007 \u0002\u0002\u0278",
    "\u027a\u0005h5\u0002\u0279\u0278\u0003\u0002\u0002\u0002\u0279\u027a",
    "\u0003\u0002\u0002\u0002\u027a\u027c\u0003\u0002\u0002\u0002\u027b\u027d",
    "\u0005f4\u0002\u027c\u027b\u0003\u0002\u0002\u0002\u027c\u027d\u0003",
    "\u0002\u0002\u0002\u027de\u0003\u0002\u0002\u0002\u027e\u0281\u0005",
    "\u0016\f\u0002\u027f\u0282\u0005\\/\u0002\u0280\u0282\u0005x=\u0002",
    "\u0281\u027f\u0003\u0002\u0002\u0002\u0281\u0280\u0003\u0002\u0002\u0002",
    "\u0282g\u0003\u0002\u0002\u0002\u0283\u0285\u0005\u0014\u000b\u0002",
    "\u0284\u0286\u0005&\u0014\u0002\u0285\u0284\u0003\u0002\u0002\u0002",
    "\u0285\u0286\u0003\u0002\u0002\u0002\u0286\u0287\u0003\u0002\u0002\u0002",
    "\u0287\u0288\u0005\u001e\u0010\u0002\u0288\u028a\u0005\n\u0006\u0002",
    "\u0289\u028b\u0007\u0014\u0002\u0002\u028a\u0289\u0003\u0002\u0002\u0002",
    "\u028a\u028b\u0003\u0002\u0002\u0002\u028bi\u0003\u0002\u0002\u0002",
    "\u028c\u028e\u0007!\u0002\u0002\u028d\u028f\u0005n8\u0002\u028e\u028d",
    "\u0003\u0002\u0002\u0002\u028e\u028f\u0003\u0002\u0002\u0002\u028f\u0291",
    "\u0003\u0002\u0002\u0002\u0290\u0292\u0005l7\u0002\u0291\u0290\u0003",
    "\u0002\u0002\u0002\u0291\u0292\u0003\u0002\u0002\u0002\u0292k\u0003",
    "\u0002\u0002\u0002\u0293\u0299\u0005\u0016\f\u0002\u0294\u029a\u0005",
    "D#\u0002\u0295\u029a\u0005T+\u0002\u0296\u029a\u0005L\'\u0002\u0297",
    "\u029a\u0005x=\u0002\u0298\u029a\u0005\u00acW\u0002\u0299\u0294\u0003",
    "\u0002\u0002\u0002\u0299\u0295\u0003\u0002\u0002\u0002\u0299\u0296\u0003",
    "\u0002\u0002\u0002\u0299\u0297\u0003\u0002\u0002\u0002\u0299\u0298\u0003",
    "\u0002\u0002\u0002\u029am\u0003\u0002\u0002\u0002\u029b\u029d\u0005",
    "\u0014\u000b\u0002\u029c\u029e\u0005&\u0014\u0002\u029d\u029c\u0003",
    "\u0002\u0002\u0002\u029d\u029e\u0003\u0002\u0002\u0002\u029e\u029f\u0003",
    "\u0002\u0002\u0002\u029f\u02a0\u0005\u001e\u0010\u0002\u02a0\u02a2\u0005",
    "\n\u0006\u0002\u02a1\u02a3\u0007\u0014\u0002\u0002\u02a2\u02a1\u0003",
    "\u0002\u0002\u0002\u02a2\u02a3\u0003\u0002\u0002\u0002\u02a3o\u0003",
    "\u0002\u0002\u0002\u02a4\u02a6\u0007\"\u0002\u0002\u02a5\u02a7\u0005",
    "t;\u0002\u02a6\u02a5\u0003\u0002\u0002\u0002\u02a6\u02a7\u0003\u0002",
    "\u0002\u0002\u02a7\u02a9\u0003\u0002\u0002\u0002\u02a8\u02aa\u0005r",
    ":\u0002\u02a9\u02a8\u0003\u0002\u0002\u0002\u02a9\u02aa\u0003\u0002",
    "\u0002\u0002\u02aaq\u0003\u0002\u0002\u0002\u02ab\u02ac\u0005\u0016",
    "\f\u0002\u02ac\u02ad\u0005D#\u0002\u02ads\u0003\u0002\u0002\u0002\u02ae",
    "\u02af\u0005\u0014\u000b\u0002\u02af\u02b1\u0005v<\u0002\u02b0\u02b2",
    "\u0007\u0014\u0002\u0002\u02b1\u02b0\u0003\u0002\u0002\u0002\u02b1\u02b2",
    "\u0003\u0002\u0002\u0002\u02b2u\u0003\u0002\u0002\u0002\u02b3\u02b4",
    "\b<\u0001\u0002\u02b4\u02b5\u0007\u0015\u0002\u0002\u02b5\u02b6\u0005",
    "v<\u0002\u02b6\u02b7\u0007\u0016\u0002\u0002\u02b7\u02c1\u0003\u0002",
    "\u0002\u0002\u02b8\u02bb\u0005\u001c\u000f\u0002\u02b9\u02bc\u0005\u0098",
    "M\u0002\u02ba\u02bc\u0005*\u0016\u0002\u02bb\u02b9\u0003\u0002\u0002",
    "\u0002\u02bb\u02ba\u0003\u0002\u0002\u0002\u02bc\u02be\u0003\u0002\u0002",
    "\u0002\u02bd\u02bf\u0007\u0011\u0002\u0002\u02be\u02bd\u0003\u0002\u0002",
    "\u0002\u02be\u02bf\u0003\u0002\u0002\u0002\u02bf\u02c1\u0003\u0002\u0002",
    "\u0002\u02c0\u02b3\u0003\u0002\u0002\u0002\u02c0\u02b8\u0003\u0002\u0002",
    "\u0002\u02c1\u02c8\u0003\u0002\u0002\u0002\u02c2\u02c3\f\u0004\u0002",
    "\u0002\u02c3\u02c4\u0005(\u0015\u0002\u02c4\u02c5\u0005v<\u0005\u02c5",
    "\u02c7\u0003\u0002\u0002\u0002\u02c6\u02c2\u0003\u0002\u0002\u0002\u02c7",
    "\u02ca\u0003\u0002\u0002\u0002\u02c8\u02c6\u0003\u0002\u0002\u0002\u02c8",
    "\u02c9\u0003\u0002\u0002\u0002\u02c9w\u0003\u0002\u0002\u0002\u02ca",
    "\u02c8\u0003\u0002\u0002\u0002\u02cb\u02cd\u0007#\u0002\u0002\u02cc",
    "\u02ce\u0005|?\u0002\u02cd\u02cc\u0003\u0002\u0002\u0002\u02cd\u02ce",
    "\u0003\u0002\u0002\u0002\u02ce\u02d0\u0003\u0002\u0002\u0002\u02cf\u02d1",
    "\u0005z>\u0002\u02d0\u02cf\u0003\u0002\u0002\u0002\u02d0\u02d1\u0003",
    "\u0002\u0002\u0002\u02d1y\u0003\u0002\u0002\u0002\u02d2\u02d6\u0005",
    "\u0016\f\u0002\u02d3\u02d7\u0005\u00acW\u0002\u02d4\u02d7\u0005D#\u0002",
    "\u02d5\u02d7\u0005T+\u0002\u02d6\u02d3\u0003\u0002\u0002\u0002\u02d6",
    "\u02d4\u0003\u0002\u0002\u0002\u02d6\u02d5\u0003\u0002\u0002\u0002\u02d7",
    "{\u0003\u0002\u0002\u0002\u02d8\u02d9\u0005\u0014\u000b\u0002\u02d9",
    "\u02db\u0005~@\u0002\u02da\u02dc\u0007\u0014\u0002\u0002\u02db\u02da",
    "\u0003\u0002\u0002\u0002\u02db\u02dc\u0003\u0002\u0002\u0002\u02dc}",
    "\u0003\u0002\u0002\u0002\u02dd\u02de\b@\u0001\u0002\u02de\u02df\u0007",
    "\u0015\u0002\u0002\u02df\u02e0\u0005~@\u0002\u02e0\u02e1\u0007\u0016",
    "\u0002\u0002\u02e1\u02ee\u0003\u0002\u0002\u0002\u02e2\u02e8\u0005\u001c",
    "\u000f\u0002\u02e3\u02e9\u00050\u0019\u0002\u02e4\u02e9\u0005j6\u0002",
    "\u02e5\u02e9\u0005d3\u0002\u02e6\u02e9\u0005*\u0016\u0002\u02e7\u02e9",
    "\u0005\u0088E\u0002\u02e8\u02e3\u0003\u0002\u0002\u0002\u02e8\u02e4",
    "\u0003\u0002\u0002\u0002\u02e8\u02e5\u0003\u0002\u0002\u0002\u02e8\u02e6",
    "\u0003\u0002\u0002\u0002\u02e8\u02e7\u0003\u0002\u0002\u0002\u02e9\u02eb",
    "\u0003\u0002\u0002\u0002\u02ea\u02ec\u0007\u0011\u0002\u0002\u02eb\u02ea",
    "\u0003\u0002\u0002\u0002\u02eb\u02ec\u0003\u0002\u0002\u0002\u02ec\u02ee",
    "\u0003\u0002\u0002\u0002\u02ed\u02dd\u0003\u0002\u0002\u0002\u02ed\u02e2",
    "\u0003\u0002\u0002\u0002\u02ee\u02f5\u0003\u0002\u0002\u0002\u02ef\u02f0",
    "\f\u0004\u0002\u0002\u02f0\u02f1\u0005(\u0015\u0002\u02f1\u02f2\u0005",
    "~@\u0005\u02f2\u02f4\u0003\u0002\u0002\u0002\u02f3\u02ef\u0003\u0002",
    "\u0002\u0002\u02f4\u02f7\u0003\u0002\u0002\u0002\u02f5\u02f3\u0003\u0002",
    "\u0002\u0002\u02f5\u02f6\u0003\u0002\u0002\u0002\u02f6\u007f\u0003\u0002",
    "\u0002\u0002\u02f7\u02f5\u0003\u0002\u0002\u0002\u02f8\u02fa\u0007$",
    "\u0002\u0002\u02f9\u02fb\u0005\u0084C\u0002\u02fa\u02f9\u0003\u0002",
    "\u0002\u0002\u02fa\u02fb\u0003\u0002\u0002\u0002\u02fb\u02fd\u0003\u0002",
    "\u0002\u0002\u02fc\u02fe\u0005\u0082B\u0002\u02fd\u02fc\u0003\u0002",
    "\u0002\u0002\u02fd\u02fe\u0003\u0002\u0002\u0002\u02fe\u0081\u0003\u0002",
    "\u0002\u0002\u02ff\u0303\u0005\u0016\f\u0002\u0300\u0304\u0005D#\u0002",
    "\u0301\u0304\u0005T+\u0002\u0302\u0304\u0005T+\u0002\u0303\u0300\u0003",
    "\u0002\u0002\u0002\u0303\u0301\u0003\u0002\u0002\u0002\u0303\u0302\u0003",
    "\u0002\u0002\u0002\u0304\u0083\u0003\u0002\u0002\u0002\u0305\u0306\u0005",
    "\u0014\u000b\u0002\u0306\u0308\u0005\u0086D\u0002\u0307\u0309\u0007",
    "\u0014\u0002\u0002\u0308\u0307\u0003\u0002\u0002\u0002\u0308\u0309\u0003",
    "\u0002\u0002\u0002\u0309\u0085\u0003\u0002\u0002\u0002\u030a\u030b\b",
    "D\u0001\u0002\u030b\u030c\u0007\u0015\u0002\u0002\u030c\u030d\u0005",
    "\u0086D\u0002\u030d\u030e\u0007\u0016\u0002\u0002\u030e\u0318\u0003",
    "\u0002\u0002\u0002\u030f\u0312\u0005\u001c\u000f\u0002\u0310\u0313\u0005",
    "\u0098M\u0002\u0311\u0313\u0005*\u0016\u0002\u0312\u0310\u0003\u0002",
    "\u0002\u0002\u0312\u0311\u0003\u0002\u0002\u0002\u0313\u0315\u0003\u0002",
    "\u0002\u0002\u0314\u0316\u0007\u0011\u0002\u0002\u0315\u0314\u0003\u0002",
    "\u0002\u0002\u0315\u0316\u0003\u0002\u0002\u0002\u0316\u0318\u0003\u0002",
    "\u0002\u0002\u0317\u030a\u0003\u0002\u0002\u0002\u0317\u030f\u0003\u0002",
    "\u0002\u0002\u0318\u031f\u0003\u0002\u0002\u0002\u0319\u031a\f\u0004",
    "\u0002\u0002\u031a\u031b\u0005(\u0015\u0002\u031b\u031c\u0005\u0086",
    "D\u0005\u031c\u031e\u0003\u0002\u0002\u0002\u031d\u0319\u0003\u0002",
    "\u0002\u0002\u031e\u0321\u0003\u0002\u0002\u0002\u031f\u031d\u0003\u0002",
    "\u0002\u0002\u031f\u0320\u0003\u0002\u0002\u0002\u0320\u0087\u0003\u0002",
    "\u0002\u0002\u0321\u031f\u0003\u0002\u0002\u0002\u0322\u0324\u0007%",
    "\u0002\u0002\u0323\u0325\u0005\u008cG\u0002\u0324\u0323\u0003\u0002",
    "\u0002\u0002\u0324\u0325\u0003\u0002\u0002\u0002\u0325\u0327\u0003\u0002",
    "\u0002\u0002\u0326\u0328\u0005\u008aF\u0002\u0327\u0326\u0003\u0002",
    "\u0002\u0002\u0327\u0328\u0003\u0002\u0002\u0002\u0328\u0089\u0003\u0002",
    "\u0002\u0002\u0329\u032a\u0005\u0016\f\u0002\u032a\u032b\u0005x=\u0002",
    "\u032b\u008b\u0003\u0002\u0002\u0002\u032c\u032d\u0005\u0014\u000b\u0002",
    "\u032d\u032f\u0005\u008eH\u0002\u032e\u0330\u0007\u0014\u0002\u0002",
    "\u032f\u032e\u0003\u0002\u0002\u0002\u032f\u0330\u0003\u0002\u0002\u0002",
    "\u0330\u008d\u0003\u0002\u0002\u0002\u0331\u0332\bH\u0001\u0002\u0332",
    "\u0333\u0007\u0015\u0002\u0002\u0333\u0334\u0005\u008eH\u0002\u0334",
    "\u0335\u0007\u0016\u0002\u0002\u0335\u033f\u0003\u0002\u0002\u0002\u0336",
    "\u0339\u0005\u001c\u000f\u0002\u0337\u033a\u0005\u0098M\u0002\u0338",
    "\u033a\u0005*\u0016\u0002\u0339\u0337\u0003\u0002\u0002\u0002\u0339",
    "\u0338\u0003\u0002\u0002\u0002\u033a\u033c\u0003\u0002\u0002\u0002\u033b",
    "\u033d\u0007\u0011\u0002\u0002\u033c\u033b\u0003\u0002\u0002\u0002\u033c",
    "\u033d\u0003\u0002\u0002\u0002\u033d\u033f\u0003\u0002\u0002\u0002\u033e",
    "\u0331\u0003\u0002\u0002\u0002\u033e\u0336\u0003\u0002\u0002\u0002\u033f",
    "\u0346\u0003\u0002\u0002\u0002\u0340\u0341\f\u0004\u0002\u0002\u0341",
    "\u0342\u0005(\u0015\u0002\u0342\u0343\u0005\u008eH\u0005\u0343\u0345",
    "\u0003\u0002\u0002\u0002\u0344\u0340\u0003\u0002\u0002\u0002\u0345\u0348",
    "\u0003\u0002\u0002\u0002\u0346\u0344\u0003\u0002\u0002\u0002\u0346\u0347",
    "\u0003\u0002\u0002\u0002\u0347\u008f\u0003\u0002\u0002\u0002\u0348\u0346",
    "\u0003\u0002\u0002\u0002\u0349\u034b\u0007&\u0002\u0002\u034a\u034c",
    "\u0005\u0094K\u0002\u034b\u034a\u0003\u0002\u0002\u0002\u034b\u034c",
    "\u0003\u0002\u0002\u0002\u034c\u034e\u0003\u0002\u0002\u0002\u034d\u034f",
    "\u0005\u0092J\u0002\u034e\u034d\u0003\u0002\u0002\u0002\u034e\u034f",
    "\u0003\u0002\u0002\u0002\u034f\u0091\u0003\u0002\u0002\u0002\u0350\u0351",
    "\u0005\u0016\f\u0002\u0351\u0352\u0005\u0098M\u0002\u0352\u0093\u0003",
    "\u0002\u0002\u0002\u0353\u0354\u0005\u0014\u000b\u0002\u0354\u0356\u0005",
    "\u0096L\u0002\u0355\u0357\u0007\u0014\u0002\u0002\u0356\u0355\u0003",
    "\u0002\u0002\u0002\u0356\u0357\u0003\u0002\u0002\u0002\u0357\u0095\u0003",
    "\u0002\u0002\u0002\u0358\u0359\bL\u0001\u0002\u0359\u035a\u0007\u0015",
    "\u0002\u0002\u035a\u035b\u0005\u0096L\u0002\u035b\u035c\u0007\u0016",
    "\u0002\u0002\u035c\u0366\u0003\u0002\u0002\u0002\u035d\u0360\u0005\u001c",
    "\u000f\u0002\u035e\u0361\u0005\u0098M\u0002\u035f\u0361\u0005*\u0016",
    "\u0002\u0360\u035e\u0003\u0002\u0002\u0002\u0360\u035f\u0003\u0002\u0002",
    "\u0002\u0361\u0363\u0003\u0002\u0002\u0002\u0362\u0364\u0007\u0011\u0002",
    "\u0002\u0363\u0362\u0003\u0002\u0002\u0002\u0363\u0364\u0003\u0002\u0002",
    "\u0002\u0364\u0366\u0003\u0002\u0002\u0002\u0365\u0358\u0003\u0002\u0002",
    "\u0002\u0365\u035d\u0003\u0002\u0002\u0002\u0366\u036d\u0003\u0002\u0002",
    "\u0002\u0367\u0368\f\u0004\u0002\u0002\u0368\u0369\u0005(\u0015\u0002",
    "\u0369\u036a\u0005\u0096L\u0005\u036a\u036c\u0003\u0002\u0002\u0002",
    "\u036b\u0367\u0003\u0002\u0002\u0002\u036c\u036f\u0003\u0002\u0002\u0002",
    "\u036d\u036b\u0003\u0002\u0002\u0002\u036d\u036e\u0003\u0002\u0002\u0002",
    "\u036e\u0097\u0003\u0002\u0002\u0002\u036f\u036d\u0003\u0002\u0002\u0002",
    "\u0370\u0372\u0007\'\u0002\u0002\u0371\u0373\u0005\u009cO\u0002\u0372",
    "\u0371\u0003\u0002\u0002\u0002\u0372\u0373\u0003\u0002\u0002\u0002\u0373",
    "\u0375\u0003\u0002\u0002\u0002\u0374\u0376\u0005\u009aN\u0002\u0375",
    "\u0374\u0003\u0002\u0002\u0002\u0375\u0376\u0003\u0002\u0002\u0002\u0376",
    "\u0099\u0003\u0002\u0002\u0002\u0377\u037c\u0005\u0016\f\u0002\u0378",
    "\u037d\u0005\u0090I\u0002\u0379\u037d\u0005p9\u0002\u037a\u037d\u0005",
    "\u0080A\u0002\u037b\u037d\u0005\u0088E\u0002\u037c\u0378\u0003\u0002",
    "\u0002\u0002\u037c\u0379\u0003\u0002\u0002\u0002\u037c\u037a\u0003\u0002",
    "\u0002\u0002\u037c\u037b\u0003\u0002\u0002\u0002\u037d\u009b\u0003\u0002",
    "\u0002\u0002\u037e\u037f\u0005\u0014\u000b\u0002\u037f\u0381\u0005\u009e",
    "P\u0002\u0380\u0382\u0007\u0014\u0002\u0002\u0381\u0380\u0003\u0002",
    "\u0002\u0002\u0381\u0382\u0003\u0002\u0002\u0002\u0382\u009d\u0003\u0002",
    "\u0002\u0002\u0383\u0384\bP\u0001\u0002\u0384\u0385\u0007\u0015\u0002",
    "\u0002\u0385\u0386\u0005\u009eP\u0002\u0386\u0387\u0007\u0016\u0002",
    "\u0002\u0387\u0391\u0003\u0002\u0002\u0002\u0388\u038b\u0005\u001c\u000f",
    "\u0002\u0389\u038c\u0005\u00a0Q\u0002\u038a\u038c\u0005*\u0016\u0002",
    "\u038b\u0389\u0003\u0002\u0002\u0002\u038b\u038a\u0003\u0002\u0002\u0002",
    "\u038c\u038e\u0003\u0002\u0002\u0002\u038d\u038f\u0007\u0011\u0002\u0002",
    "\u038e\u038d\u0003\u0002\u0002\u0002\u038e\u038f\u0003\u0002\u0002\u0002",
    "\u038f\u0391\u0003\u0002\u0002\u0002\u0390\u0383\u0003\u0002\u0002\u0002",
    "\u0390\u0388\u0003\u0002\u0002\u0002\u0391\u0398\u0003\u0002\u0002\u0002",
    "\u0392\u0393\f\u0004\u0002\u0002\u0393\u0394\u0005(\u0015\u0002\u0394",
    "\u0395\u0005\u009eP\u0005\u0395\u0397\u0003\u0002\u0002\u0002\u0396",
    "\u0392\u0003\u0002\u0002\u0002\u0397\u039a\u0003\u0002\u0002\u0002\u0398",
    "\u0396\u0003\u0002\u0002\u0002\u0398\u0399\u0003\u0002\u0002\u0002\u0399",
    "\u009f\u0003\u0002\u0002\u0002\u039a\u0398\u0003\u0002\u0002\u0002\u039b",
    "\u039d\u0007(\u0002\u0002\u039c\u039e\u0005\u00a4S\u0002\u039d\u039c",
    "\u0003\u0002\u0002\u0002\u039d\u039e\u0003\u0002\u0002\u0002\u039e\u03a0",
    "\u0003\u0002\u0002\u0002\u039f\u03a1\u0005\u00a2R\u0002\u03a0\u039f",
    "\u0003\u0002\u0002\u0002\u03a0\u03a1\u0003\u0002\u0002\u0002\u03a1\u00a1",
    "\u0003\u0002\u0002\u0002\u03a2\u03a3\u0005\u0016\f\u0002\u03a3\u03a4",
    "\u0005\u0098M\u0002\u03a4\u00a3\u0003\u0002\u0002\u0002\u03a5\u03a6",
    "\u0005\u0014\u000b\u0002\u03a6\u03a7\u0005\u001c\u000f\u0002\u03a7\u03a9",
    "\u0007\u0017\u0002\u0002\u03a8\u03aa\u0005&\u0014\u0002\u03a9\u03a8",
    "\u0003\u0002\u0002\u0002\u03a9\u03aa\u0003\u0002\u0002\u0002\u03aa\u03ab",
    "\u0003\u0002\u0002\u0002\u03ab\u03ac\u0005\u001e\u0010\u0002\u03ac\u03ae",
    "\u0005\n\u0006\u0002\u03ad\u03af\u0007\u0014\u0002\u0002\u03ae\u03ad",
    "\u0003\u0002\u0002\u0002\u03ae\u03af\u0003\u0002\u0002\u0002\u03af\u00a5",
    "\u0003\u0002\u0002\u0002\u03b0\u03b2\u0007)\u0002\u0002\u03b1\u03b3",
    "\u0005\u00aaV\u0002\u03b2\u03b1\u0003\u0002\u0002\u0002\u03b2\u03b3",
    "\u0003\u0002\u0002\u0002\u03b3\u03b5\u0003\u0002\u0002\u0002\u03b4\u03b6",
    "\u0005\u00a8U\u0002\u03b5\u03b4\u0003\u0002\u0002\u0002\u03b5\u03b6",
    "\u0003\u0002\u0002\u0002\u03b6\u00a7\u0003\u0002\u0002\u0002\u03b7\u03bc",
    "\u0005\u0016\f\u0002\u03b8\u03bd\u0005\u0090I\u0002\u03b9\u03bd\u0005",
    "p9\u0002\u03ba\u03bd\u0005\u0080A\u0002\u03bb\u03bd\u0005\u0088E\u0002",
    "\u03bc\u03b8\u0003\u0002\u0002\u0002\u03bc\u03b9\u0003\u0002\u0002\u0002",
    "\u03bc\u03ba\u0003\u0002\u0002\u0002\u03bc\u03bb\u0003\u0002\u0002\u0002",
    "\u03bd\u00a9\u0003\u0002\u0002\u0002\u03be\u03c0\u0005\u0014\u000b\u0002",
    "\u03bf\u03c1\u0005&\u0014\u0002\u03c0\u03bf\u0003\u0002\u0002\u0002",
    "\u03c0\u03c1\u0003\u0002\u0002\u0002\u03c1\u03c2\u0003\u0002\u0002\u0002",
    "\u03c2\u03c3\u0005\u001e\u0010\u0002\u03c3\u03c5\u0005\n\u0006\u0002",
    "\u03c4\u03c6\u0007\u0014\u0002\u0002\u03c5\u03c4\u0003\u0002\u0002\u0002",
    "\u03c5\u03c6\u0003\u0002\u0002\u0002\u03c6\u00ab\u0003\u0002\u0002\u0002",
    "\u03c7\u03c9\u0007*\u0002\u0002\u03c8\u03ca\u0005\u00b0Y\u0002\u03c9",
    "\u03c8\u0003\u0002\u0002\u0002\u03c9\u03ca\u0003\u0002\u0002\u0002\u03ca",
    "\u03cc\u0003\u0002\u0002\u0002\u03cb\u03cd\u0005\u00aeX\u0002\u03cc",
    "\u03cb\u0003\u0002\u0002\u0002\u03cc\u03cd\u0003\u0002\u0002\u0002\u03cd",
    "\u00ad\u0003\u0002\u0002\u0002\u03ce\u03cf\u0005\u0016\f\u0002\u03cf",
    "\u03d0\u0005\u00acW\u0002\u03d0\u00af\u0003\u0002\u0002\u0002\u03d1",
    "\u03d2\u0005\u0014\u000b\u0002\u03d2\u03d4\u0005\u00b2Z\u0002\u03d3",
    "\u03d5\u0007\u0014\u0002\u0002\u03d4\u03d3\u0003\u0002\u0002\u0002\u03d4",
    "\u03d5\u0003\u0002\u0002\u0002\u03d5\u00b1\u0003\u0002\u0002\u0002\u03d6",
    "\u03d7\bZ\u0001\u0002\u03d7\u03d8\u0007\u0015\u0002\u0002\u03d8\u03d9",
    "\u0005\u00b2Z\u0002\u03d9\u03da\u0007\u0016\u0002\u0002\u03da\u03ed",
    "\u0003\u0002\u0002\u0002\u03db\u03e7\u0005\u001c\u000f\u0002\u03dc\u03e8",
    "\u00050\u0019\u0002\u03dd\u03e8\u0005j6\u0002\u03de\u03e8\u0005*\u0016",
    "\u0002\u03df\u03e8\u00058\u001d\u0002\u03e0\u03e8\u0005> \u0002\u03e1",
    "\u03e8\u0005D#\u0002\u03e2\u03e8\u0005L\'\u0002\u03e3\u03e8\u0005T+",
    "\u0002\u03e4\u03e8\u0005x=\u0002\u03e5\u03e8\u0005\u00acW\u0002\u03e6",
    "\u03e8\u0005p9\u0002\u03e7\u03dc\u0003\u0002\u0002\u0002\u03e7\u03dd",
    "\u0003\u0002\u0002\u0002\u03e7\u03de\u0003\u0002\u0002\u0002\u03e7\u03df",
    "\u0003\u0002\u0002\u0002\u03e7\u03e0\u0003\u0002\u0002\u0002\u03e7\u03e1",
    "\u0003\u0002\u0002\u0002\u03e7\u03e2\u0003\u0002\u0002\u0002\u03e7\u03e3",
    "\u0003\u0002\u0002\u0002\u03e7\u03e4\u0003\u0002\u0002\u0002\u03e7\u03e5",
    "\u0003\u0002\u0002\u0002\u03e7\u03e6\u0003\u0002\u0002\u0002\u03e8\u03ea",
    "\u0003\u0002\u0002\u0002\u03e9\u03eb\u0007\u0011\u0002\u0002\u03ea\u03e9",
    "\u0003\u0002\u0002\u0002\u03ea\u03eb\u0003\u0002\u0002\u0002\u03eb\u03ed",
    "\u0003\u0002\u0002\u0002\u03ec\u03d6\u0003\u0002\u0002\u0002\u03ec\u03db",
    "\u0003\u0002\u0002\u0002\u03ed\u03f4\u0003\u0002\u0002\u0002\u03ee\u03ef",
    "\f\u0004\u0002\u0002\u03ef\u03f0\u0005(\u0015\u0002\u03f0\u03f1\u0005",
    "\u00b2Z\u0005\u03f1\u03f3\u0003\u0002\u0002\u0002\u03f2\u03ee\u0003",
    "\u0002\u0002\u0002\u03f3\u03f6\u0003\u0002\u0002\u0002\u03f4\u03f2\u0003",
    "\u0002\u0002\u0002\u03f4\u03f5\u0003\u0002\u0002\u0002\u03f5\u00b3\u0003",
    "\u0002\u0002\u0002\u03f6\u03f4\u0003\u0002\u0002\u0002\u0085\u00b7\u00bb",
    "\u00be\u00c3\u00ca\u00fc\u012e\u0134\u0156\u015a\u015d\u016b\u016f\u0175",
    "\u0179\u017d\u0180\u0188\u018d\u0197\u019a\u019c\u01a4\u01a9\u01ac\u01b3",
    "\u01b8\u01bc\u01bf\u01c6\u01cb\u01cf\u01d2\u01da\u01e9\u01ec\u01ee\u01f6",
    "\u01fb\u01fe\u0206\u0212\u0215\u0217\u021f\u0224\u0227\u022f\u023d\u0240",
    "\u0242\u024a\u024f\u0252\u0258\u025d\u0267\u026a\u026c\u0274\u0279\u027c",
    "\u0281\u0285\u028a\u028e\u0291\u0299\u029d\u02a2\u02a6\u02a9\u02b1\u02bb",
    "\u02be\u02c0\u02c8\u02cd\u02d0\u02d6\u02db\u02e8\u02eb\u02ed\u02f5\u02fa",
    "\u02fd\u0303\u0308\u0312\u0315\u0317\u031f\u0324\u0327\u032f\u0339\u033c",
    "\u033e\u0346\u034b\u034e\u0356\u0360\u0363\u0365\u036d\u0372\u0375\u037c",
    "\u0381\u038b\u038e\u0390\u0398\u039d\u03a0\u03a9\u03ae\u03b2\u03b5\u03bc",
    "\u03c0\u03c5\u03c9\u03cc\u03d4\u03e7\u03ea\u03ec\u03f4"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'\"'", "'.'", "'must '", "'must be equal to '", 
                     "'where '", "'of '", "' and '", "' or '", "'have '", 
                     "'equal to '", "'include '", "'start with '", "'end with '", 
                     "'not '", null, null, null, "','", "'('", "')'", "'name '", 
                     "'annotation '", "'extend '", "'extension '", "'implementation '", 
                     "'function '", "'abstract function '", "'constructor '", 
                     "'parameter '", "'type '", "'specifier '", "'return value '", 
                     "'declaration statement '", "'expression statement '", 
                     "'initial value '", "'argument '", "'call '", "'caller '", 
                     "'value '" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, "SPACE", "Alphabet", 
                      "NL", "Comma", "LPAREN", "RPAREN", "NAME", "ANNOTATION", 
                      "EXTEND", "EXTENSION", "IMPLEMENTATION", "FUNCTION", 
                      "AbstractFunctions", "CONSTRUCTOR", "PARAMETER", "TYPES", 
                      "SPECIFIER", "ReturnValue", "DeclarationStatement", 
                      "ExpressionStatement", "InitValue", "ARGUMENT", "CALL", 
                      "CALLER", "VALUE", "CLASSES" ];

var ruleNames =  [ "inputSentence", "designRule", "mustClause", "mustBeEqualToClause", 
                   "words", "end", "emptyLine", "must", "mustBeEqualTo", 
                   "where", "of", "and", "or", "have", "equalsTo", "includes", 
                   "startsWith", "endsWith", "not", "binary", "names", "nameOf", 
                   "nameCondition", "annotations", "annotationOf", "annotationCondition", 
                   "annotationExpression", "extensions", "extensionOf", 
                   "extensionCondition", "implementations", "implementationOf", 
                   "implementationCondition", "functions", "functionOf", 
                   "functionCondition", "functionExpression", "abstractFunctions", 
                   "abstractFunctionOf", "abstractFunctionCondition", "abstractFunctionExpression", 
                   "constructors", "constructorOf", "constructorCondition", 
                   "constructorExpression", "parameters", "parameterOf", 
                   "parameterCondition", "parameterExpression", "types", 
                   "typeOf", "typeCondition", "specifiers", "specifierOf", 
                   "specifierCondition", "returnValues", "returnValueOf", 
                   "returnValueCondition", "returnValueExpression", "declarationStatements", 
                   "declarationStatementOf", "declarationStatementCondition", 
                   "declarationStatementExpression", "expressionStatements", 
                   "expressionStatementOf", "expressionStatementCondition", 
                   "expressionStatementExpression", "initValues", "initValueOf", 
                   "initValueCondition", "initValueExpression", "arguments", 
                   "argumentOf", "argumentCondition", "argumentExpression", 
                   "calls", "callOf", "callCondition", "callerExpression", 
                   "callers", "callerOf", "callerCondition", "values", "valueOf", 
                   "valueCondition", "classes", "classOf", "classCondition", 
                   "classExpression" ];

function myGrammarParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

myGrammarParser.prototype = Object.create(antlr4.Parser.prototype);
myGrammarParser.prototype.constructor = myGrammarParser;

Object.defineProperty(myGrammarParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

myGrammarParser.EOF = antlr4.Token.EOF;
myGrammarParser.T__0 = 1;
myGrammarParser.T__1 = 2;
myGrammarParser.T__2 = 3;
myGrammarParser.T__3 = 4;
myGrammarParser.T__4 = 5;
myGrammarParser.T__5 = 6;
myGrammarParser.T__6 = 7;
myGrammarParser.T__7 = 8;
myGrammarParser.T__8 = 9;
myGrammarParser.T__9 = 10;
myGrammarParser.T__10 = 11;
myGrammarParser.T__11 = 12;
myGrammarParser.T__12 = 13;
myGrammarParser.T__13 = 14;
myGrammarParser.SPACE = 15;
myGrammarParser.Alphabet = 16;
myGrammarParser.NL = 17;
myGrammarParser.Comma = 18;
myGrammarParser.LPAREN = 19;
myGrammarParser.RPAREN = 20;
myGrammarParser.NAME = 21;
myGrammarParser.ANNOTATION = 22;
myGrammarParser.EXTEND = 23;
myGrammarParser.EXTENSION = 24;
myGrammarParser.IMPLEMENTATION = 25;
myGrammarParser.FUNCTION = 26;
myGrammarParser.AbstractFunctions = 27;
myGrammarParser.CONSTRUCTOR = 28;
myGrammarParser.PARAMETER = 29;
myGrammarParser.TYPES = 30;
myGrammarParser.SPECIFIER = 31;
myGrammarParser.ReturnValue = 32;
myGrammarParser.DeclarationStatement = 33;
myGrammarParser.ExpressionStatement = 34;
myGrammarParser.InitValue = 35;
myGrammarParser.ARGUMENT = 36;
myGrammarParser.CALL = 37;
myGrammarParser.CALLER = 38;
myGrammarParser.VALUE = 39;
myGrammarParser.CLASSES = 40;

myGrammarParser.RULE_inputSentence = 0;
myGrammarParser.RULE_designRule = 1;
myGrammarParser.RULE_mustClause = 2;
myGrammarParser.RULE_mustBeEqualToClause = 3;
myGrammarParser.RULE_words = 4;
myGrammarParser.RULE_end = 5;
myGrammarParser.RULE_emptyLine = 6;
myGrammarParser.RULE_must = 7;
myGrammarParser.RULE_mustBeEqualTo = 8;
myGrammarParser.RULE_where = 9;
myGrammarParser.RULE_of = 10;
myGrammarParser.RULE_and = 11;
myGrammarParser.RULE_or = 12;
myGrammarParser.RULE_have = 13;
myGrammarParser.RULE_equalsTo = 14;
myGrammarParser.RULE_includes = 15;
myGrammarParser.RULE_startsWith = 16;
myGrammarParser.RULE_endsWith = 17;
myGrammarParser.RULE_not = 18;
myGrammarParser.RULE_binary = 19;
myGrammarParser.RULE_names = 20;
myGrammarParser.RULE_nameOf = 21;
myGrammarParser.RULE_nameCondition = 22;
myGrammarParser.RULE_annotations = 23;
myGrammarParser.RULE_annotationOf = 24;
myGrammarParser.RULE_annotationCondition = 25;
myGrammarParser.RULE_annotationExpression = 26;
myGrammarParser.RULE_extensions = 27;
myGrammarParser.RULE_extensionOf = 28;
myGrammarParser.RULE_extensionCondition = 29;
myGrammarParser.RULE_implementations = 30;
myGrammarParser.RULE_implementationOf = 31;
myGrammarParser.RULE_implementationCondition = 32;
myGrammarParser.RULE_functions = 33;
myGrammarParser.RULE_functionOf = 34;
myGrammarParser.RULE_functionCondition = 35;
myGrammarParser.RULE_functionExpression = 36;
myGrammarParser.RULE_abstractFunctions = 37;
myGrammarParser.RULE_abstractFunctionOf = 38;
myGrammarParser.RULE_abstractFunctionCondition = 39;
myGrammarParser.RULE_abstractFunctionExpression = 40;
myGrammarParser.RULE_constructors = 41;
myGrammarParser.RULE_constructorOf = 42;
myGrammarParser.RULE_constructorCondition = 43;
myGrammarParser.RULE_constructorExpression = 44;
myGrammarParser.RULE_parameters = 45;
myGrammarParser.RULE_parameterOf = 46;
myGrammarParser.RULE_parameterCondition = 47;
myGrammarParser.RULE_parameterExpression = 48;
myGrammarParser.RULE_types = 49;
myGrammarParser.RULE_typeOf = 50;
myGrammarParser.RULE_typeCondition = 51;
myGrammarParser.RULE_specifiers = 52;
myGrammarParser.RULE_specifierOf = 53;
myGrammarParser.RULE_specifierCondition = 54;
myGrammarParser.RULE_returnValues = 55;
myGrammarParser.RULE_returnValueOf = 56;
myGrammarParser.RULE_returnValueCondition = 57;
myGrammarParser.RULE_returnValueExpression = 58;
myGrammarParser.RULE_declarationStatements = 59;
myGrammarParser.RULE_declarationStatementOf = 60;
myGrammarParser.RULE_declarationStatementCondition = 61;
myGrammarParser.RULE_declarationStatementExpression = 62;
myGrammarParser.RULE_expressionStatements = 63;
myGrammarParser.RULE_expressionStatementOf = 64;
myGrammarParser.RULE_expressionStatementCondition = 65;
myGrammarParser.RULE_expressionStatementExpression = 66;
myGrammarParser.RULE_initValues = 67;
myGrammarParser.RULE_initValueOf = 68;
myGrammarParser.RULE_initValueCondition = 69;
myGrammarParser.RULE_initValueExpression = 70;
myGrammarParser.RULE_arguments = 71;
myGrammarParser.RULE_argumentOf = 72;
myGrammarParser.RULE_argumentCondition = 73;
myGrammarParser.RULE_argumentExpression = 74;
myGrammarParser.RULE_calls = 75;
myGrammarParser.RULE_callOf = 76;
myGrammarParser.RULE_callCondition = 77;
myGrammarParser.RULE_callerExpression = 78;
myGrammarParser.RULE_callers = 79;
myGrammarParser.RULE_callerOf = 80;
myGrammarParser.RULE_callerCondition = 81;
myGrammarParser.RULE_values = 82;
myGrammarParser.RULE_valueOf = 83;
myGrammarParser.RULE_valueCondition = 84;
myGrammarParser.RULE_classes = 85;
myGrammarParser.RULE_classOf = 86;
myGrammarParser.RULE_classCondition = 87;
myGrammarParser.RULE_classExpression = 88;

function InputSentenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_inputSentence;
    return this;
}

InputSentenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InputSentenceContext.prototype.constructor = InputSentenceContext;

InputSentenceContext.prototype.EOF = function() {
    return this.getToken(myGrammarParser.EOF, 0);
};

InputSentenceContext.prototype.designRule = function() {
    return this.getTypedRuleContext(DesignRuleContext,0);
};

InputSentenceContext.prototype.end = function() {
    return this.getTypedRuleContext(EndContext,0);
};

InputSentenceContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.NL);
    } else {
        return this.getToken(myGrammarParser.NL, i);
    }
};


InputSentenceContext.prototype.emptyLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EmptyLineContext);
    } else {
        return this.getTypedRuleContext(EmptyLineContext,i);
    }
};

InputSentenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterInputSentence(this);
	}
};

InputSentenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitInputSentence(this);
	}
};




myGrammarParser.InputSentenceContext = InputSentenceContext;

myGrammarParser.prototype.inputSentence = function() {

    var localctx = new InputSentenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, myGrammarParser.RULE_inputSentence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 185;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.EOF:
        case myGrammarParser.T__1:
        case myGrammarParser.NL:
            this.state = 181;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 178;
                    this.emptyLine(); 
                }
                this.state = 183;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
            }

            break;
        case myGrammarParser.ANNOTATION:
        case myGrammarParser.FUNCTION:
        case myGrammarParser.AbstractFunctions:
        case myGrammarParser.CONSTRUCTOR:
        case myGrammarParser.PARAMETER:
        case myGrammarParser.ReturnValue:
        case myGrammarParser.DeclarationStatement:
        case myGrammarParser.ExpressionStatement:
        case myGrammarParser.InitValue:
        case myGrammarParser.ARGUMENT:
        case myGrammarParser.CALLER:
        case myGrammarParser.CLASSES:
            this.state = 184;
            this.designRule();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 188;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.T__1) {
            this.state = 187;
            this.end();
        }

        this.state = 193;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===myGrammarParser.NL) {
            this.state = 190;
            this.match(myGrammarParser.NL);
            this.state = 195;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 196;
        this.match(myGrammarParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DesignRuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_designRule;
    return this;
}

DesignRuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DesignRuleContext.prototype.constructor = DesignRuleContext;

DesignRuleContext.prototype.mustClause = function() {
    return this.getTypedRuleContext(MustClauseContext,0);
};

DesignRuleContext.prototype.mustBeEqualToClause = function() {
    return this.getTypedRuleContext(MustBeEqualToClauseContext,0);
};

DesignRuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterDesignRule(this);
	}
};

DesignRuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitDesignRule(this);
	}
};




myGrammarParser.DesignRuleContext = DesignRuleContext;

myGrammarParser.prototype.designRule = function() {

    var localctx = new DesignRuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, myGrammarParser.RULE_designRule);
    try {
        this.state = 200;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 198;
            this.mustClause();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 199;
            this.mustBeEqualToClause();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MustClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_mustClause;
    return this;
}

MustClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MustClauseContext.prototype.constructor = MustClauseContext;

MustClauseContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

MustClauseContext.prototype.must = function() {
    return this.getTypedRuleContext(MustContext,0);
};

MustClauseContext.prototype.functionExpression = function() {
    return this.getTypedRuleContext(FunctionExpressionContext,0);
};

MustClauseContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

MustClauseContext.prototype.abstractFunctionExpression = function() {
    return this.getTypedRuleContext(AbstractFunctionExpressionContext,0);
};

MustClauseContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

MustClauseContext.prototype.constructorExpression = function() {
    return this.getTypedRuleContext(ConstructorExpressionContext,0);
};

MustClauseContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

MustClauseContext.prototype.annotationExpression = function() {
    return this.getTypedRuleContext(AnnotationExpressionContext,0);
};

MustClauseContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

MustClauseContext.prototype.parameterExpression = function() {
    return this.getTypedRuleContext(ParameterExpressionContext,0);
};

MustClauseContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

MustClauseContext.prototype.returnValueExpression = function() {
    return this.getTypedRuleContext(ReturnValueExpressionContext,0);
};

MustClauseContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

MustClauseContext.prototype.declarationStatementExpression = function() {
    return this.getTypedRuleContext(DeclarationStatementExpressionContext,0);
};

MustClauseContext.prototype.expressionStatements = function() {
    return this.getTypedRuleContext(ExpressionStatementsContext,0);
};

MustClauseContext.prototype.expressionStatementExpression = function() {
    return this.getTypedRuleContext(ExpressionStatementExpressionContext,0);
};

MustClauseContext.prototype.initValues = function() {
    return this.getTypedRuleContext(InitValuesContext,0);
};

MustClauseContext.prototype.initValueExpression = function() {
    return this.getTypedRuleContext(InitValueExpressionContext,0);
};

MustClauseContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

MustClauseContext.prototype.argumentExpression = function() {
    return this.getTypedRuleContext(ArgumentExpressionContext,0);
};

MustClauseContext.prototype.callers = function() {
    return this.getTypedRuleContext(CallersContext,0);
};

MustClauseContext.prototype.callerExpression = function() {
    return this.getTypedRuleContext(CallerExpressionContext,0);
};

MustClauseContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

MustClauseContext.prototype.classExpression = function() {
    return this.getTypedRuleContext(ClassExpressionContext,0);
};

MustClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterMustClause(this);
	}
};

MustClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitMustClause(this);
	}
};




myGrammarParser.MustClauseContext = MustClauseContext;

myGrammarParser.prototype.mustClause = function() {

    var localctx = new MustClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, myGrammarParser.RULE_mustClause);
    try {
        this.state = 250;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.FUNCTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 202;
            this.functions();
            this.state = 203;
            this.must();
            this.state = 204;
            this.functionExpression(0);
            break;
        case myGrammarParser.AbstractFunctions:
            this.enterOuterAlt(localctx, 2);
            this.state = 206;
            this.abstractFunctions();
            this.state = 207;
            this.must();
            this.state = 208;
            this.abstractFunctionExpression(0);
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.enterOuterAlt(localctx, 3);
            this.state = 210;
            this.constructors();
            this.state = 211;
            this.must();
            this.state = 212;
            this.constructorExpression(0);
            break;
        case myGrammarParser.ANNOTATION:
            this.enterOuterAlt(localctx, 4);
            this.state = 214;
            this.annotations();
            this.state = 215;
            this.must();
            this.state = 216;
            this.annotationExpression(0);
            break;
        case myGrammarParser.PARAMETER:
            this.enterOuterAlt(localctx, 5);
            this.state = 218;
            this.parameters();
            this.state = 219;
            this.must();
            this.state = 220;
            this.parameterExpression(0);
            break;
        case myGrammarParser.ReturnValue:
            this.enterOuterAlt(localctx, 6);
            this.state = 222;
            this.returnValues();
            this.state = 223;
            this.must();
            this.state = 224;
            this.returnValueExpression(0);
            break;
        case myGrammarParser.DeclarationStatement:
            this.enterOuterAlt(localctx, 7);
            this.state = 226;
            this.declarationStatements();
            this.state = 227;
            this.must();
            this.state = 228;
            this.declarationStatementExpression(0);
            break;
        case myGrammarParser.ExpressionStatement:
            this.enterOuterAlt(localctx, 8);
            this.state = 230;
            this.expressionStatements();
            this.state = 231;
            this.must();
            this.state = 232;
            this.expressionStatementExpression(0);
            break;
        case myGrammarParser.InitValue:
            this.enterOuterAlt(localctx, 9);
            this.state = 234;
            this.initValues();
            this.state = 235;
            this.must();
            this.state = 236;
            this.initValueExpression(0);
            break;
        case myGrammarParser.ARGUMENT:
            this.enterOuterAlt(localctx, 10);
            this.state = 238;
            this.arguments();
            this.state = 239;
            this.must();
            this.state = 240;
            this.argumentExpression(0);
            break;
        case myGrammarParser.CALLER:
            this.enterOuterAlt(localctx, 11);
            this.state = 242;
            this.callers();
            this.state = 243;
            this.must();
            this.state = 244;
            this.callerExpression(0);
            break;
        case myGrammarParser.CLASSES:
            this.enterOuterAlt(localctx, 12);
            this.state = 246;
            this.classes();
            this.state = 247;
            this.must();
            this.state = 248;
            this.classExpression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MustBeEqualToClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_mustBeEqualToClause;
    return this;
}

MustBeEqualToClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MustBeEqualToClauseContext.prototype.constructor = MustBeEqualToClauseContext;

MustBeEqualToClauseContext.prototype.functions = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionsContext);
    } else {
        return this.getTypedRuleContext(FunctionsContext,i);
    }
};

MustBeEqualToClauseContext.prototype.mustBeEqualTo = function() {
    return this.getTypedRuleContext(MustBeEqualToContext,0);
};

MustBeEqualToClauseContext.prototype.abstractFunctions = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AbstractFunctionsContext);
    } else {
        return this.getTypedRuleContext(AbstractFunctionsContext,i);
    }
};

MustBeEqualToClauseContext.prototype.constructors = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstructorsContext);
    } else {
        return this.getTypedRuleContext(ConstructorsContext,i);
    }
};

MustBeEqualToClauseContext.prototype.annotations = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationsContext);
    } else {
        return this.getTypedRuleContext(AnnotationsContext,i);
    }
};

MustBeEqualToClauseContext.prototype.parameters = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParametersContext);
    } else {
        return this.getTypedRuleContext(ParametersContext,i);
    }
};

MustBeEqualToClauseContext.prototype.returnValues = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ReturnValuesContext);
    } else {
        return this.getTypedRuleContext(ReturnValuesContext,i);
    }
};

MustBeEqualToClauseContext.prototype.declarationStatements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationStatementsContext);
    } else {
        return this.getTypedRuleContext(DeclarationStatementsContext,i);
    }
};

MustBeEqualToClauseContext.prototype.expressionStatements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionStatementsContext);
    } else {
        return this.getTypedRuleContext(ExpressionStatementsContext,i);
    }
};

MustBeEqualToClauseContext.prototype.initValues = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitValuesContext);
    } else {
        return this.getTypedRuleContext(InitValuesContext,i);
    }
};

MustBeEqualToClauseContext.prototype.arguments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentsContext);
    } else {
        return this.getTypedRuleContext(ArgumentsContext,i);
    }
};

MustBeEqualToClauseContext.prototype.callers = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CallersContext);
    } else {
        return this.getTypedRuleContext(CallersContext,i);
    }
};

MustBeEqualToClauseContext.prototype.classes = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassesContext);
    } else {
        return this.getTypedRuleContext(ClassesContext,i);
    }
};

MustBeEqualToClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterMustBeEqualToClause(this);
	}
};

MustBeEqualToClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitMustBeEqualToClause(this);
	}
};




myGrammarParser.MustBeEqualToClauseContext = MustBeEqualToClauseContext;

myGrammarParser.prototype.mustBeEqualToClause = function() {

    var localctx = new MustBeEqualToClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, myGrammarParser.RULE_mustBeEqualToClause);
    try {
        this.state = 300;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.FUNCTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 252;
            this.functions();
            this.state = 253;
            this.mustBeEqualTo();
            this.state = 254;
            this.functions();
            break;
        case myGrammarParser.AbstractFunctions:
            this.enterOuterAlt(localctx, 2);
            this.state = 256;
            this.abstractFunctions();
            this.state = 257;
            this.mustBeEqualTo();
            this.state = 258;
            this.abstractFunctions();
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.enterOuterAlt(localctx, 3);
            this.state = 260;
            this.constructors();
            this.state = 261;
            this.mustBeEqualTo();
            this.state = 262;
            this.constructors();
            break;
        case myGrammarParser.ANNOTATION:
            this.enterOuterAlt(localctx, 4);
            this.state = 264;
            this.annotations();
            this.state = 265;
            this.mustBeEqualTo();
            this.state = 266;
            this.annotations();
            break;
        case myGrammarParser.PARAMETER:
            this.enterOuterAlt(localctx, 5);
            this.state = 268;
            this.parameters();
            this.state = 269;
            this.mustBeEqualTo();
            this.state = 270;
            this.parameters();
            break;
        case myGrammarParser.ReturnValue:
            this.enterOuterAlt(localctx, 6);
            this.state = 272;
            this.returnValues();
            this.state = 273;
            this.mustBeEqualTo();
            this.state = 274;
            this.returnValues();
            break;
        case myGrammarParser.DeclarationStatement:
            this.enterOuterAlt(localctx, 7);
            this.state = 276;
            this.declarationStatements();
            this.state = 277;
            this.mustBeEqualTo();
            this.state = 278;
            this.declarationStatements();
            break;
        case myGrammarParser.ExpressionStatement:
            this.enterOuterAlt(localctx, 8);
            this.state = 280;
            this.expressionStatements();
            this.state = 281;
            this.mustBeEqualTo();
            this.state = 282;
            this.expressionStatements();
            break;
        case myGrammarParser.InitValue:
            this.enterOuterAlt(localctx, 9);
            this.state = 284;
            this.initValues();
            this.state = 285;
            this.mustBeEqualTo();
            this.state = 286;
            this.initValues();
            break;
        case myGrammarParser.ARGUMENT:
            this.enterOuterAlt(localctx, 10);
            this.state = 288;
            this.arguments();
            this.state = 289;
            this.mustBeEqualTo();
            this.state = 290;
            this.arguments();
            break;
        case myGrammarParser.CALLER:
            this.enterOuterAlt(localctx, 11);
            this.state = 292;
            this.callers();
            this.state = 293;
            this.mustBeEqualTo();
            this.state = 294;
            this.callers();
            break;
        case myGrammarParser.CLASSES:
            this.enterOuterAlt(localctx, 12);
            this.state = 296;
            this.classes();
            this.state = 297;
            this.mustBeEqualTo();
            this.state = 298;
            this.classes();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WordsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_words;
    return this;
}

WordsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WordsContext.prototype.constructor = WordsContext;

WordsContext.prototype.Alphabet = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.Alphabet);
    } else {
        return this.getToken(myGrammarParser.Alphabet, i);
    }
};


WordsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterWords(this);
	}
};

WordsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitWords(this);
	}
};




myGrammarParser.WordsContext = WordsContext;

myGrammarParser.prototype.words = function() {

    var localctx = new WordsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, myGrammarParser.RULE_words);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 302;
        this.match(myGrammarParser.T__0);
        this.state = 304; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 303;
            this.match(myGrammarParser.Alphabet);
            this.state = 306; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===myGrammarParser.Alphabet);
        this.state = 308;
        this.match(myGrammarParser.T__0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_end;
    return this;
}

EndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EndContext.prototype.constructor = EndContext;


EndContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterEnd(this);
	}
};

EndContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitEnd(this);
	}
};




myGrammarParser.EndContext = EndContext;

myGrammarParser.prototype.end = function() {

    var localctx = new EndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, myGrammarParser.RULE_end);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 310;
        this.match(myGrammarParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmptyLineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_emptyLine;
    return this;
}

EmptyLineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyLineContext.prototype.constructor = EmptyLineContext;

EmptyLineContext.prototype.NL = function() {
    return this.getToken(myGrammarParser.NL, 0);
};

EmptyLineContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterEmptyLine(this);
	}
};

EmptyLineContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitEmptyLine(this);
	}
};




myGrammarParser.EmptyLineContext = EmptyLineContext;

myGrammarParser.prototype.emptyLine = function() {

    var localctx = new EmptyLineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, myGrammarParser.RULE_emptyLine);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 312;
        this.match(myGrammarParser.NL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MustContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_must;
    return this;
}

MustContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MustContext.prototype.constructor = MustContext;


MustContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterMust(this);
	}
};

MustContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitMust(this);
	}
};




myGrammarParser.MustContext = MustContext;

myGrammarParser.prototype.must = function() {

    var localctx = new MustContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, myGrammarParser.RULE_must);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 314;
        this.match(myGrammarParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MustBeEqualToContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_mustBeEqualTo;
    return this;
}

MustBeEqualToContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MustBeEqualToContext.prototype.constructor = MustBeEqualToContext;


MustBeEqualToContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterMustBeEqualTo(this);
	}
};

MustBeEqualToContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitMustBeEqualTo(this);
	}
};




myGrammarParser.MustBeEqualToContext = MustBeEqualToContext;

myGrammarParser.prototype.mustBeEqualTo = function() {

    var localctx = new MustBeEqualToContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, myGrammarParser.RULE_mustBeEqualTo);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 316;
        this.match(myGrammarParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhereContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_where;
    return this;
}

WhereContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhereContext.prototype.constructor = WhereContext;


WhereContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterWhere(this);
	}
};

WhereContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitWhere(this);
	}
};




myGrammarParser.WhereContext = WhereContext;

myGrammarParser.prototype.where = function() {

    var localctx = new WhereContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, myGrammarParser.RULE_where);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 318;
        this.match(myGrammarParser.T__4);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_of;
    return this;
}

OfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OfContext.prototype.constructor = OfContext;


OfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterOf(this);
	}
};

OfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitOf(this);
	}
};




myGrammarParser.OfContext = OfContext;

myGrammarParser.prototype.of = function() {

    var localctx = new OfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, myGrammarParser.RULE_of);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 320;
        this.match(myGrammarParser.T__5);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_and;
    return this;
}

AndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AndContext.prototype.constructor = AndContext;


AndContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAnd(this);
	}
};

AndContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAnd(this);
	}
};




myGrammarParser.AndContext = AndContext;

myGrammarParser.prototype.and = function() {

    var localctx = new AndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, myGrammarParser.RULE_and);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 322;
        this.match(myGrammarParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_or;
    return this;
}

OrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrContext.prototype.constructor = OrContext;


OrContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterOr(this);
	}
};

OrContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitOr(this);
	}
};




myGrammarParser.OrContext = OrContext;

myGrammarParser.prototype.or = function() {

    var localctx = new OrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, myGrammarParser.RULE_or);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 324;
        this.match(myGrammarParser.T__7);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HaveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_have;
    return this;
}

HaveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HaveContext.prototype.constructor = HaveContext;


HaveContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterHave(this);
	}
};

HaveContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitHave(this);
	}
};




myGrammarParser.HaveContext = HaveContext;

myGrammarParser.prototype.have = function() {

    var localctx = new HaveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, myGrammarParser.RULE_have);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 326;
        this.match(myGrammarParser.T__8);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EqualsToContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_equalsTo;
    return this;
}

EqualsToContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqualsToContext.prototype.constructor = EqualsToContext;


EqualsToContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterEqualsTo(this);
	}
};

EqualsToContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitEqualsTo(this);
	}
};




myGrammarParser.EqualsToContext = EqualsToContext;

myGrammarParser.prototype.equalsTo = function() {

    var localctx = new EqualsToContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, myGrammarParser.RULE_equalsTo);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 328;
        this.match(myGrammarParser.T__9);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IncludesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_includes;
    return this;
}

IncludesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IncludesContext.prototype.constructor = IncludesContext;


IncludesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterIncludes(this);
	}
};

IncludesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitIncludes(this);
	}
};




myGrammarParser.IncludesContext = IncludesContext;

myGrammarParser.prototype.includes = function() {

    var localctx = new IncludesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, myGrammarParser.RULE_includes);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 330;
        this.match(myGrammarParser.T__10);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StartsWithContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_startsWith;
    return this;
}

StartsWithContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartsWithContext.prototype.constructor = StartsWithContext;


StartsWithContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterStartsWith(this);
	}
};

StartsWithContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitStartsWith(this);
	}
};




myGrammarParser.StartsWithContext = StartsWithContext;

myGrammarParser.prototype.startsWith = function() {

    var localctx = new StartsWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, myGrammarParser.RULE_startsWith);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 332;
        this.match(myGrammarParser.T__11);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EndsWithContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_endsWith;
    return this;
}

EndsWithContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EndsWithContext.prototype.constructor = EndsWithContext;


EndsWithContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterEndsWith(this);
	}
};

EndsWithContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitEndsWith(this);
	}
};




myGrammarParser.EndsWithContext = EndsWithContext;

myGrammarParser.prototype.endsWith = function() {

    var localctx = new EndsWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, myGrammarParser.RULE_endsWith);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 334;
        this.match(myGrammarParser.T__12);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NotContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_not;
    return this;
}

NotContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NotContext.prototype.constructor = NotContext;


NotContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterNot(this);
	}
};

NotContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitNot(this);
	}
};




myGrammarParser.NotContext = NotContext;

myGrammarParser.prototype.not = function() {

    var localctx = new NotContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, myGrammarParser.RULE_not);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 336;
        this.match(myGrammarParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BinaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_binary;
    return this;
}

BinaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BinaryContext.prototype.constructor = BinaryContext;

BinaryContext.prototype.and = function() {
    return this.getTypedRuleContext(AndContext,0);
};

BinaryContext.prototype.or = function() {
    return this.getTypedRuleContext(OrContext,0);
};

BinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterBinary(this);
	}
};

BinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitBinary(this);
	}
};




myGrammarParser.BinaryContext = BinaryContext;

myGrammarParser.prototype.binary = function() {

    var localctx = new BinaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, myGrammarParser.RULE_binary);
    try {
        this.state = 340;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.T__6:
            this.enterOuterAlt(localctx, 1);
            this.state = 338;
            this.and();
            break;
        case myGrammarParser.T__7:
            this.enterOuterAlt(localctx, 2);
            this.state = 339;
            this.or();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_names;
    return this;
}

NamesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamesContext.prototype.constructor = NamesContext;

NamesContext.prototype.NAME = function() {
    return this.getToken(myGrammarParser.NAME, 0);
};

NamesContext.prototype.nameCondition = function() {
    return this.getTypedRuleContext(NameConditionContext,0);
};

NamesContext.prototype.nameOf = function() {
    return this.getTypedRuleContext(NameOfContext,0);
};

NamesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterNames(this);
	}
};

NamesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitNames(this);
	}
};




myGrammarParser.NamesContext = NamesContext;

myGrammarParser.prototype.names = function() {

    var localctx = new NamesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, myGrammarParser.RULE_names);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 342;
        this.match(myGrammarParser.NAME);
        this.state = 344;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        if(la_===1) {
            this.state = 343;
            this.nameCondition();

        }
        this.state = 347;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        if(la_===1) {
            this.state = 346;
            this.nameOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_nameOf;
    return this;
}

NameOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameOfContext.prototype.constructor = NameOfContext;

NameOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

NameOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

NameOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

NameOfContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

NameOfContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

NameOfContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

NameOfContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

NameOfContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

NameOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

NameOfContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

NameOfContext.prototype.extensions = function() {
    return this.getTypedRuleContext(ExtensionsContext,0);
};

NameOfContext.prototype.implementations = function() {
    return this.getTypedRuleContext(ImplementationsContext,0);
};

NameOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterNameOf(this);
	}
};

NameOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitNameOf(this);
	}
};




myGrammarParser.NameOfContext = NameOfContext;

myGrammarParser.prototype.nameOf = function() {

    var localctx = new NameOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, myGrammarParser.RULE_nameOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 349;
        this.of();
        this.state = 361;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.CLASSES:
            this.state = 350;
            this.classes();
            break;
        case myGrammarParser.FUNCTION:
            this.state = 351;
            this.functions();
            break;
        case myGrammarParser.AbstractFunctions:
            this.state = 352;
            this.abstractFunctions();
            break;
        case myGrammarParser.DeclarationStatement:
            this.state = 353;
            this.declarationStatements();
            break;
        case myGrammarParser.PARAMETER:
            this.state = 354;
            this.parameters();
            break;
        case myGrammarParser.ANNOTATION:
            this.state = 355;
            this.annotations();
            break;
        case myGrammarParser.TYPES:
            this.state = 356;
            this.types();
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.state = 357;
            this.constructors();
            break;
        case myGrammarParser.ARGUMENT:
            this.state = 358;
            this.arguments();
            break;
        case myGrammarParser.EXTENSION:
            this.state = 359;
            this.extensions();
            break;
        case myGrammarParser.IMPLEMENTATION:
            this.state = 360;
            this.implementations();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_nameCondition;
    return this;
}

NameConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameConditionContext.prototype.constructor = NameConditionContext;

NameConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

NameConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

NameConditionContext.prototype.equalsTo = function() {
    return this.getTypedRuleContext(EqualsToContext,0);
};

NameConditionContext.prototype.includes = function() {
    return this.getTypedRuleContext(IncludesContext,0);
};

NameConditionContext.prototype.startsWith = function() {
    return this.getTypedRuleContext(StartsWithContext,0);
};

NameConditionContext.prototype.endsWith = function() {
    return this.getTypedRuleContext(EndsWithContext,0);
};

NameConditionContext.prototype.not = function() {
    return this.getTypedRuleContext(NotContext,0);
};

NameConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

NameConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterNameCondition(this);
	}
};

NameConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitNameCondition(this);
	}
};




myGrammarParser.NameConditionContext = NameConditionContext;

myGrammarParser.prototype.nameCondition = function() {

    var localctx = new NameConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, myGrammarParser.RULE_nameCondition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 363;
        this.where();
        this.state = 365;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.T__13) {
            this.state = 364;
            this.not();
        }

        this.state = 371;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.T__9:
            this.state = 367;
            this.equalsTo();
            break;
        case myGrammarParser.T__10:
            this.state = 368;
            this.includes();
            break;
        case myGrammarParser.T__11:
            this.state = 369;
            this.startsWith();
            break;
        case myGrammarParser.T__12:
            this.state = 370;
            this.endsWith();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 373;
        this.words();
        this.state = 375;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
        if(la_===1) {
            this.state = 374;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_annotations;
    return this;
}

AnnotationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationsContext.prototype.constructor = AnnotationsContext;

AnnotationsContext.prototype.ANNOTATION = function() {
    return this.getToken(myGrammarParser.ANNOTATION, 0);
};

AnnotationsContext.prototype.annotationCondition = function() {
    return this.getTypedRuleContext(AnnotationConditionContext,0);
};

AnnotationsContext.prototype.annotationOf = function() {
    return this.getTypedRuleContext(AnnotationOfContext,0);
};

AnnotationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAnnotations(this);
	}
};

AnnotationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAnnotations(this);
	}
};




myGrammarParser.AnnotationsContext = AnnotationsContext;

myGrammarParser.prototype.annotations = function() {

    var localctx = new AnnotationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, myGrammarParser.RULE_annotations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 377;
        this.match(myGrammarParser.ANNOTATION);
        this.state = 379;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        if(la_===1) {
            this.state = 378;
            this.annotationCondition();

        }
        this.state = 382;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        if(la_===1) {
            this.state = 381;
            this.annotationOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_annotationOf;
    return this;
}

AnnotationOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationOfContext.prototype.constructor = AnnotationOfContext;

AnnotationOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

AnnotationOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

AnnotationOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

AnnotationOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

AnnotationOfContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

AnnotationOfContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

AnnotationOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAnnotationOf(this);
	}
};

AnnotationOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAnnotationOf(this);
	}
};




myGrammarParser.AnnotationOfContext = AnnotationOfContext;

myGrammarParser.prototype.annotationOf = function() {

    var localctx = new AnnotationOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, myGrammarParser.RULE_annotationOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 384;
        this.of();
        this.state = 390;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.CLASSES:
            this.state = 385;
            this.classes();
            break;
        case myGrammarParser.FUNCTION:
            this.state = 386;
            this.functions();
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.state = 387;
            this.constructors();
            break;
        case myGrammarParser.AbstractFunctions:
            this.state = 388;
            this.abstractFunctions();
            break;
        case myGrammarParser.DeclarationStatement:
            this.state = 389;
            this.declarationStatements();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_annotationCondition;
    return this;
}

AnnotationConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationConditionContext.prototype.constructor = AnnotationConditionContext;

AnnotationConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

AnnotationConditionContext.prototype.annotationExpression = function() {
    return this.getTypedRuleContext(AnnotationExpressionContext,0);
};

AnnotationConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

AnnotationConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAnnotationCondition(this);
	}
};

AnnotationConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAnnotationCondition(this);
	}
};




myGrammarParser.AnnotationConditionContext = AnnotationConditionContext;

myGrammarParser.prototype.annotationCondition = function() {

    var localctx = new AnnotationConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, myGrammarParser.RULE_annotationCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 392;
        this.where();
        this.state = 393;
        this.annotationExpression(0);
        this.state = 395;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        if(la_===1) {
            this.state = 394;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_annotationExpression;
    this.left = null; // AnnotationExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // AnnotationExpressionContext
    return this;
}

AnnotationExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationExpressionContext.prototype.constructor = AnnotationExpressionContext;

AnnotationExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

AnnotationExpressionContext.prototype.annotationExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationExpressionContext);
    } else {
        return this.getTypedRuleContext(AnnotationExpressionContext,i);
    }
};

AnnotationExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

AnnotationExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

AnnotationExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

AnnotationExpressionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

AnnotationExpressionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

AnnotationExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

AnnotationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAnnotationExpression(this);
	}
};

AnnotationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAnnotationExpression(this);
	}
};



myGrammarParser.prototype.annotationExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AnnotationExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 52;
    this.enterRecursionRule(localctx, 52, myGrammarParser.RULE_annotationExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 410;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 398;
            this.match(myGrammarParser.LPAREN);
            this.state = 399;
            this.annotationExpression(0);
            this.state = 400;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
            this.state = 402;
            this.have();
            this.state = 405;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.NAME:
                this.state = 403;
                this.names();
                break;
            case myGrammarParser.ARGUMENT:
                this.state = 404;
                this.arguments();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 408;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
            if(la_===1) {
                this.state = 407;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 418;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new AnnotationExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_annotationExpression);
                this.state = 412;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 413;
                localctx.op = this.binary();
                this.state = 414;
                localctx.right = this.annotationExpression(3); 
            }
            this.state = 420;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ExtensionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_extensions;
    return this;
}

ExtensionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionsContext.prototype.constructor = ExtensionsContext;

ExtensionsContext.prototype.EXTENSION = function() {
    return this.getToken(myGrammarParser.EXTENSION, 0);
};

ExtensionsContext.prototype.extensionCondition = function() {
    return this.getTypedRuleContext(ExtensionConditionContext,0);
};

ExtensionsContext.prototype.extensionOf = function() {
    return this.getTypedRuleContext(ExtensionOfContext,0);
};

ExtensionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExtensions(this);
	}
};

ExtensionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExtensions(this);
	}
};




myGrammarParser.ExtensionsContext = ExtensionsContext;

myGrammarParser.prototype.extensions = function() {

    var localctx = new ExtensionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, myGrammarParser.RULE_extensions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 421;
        this.match(myGrammarParser.EXTENSION);
        this.state = 423;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        if(la_===1) {
            this.state = 422;
            this.extensionCondition();

        }
        this.state = 426;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        if(la_===1) {
            this.state = 425;
            this.extensionOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtensionOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_extensionOf;
    return this;
}

ExtensionOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionOfContext.prototype.constructor = ExtensionOfContext;

ExtensionOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ExtensionOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

ExtensionOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExtensionOf(this);
	}
};

ExtensionOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExtensionOf(this);
	}
};




myGrammarParser.ExtensionOfContext = ExtensionOfContext;

myGrammarParser.prototype.extensionOf = function() {

    var localctx = new ExtensionOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, myGrammarParser.RULE_extensionOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 428;
        this.of();
        this.state = 429;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtensionConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_extensionCondition;
    return this;
}

ExtensionConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionConditionContext.prototype.constructor = ExtensionConditionContext;

ExtensionConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

ExtensionConditionContext.prototype.equalsTo = function() {
    return this.getTypedRuleContext(EqualsToContext,0);
};

ExtensionConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

ExtensionConditionContext.prototype.not = function() {
    return this.getTypedRuleContext(NotContext,0);
};

ExtensionConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

ExtensionConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExtensionCondition(this);
	}
};

ExtensionConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExtensionCondition(this);
	}
};




myGrammarParser.ExtensionConditionContext = ExtensionConditionContext;

myGrammarParser.prototype.extensionCondition = function() {

    var localctx = new ExtensionConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, myGrammarParser.RULE_extensionCondition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 431;
        this.where();
        this.state = 433;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.T__13) {
            this.state = 432;
            this.not();
        }

        this.state = 435;
        this.equalsTo();
        this.state = 436;
        this.words();
        this.state = 438;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        if(la_===1) {
            this.state = 437;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImplementationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_implementations;
    return this;
}

ImplementationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImplementationsContext.prototype.constructor = ImplementationsContext;

ImplementationsContext.prototype.IMPLEMENTATION = function() {
    return this.getToken(myGrammarParser.IMPLEMENTATION, 0);
};

ImplementationsContext.prototype.implementationCondition = function() {
    return this.getTypedRuleContext(ImplementationConditionContext,0);
};

ImplementationsContext.prototype.implementationOf = function() {
    return this.getTypedRuleContext(ImplementationOfContext,0);
};

ImplementationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterImplementations(this);
	}
};

ImplementationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitImplementations(this);
	}
};




myGrammarParser.ImplementationsContext = ImplementationsContext;

myGrammarParser.prototype.implementations = function() {

    var localctx = new ImplementationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, myGrammarParser.RULE_implementations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 440;
        this.match(myGrammarParser.IMPLEMENTATION);
        this.state = 442;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        if(la_===1) {
            this.state = 441;
            this.implementationCondition();

        }
        this.state = 445;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        if(la_===1) {
            this.state = 444;
            this.implementationOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImplementationOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_implementationOf;
    return this;
}

ImplementationOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImplementationOfContext.prototype.constructor = ImplementationOfContext;

ImplementationOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ImplementationOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

ImplementationOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterImplementationOf(this);
	}
};

ImplementationOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitImplementationOf(this);
	}
};




myGrammarParser.ImplementationOfContext = ImplementationOfContext;

myGrammarParser.prototype.implementationOf = function() {

    var localctx = new ImplementationOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, myGrammarParser.RULE_implementationOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 447;
        this.of();
        this.state = 448;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImplementationConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_implementationCondition;
    return this;
}

ImplementationConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImplementationConditionContext.prototype.constructor = ImplementationConditionContext;

ImplementationConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

ImplementationConditionContext.prototype.equalsTo = function() {
    return this.getTypedRuleContext(EqualsToContext,0);
};

ImplementationConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

ImplementationConditionContext.prototype.not = function() {
    return this.getTypedRuleContext(NotContext,0);
};

ImplementationConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

ImplementationConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterImplementationCondition(this);
	}
};

ImplementationConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitImplementationCondition(this);
	}
};




myGrammarParser.ImplementationConditionContext = ImplementationConditionContext;

myGrammarParser.prototype.implementationCondition = function() {

    var localctx = new ImplementationConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, myGrammarParser.RULE_implementationCondition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 450;
        this.where();
        this.state = 452;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.T__13) {
            this.state = 451;
            this.not();
        }

        this.state = 454;
        this.equalsTo();
        this.state = 455;
        this.words();
        this.state = 457;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        if(la_===1) {
            this.state = 456;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_functions;
    return this;
}

FunctionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionsContext.prototype.constructor = FunctionsContext;

FunctionsContext.prototype.FUNCTION = function() {
    return this.getToken(myGrammarParser.FUNCTION, 0);
};

FunctionsContext.prototype.functionCondition = function() {
    return this.getTypedRuleContext(FunctionConditionContext,0);
};

FunctionsContext.prototype.functionOf = function() {
    return this.getTypedRuleContext(FunctionOfContext,0);
};

FunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterFunctions(this);
	}
};

FunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitFunctions(this);
	}
};




myGrammarParser.FunctionsContext = FunctionsContext;

myGrammarParser.prototype.functions = function() {

    var localctx = new FunctionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, myGrammarParser.RULE_functions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 459;
        this.match(myGrammarParser.FUNCTION);
        this.state = 461;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        if(la_===1) {
            this.state = 460;
            this.functionCondition();

        }
        this.state = 464;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        if(la_===1) {
            this.state = 463;
            this.functionOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_functionOf;
    return this;
}

FunctionOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionOfContext.prototype.constructor = FunctionOfContext;

FunctionOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

FunctionOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

FunctionOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterFunctionOf(this);
	}
};

FunctionOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitFunctionOf(this);
	}
};




myGrammarParser.FunctionOfContext = FunctionOfContext;

myGrammarParser.prototype.functionOf = function() {

    var localctx = new FunctionOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, myGrammarParser.RULE_functionOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 466;
        this.of();
        this.state = 467;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_functionCondition;
    return this;
}

FunctionConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionConditionContext.prototype.constructor = FunctionConditionContext;

FunctionConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

FunctionConditionContext.prototype.functionExpression = function() {
    return this.getTypedRuleContext(FunctionExpressionContext,0);
};

FunctionConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

FunctionConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterFunctionCondition(this);
	}
};

FunctionConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitFunctionCondition(this);
	}
};




myGrammarParser.FunctionConditionContext = FunctionConditionContext;

myGrammarParser.prototype.functionCondition = function() {

    var localctx = new FunctionConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, myGrammarParser.RULE_functionCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 469;
        this.where();
        this.state = 470;
        this.functionExpression(0);
        this.state = 472;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        if(la_===1) {
            this.state = 471;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_functionExpression;
    this.left = null; // FunctionExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // FunctionExpressionContext
    return this;
}

FunctionExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionExpressionContext.prototype.constructor = FunctionExpressionContext;

FunctionExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

FunctionExpressionContext.prototype.functionExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionExpressionContext);
    } else {
        return this.getTypedRuleContext(FunctionExpressionContext,i);
    }
};

FunctionExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

FunctionExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

FunctionExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

FunctionExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

FunctionExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

FunctionExpressionContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

FunctionExpressionContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

FunctionExpressionContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

FunctionExpressionContext.prototype.expressionStatements = function() {
    return this.getTypedRuleContext(ExpressionStatementsContext,0);
};

FunctionExpressionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

FunctionExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

FunctionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterFunctionExpression(this);
	}
};

FunctionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitFunctionExpression(this);
	}
};



myGrammarParser.prototype.functionExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new FunctionExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 72;
    this.enterRecursionRule(localctx, 72, myGrammarParser.RULE_functionExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 492;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 475;
            this.match(myGrammarParser.LPAREN);
            this.state = 476;
            this.functionExpression(0);
            this.state = 477;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
            this.state = 479;
            this.have();
            this.state = 487;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.ANNOTATION:
                this.state = 480;
                this.annotations();
                break;
            case myGrammarParser.SPECIFIER:
                this.state = 481;
                this.specifiers();
                break;
            case myGrammarParser.NAME:
                this.state = 482;
                this.names();
                break;
            case myGrammarParser.PARAMETER:
                this.state = 483;
                this.parameters();
                break;
            case myGrammarParser.ReturnValue:
                this.state = 484;
                this.returnValues();
                break;
            case myGrammarParser.DeclarationStatement:
                this.state = 485;
                this.declarationStatements();
                break;
            case myGrammarParser.ExpressionStatement:
                this.state = 486;
                this.expressionStatements();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 490;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
            if(la_===1) {
                this.state = 489;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 500;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new FunctionExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_functionExpression);
                this.state = 494;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 495;
                localctx.op = this.binary();
                this.state = 496;
                localctx.right = this.functionExpression(3); 
            }
            this.state = 502;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AbstractFunctionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_abstractFunctions;
    return this;
}

AbstractFunctionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionsContext.prototype.constructor = AbstractFunctionsContext;

AbstractFunctionsContext.prototype.AbstractFunctions = function() {
    return this.getToken(myGrammarParser.AbstractFunctions, 0);
};

AbstractFunctionsContext.prototype.abstractFunctionCondition = function() {
    return this.getTypedRuleContext(AbstractFunctionConditionContext,0);
};

AbstractFunctionsContext.prototype.abstractFunctionOf = function() {
    return this.getTypedRuleContext(AbstractFunctionOfContext,0);
};

AbstractFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAbstractFunctions(this);
	}
};

AbstractFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAbstractFunctions(this);
	}
};




myGrammarParser.AbstractFunctionsContext = AbstractFunctionsContext;

myGrammarParser.prototype.abstractFunctions = function() {

    var localctx = new AbstractFunctionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, myGrammarParser.RULE_abstractFunctions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 503;
        this.match(myGrammarParser.AbstractFunctions);
        this.state = 505;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        if(la_===1) {
            this.state = 504;
            this.abstractFunctionCondition();

        }
        this.state = 508;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
        if(la_===1) {
            this.state = 507;
            this.abstractFunctionOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractFunctionOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_abstractFunctionOf;
    return this;
}

AbstractFunctionOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionOfContext.prototype.constructor = AbstractFunctionOfContext;

AbstractFunctionOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

AbstractFunctionOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

AbstractFunctionOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAbstractFunctionOf(this);
	}
};

AbstractFunctionOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAbstractFunctionOf(this);
	}
};




myGrammarParser.AbstractFunctionOfContext = AbstractFunctionOfContext;

myGrammarParser.prototype.abstractFunctionOf = function() {

    var localctx = new AbstractFunctionOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, myGrammarParser.RULE_abstractFunctionOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 510;
        this.of();
        this.state = 511;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractFunctionConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_abstractFunctionCondition;
    return this;
}

AbstractFunctionConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionConditionContext.prototype.constructor = AbstractFunctionConditionContext;

AbstractFunctionConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

AbstractFunctionConditionContext.prototype.abstractFunctionExpression = function() {
    return this.getTypedRuleContext(AbstractFunctionExpressionContext,0);
};

AbstractFunctionConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

AbstractFunctionConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAbstractFunctionCondition(this);
	}
};

AbstractFunctionConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAbstractFunctionCondition(this);
	}
};




myGrammarParser.AbstractFunctionConditionContext = AbstractFunctionConditionContext;

myGrammarParser.prototype.abstractFunctionCondition = function() {

    var localctx = new AbstractFunctionConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, myGrammarParser.RULE_abstractFunctionCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 513;
        this.where();
        this.state = 514;
        this.abstractFunctionExpression(0);
        this.state = 516;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        if(la_===1) {
            this.state = 515;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractFunctionExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_abstractFunctionExpression;
    this.left = null; // AbstractFunctionExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // AbstractFunctionExpressionContext
    return this;
}

AbstractFunctionExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionExpressionContext.prototype.constructor = AbstractFunctionExpressionContext;

AbstractFunctionExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

AbstractFunctionExpressionContext.prototype.abstractFunctionExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AbstractFunctionExpressionContext);
    } else {
        return this.getTypedRuleContext(AbstractFunctionExpressionContext,i);
    }
};

AbstractFunctionExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

AbstractFunctionExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

AbstractFunctionExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

AbstractFunctionExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

AbstractFunctionExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

AbstractFunctionExpressionContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

AbstractFunctionExpressionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

AbstractFunctionExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

AbstractFunctionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAbstractFunctionExpression(this);
	}
};

AbstractFunctionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAbstractFunctionExpression(this);
	}
};



myGrammarParser.prototype.abstractFunctionExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AbstractFunctionExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 80;
    this.enterRecursionRule(localctx, 80, myGrammarParser.RULE_abstractFunctionExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 533;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 519;
            this.match(myGrammarParser.LPAREN);
            this.state = 520;
            this.abstractFunctionExpression(0);
            this.state = 521;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
            this.state = 523;
            this.have();
            this.state = 528;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.ANNOTATION:
                this.state = 524;
                this.annotations();
                break;
            case myGrammarParser.SPECIFIER:
                this.state = 525;
                this.specifiers();
                break;
            case myGrammarParser.NAME:
                this.state = 526;
                this.names();
                break;
            case myGrammarParser.PARAMETER:
                this.state = 527;
                this.parameters();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 531;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
            if(la_===1) {
                this.state = 530;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 541;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,44,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new AbstractFunctionExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_abstractFunctionExpression);
                this.state = 535;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 536;
                localctx.op = this.binary();
                this.state = 537;
                localctx.right = this.abstractFunctionExpression(3); 
            }
            this.state = 543;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,44,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ConstructorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_constructors;
    return this;
}

ConstructorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorsContext.prototype.constructor = ConstructorsContext;

ConstructorsContext.prototype.CONSTRUCTOR = function() {
    return this.getToken(myGrammarParser.CONSTRUCTOR, 0);
};

ConstructorsContext.prototype.constructorCondition = function() {
    return this.getTypedRuleContext(ConstructorConditionContext,0);
};

ConstructorsContext.prototype.constructorOf = function() {
    return this.getTypedRuleContext(ConstructorOfContext,0);
};

ConstructorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterConstructors(this);
	}
};

ConstructorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitConstructors(this);
	}
};




myGrammarParser.ConstructorsContext = ConstructorsContext;

myGrammarParser.prototype.constructors = function() {

    var localctx = new ConstructorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, myGrammarParser.RULE_constructors);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 544;
        this.match(myGrammarParser.CONSTRUCTOR);
        this.state = 546;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        if(la_===1) {
            this.state = 545;
            this.constructorCondition();

        }
        this.state = 549;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        if(la_===1) {
            this.state = 548;
            this.constructorOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_constructorOf;
    return this;
}

ConstructorOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorOfContext.prototype.constructor = ConstructorOfContext;

ConstructorOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ConstructorOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

ConstructorOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterConstructorOf(this);
	}
};

ConstructorOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitConstructorOf(this);
	}
};




myGrammarParser.ConstructorOfContext = ConstructorOfContext;

myGrammarParser.prototype.constructorOf = function() {

    var localctx = new ConstructorOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, myGrammarParser.RULE_constructorOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 551;
        this.of();
        this.state = 552;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_constructorCondition;
    return this;
}

ConstructorConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorConditionContext.prototype.constructor = ConstructorConditionContext;

ConstructorConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

ConstructorConditionContext.prototype.constructorExpression = function() {
    return this.getTypedRuleContext(ConstructorExpressionContext,0);
};

ConstructorConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

ConstructorConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterConstructorCondition(this);
	}
};

ConstructorConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitConstructorCondition(this);
	}
};




myGrammarParser.ConstructorConditionContext = ConstructorConditionContext;

myGrammarParser.prototype.constructorCondition = function() {

    var localctx = new ConstructorConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, myGrammarParser.RULE_constructorCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 554;
        this.where();
        this.state = 555;
        this.constructorExpression(0);
        this.state = 557;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        if(la_===1) {
            this.state = 556;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_constructorExpression;
    this.left = null; // ConstructorExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ConstructorExpressionContext
    return this;
}

ConstructorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorExpressionContext.prototype.constructor = ConstructorExpressionContext;

ConstructorExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

ConstructorExpressionContext.prototype.constructorExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstructorExpressionContext);
    } else {
        return this.getTypedRuleContext(ConstructorExpressionContext,i);
    }
};

ConstructorExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

ConstructorExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

ConstructorExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

ConstructorExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

ConstructorExpressionContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

ConstructorExpressionContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

ConstructorExpressionContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

ConstructorExpressionContext.prototype.expressionStatements = function() {
    return this.getTypedRuleContext(ExpressionStatementsContext,0);
};

ConstructorExpressionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

ConstructorExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ConstructorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterConstructorExpression(this);
	}
};

ConstructorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitConstructorExpression(this);
	}
};



myGrammarParser.prototype.constructorExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ConstructorExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 88;
    this.enterRecursionRule(localctx, 88, myGrammarParser.RULE_constructorExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 576;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 560;
            this.match(myGrammarParser.LPAREN);
            this.state = 561;
            this.constructorExpression(0);
            this.state = 562;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
            this.state = 564;
            this.have();
            this.state = 571;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.ANNOTATION:
                this.state = 565;
                this.annotations();
                break;
            case myGrammarParser.SPECIFIER:
                this.state = 566;
                this.specifiers();
                break;
            case myGrammarParser.PARAMETER:
                this.state = 567;
                this.parameters();
                break;
            case myGrammarParser.ReturnValue:
                this.state = 568;
                this.returnValues();
                break;
            case myGrammarParser.DeclarationStatement:
                this.state = 569;
                this.declarationStatements();
                break;
            case myGrammarParser.ExpressionStatement:
                this.state = 570;
                this.expressionStatements();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 574;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
            if(la_===1) {
                this.state = 573;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 584;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ConstructorExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_constructorExpression);
                this.state = 578;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 579;
                localctx.op = this.binary();
                this.state = 580;
                localctx.right = this.constructorExpression(3); 
            }
            this.state = 586;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_parameters;
    return this;
}

ParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParametersContext.prototype.constructor = ParametersContext;

ParametersContext.prototype.PARAMETER = function() {
    return this.getToken(myGrammarParser.PARAMETER, 0);
};

ParametersContext.prototype.parameterCondition = function() {
    return this.getTypedRuleContext(ParameterConditionContext,0);
};

ParametersContext.prototype.parameterOf = function() {
    return this.getTypedRuleContext(ParameterOfContext,0);
};

ParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterParameters(this);
	}
};

ParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitParameters(this);
	}
};




myGrammarParser.ParametersContext = ParametersContext;

myGrammarParser.prototype.parameters = function() {

    var localctx = new ParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, myGrammarParser.RULE_parameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 587;
        this.match(myGrammarParser.PARAMETER);
        this.state = 589;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        if(la_===1) {
            this.state = 588;
            this.parameterCondition();

        }
        this.state = 592;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
        if(la_===1) {
            this.state = 591;
            this.parameterOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_parameterOf;
    return this;
}

ParameterOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterOfContext.prototype.constructor = ParameterOfContext;

ParameterOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ParameterOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

ParameterOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

ParameterOfContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

ParameterOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterParameterOf(this);
	}
};

ParameterOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitParameterOf(this);
	}
};




myGrammarParser.ParameterOfContext = ParameterOfContext;

myGrammarParser.prototype.parameterOf = function() {

    var localctx = new ParameterOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, myGrammarParser.RULE_parameterOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 594;
        this.of();
        this.state = 598;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.FUNCTION:
            this.state = 595;
            this.functions();
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.state = 596;
            this.constructors();
            break;
        case myGrammarParser.AbstractFunctions:
            this.state = 597;
            this.abstractFunctions();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_parameterCondition;
    return this;
}

ParameterConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterConditionContext.prototype.constructor = ParameterConditionContext;

ParameterConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

ParameterConditionContext.prototype.parameterExpression = function() {
    return this.getTypedRuleContext(ParameterExpressionContext,0);
};

ParameterConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

ParameterConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterParameterCondition(this);
	}
};

ParameterConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitParameterCondition(this);
	}
};




myGrammarParser.ParameterConditionContext = ParameterConditionContext;

myGrammarParser.prototype.parameterCondition = function() {

    var localctx = new ParameterConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, myGrammarParser.RULE_parameterCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 600;
        this.where();
        this.state = 601;
        this.parameterExpression(0);
        this.state = 603;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        if(la_===1) {
            this.state = 602;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_parameterExpression;
    this.left = null; // ParameterExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ParameterExpressionContext
    return this;
}

ParameterExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterExpressionContext.prototype.constructor = ParameterExpressionContext;

ParameterExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

ParameterExpressionContext.prototype.parameterExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterExpressionContext);
    } else {
        return this.getTypedRuleContext(ParameterExpressionContext,i);
    }
};

ParameterExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

ParameterExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

ParameterExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

ParameterExpressionContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

ParameterExpressionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

ParameterExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ParameterExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterParameterExpression(this);
	}
};

ParameterExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitParameterExpression(this);
	}
};



myGrammarParser.prototype.parameterExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ParameterExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 96;
    this.enterRecursionRule(localctx, 96, myGrammarParser.RULE_parameterExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 618;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 606;
            this.match(myGrammarParser.LPAREN);
            this.state = 607;
            this.parameterExpression(0);
            this.state = 608;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
            this.state = 610;
            this.have();
            this.state = 613;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.NAME:
                this.state = 611;
                this.names();
                break;
            case myGrammarParser.TYPES:
                this.state = 612;
                this.types();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 616;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
            if(la_===1) {
                this.state = 615;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 626;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,59,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ParameterExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_parameterExpression);
                this.state = 620;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 621;
                localctx.op = this.binary();
                this.state = 622;
                localctx.right = this.parameterExpression(3); 
            }
            this.state = 628;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,59,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TypesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_types;
    return this;
}

TypesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypesContext.prototype.constructor = TypesContext;

TypesContext.prototype.TYPES = function() {
    return this.getToken(myGrammarParser.TYPES, 0);
};

TypesContext.prototype.typeCondition = function() {
    return this.getTypedRuleContext(TypeConditionContext,0);
};

TypesContext.prototype.typeOf = function() {
    return this.getTypedRuleContext(TypeOfContext,0);
};

TypesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterTypes(this);
	}
};

TypesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitTypes(this);
	}
};




myGrammarParser.TypesContext = TypesContext;

myGrammarParser.prototype.types = function() {

    var localctx = new TypesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, myGrammarParser.RULE_types);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 629;
        this.match(myGrammarParser.TYPES);
        this.state = 631;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
        if(la_===1) {
            this.state = 630;
            this.typeCondition();

        }
        this.state = 634;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        if(la_===1) {
            this.state = 633;
            this.typeOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_typeOf;
    return this;
}

TypeOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeOfContext.prototype.constructor = TypeOfContext;

TypeOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

TypeOfContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

TypeOfContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

TypeOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterTypeOf(this);
	}
};

TypeOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitTypeOf(this);
	}
};




myGrammarParser.TypeOfContext = TypeOfContext;

myGrammarParser.prototype.typeOf = function() {

    var localctx = new TypeOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, myGrammarParser.RULE_typeOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 636;
        this.of();
        this.state = 639;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.PARAMETER:
            this.state = 637;
            this.parameters();
            break;
        case myGrammarParser.DeclarationStatement:
            this.state = 638;
            this.declarationStatements();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_typeCondition;
    return this;
}

TypeConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeConditionContext.prototype.constructor = TypeConditionContext;

TypeConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

TypeConditionContext.prototype.equalsTo = function() {
    return this.getTypedRuleContext(EqualsToContext,0);
};

TypeConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

TypeConditionContext.prototype.not = function() {
    return this.getTypedRuleContext(NotContext,0);
};

TypeConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

TypeConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterTypeCondition(this);
	}
};

TypeConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitTypeCondition(this);
	}
};




myGrammarParser.TypeConditionContext = TypeConditionContext;

myGrammarParser.prototype.typeCondition = function() {

    var localctx = new TypeConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, myGrammarParser.RULE_typeCondition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 641;
        this.where();
        this.state = 643;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.T__13) {
            this.state = 642;
            this.not();
        }

        this.state = 645;
        this.equalsTo();
        this.state = 646;
        this.words();
        this.state = 648;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        if(la_===1) {
            this.state = 647;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_specifiers;
    return this;
}

SpecifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecifiersContext.prototype.constructor = SpecifiersContext;

SpecifiersContext.prototype.SPECIFIER = function() {
    return this.getToken(myGrammarParser.SPECIFIER, 0);
};

SpecifiersContext.prototype.specifierCondition = function() {
    return this.getTypedRuleContext(SpecifierConditionContext,0);
};

SpecifiersContext.prototype.specifierOf = function() {
    return this.getTypedRuleContext(SpecifierOfContext,0);
};

SpecifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterSpecifiers(this);
	}
};

SpecifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitSpecifiers(this);
	}
};




myGrammarParser.SpecifiersContext = SpecifiersContext;

myGrammarParser.prototype.specifiers = function() {

    var localctx = new SpecifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, myGrammarParser.RULE_specifiers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 650;
        this.match(myGrammarParser.SPECIFIER);
        this.state = 652;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        if(la_===1) {
            this.state = 651;
            this.specifierCondition();

        }
        this.state = 655;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        if(la_===1) {
            this.state = 654;
            this.specifierOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecifierOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_specifierOf;
    return this;
}

SpecifierOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecifierOfContext.prototype.constructor = SpecifierOfContext;

SpecifierOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

SpecifierOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

SpecifierOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

SpecifierOfContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

SpecifierOfContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

SpecifierOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

SpecifierOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterSpecifierOf(this);
	}
};

SpecifierOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitSpecifierOf(this);
	}
};




myGrammarParser.SpecifierOfContext = SpecifierOfContext;

myGrammarParser.prototype.specifierOf = function() {

    var localctx = new SpecifierOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, myGrammarParser.RULE_specifierOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 657;
        this.of();
        this.state = 663;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.FUNCTION:
            this.state = 658;
            this.functions();
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.state = 659;
            this.constructors();
            break;
        case myGrammarParser.AbstractFunctions:
            this.state = 660;
            this.abstractFunctions();
            break;
        case myGrammarParser.DeclarationStatement:
            this.state = 661;
            this.declarationStatements();
            break;
        case myGrammarParser.CLASSES:
            this.state = 662;
            this.classes();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecifierConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_specifierCondition;
    return this;
}

SpecifierConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecifierConditionContext.prototype.constructor = SpecifierConditionContext;

SpecifierConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

SpecifierConditionContext.prototype.equalsTo = function() {
    return this.getTypedRuleContext(EqualsToContext,0);
};

SpecifierConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

SpecifierConditionContext.prototype.not = function() {
    return this.getTypedRuleContext(NotContext,0);
};

SpecifierConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

SpecifierConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterSpecifierCondition(this);
	}
};

SpecifierConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitSpecifierCondition(this);
	}
};




myGrammarParser.SpecifierConditionContext = SpecifierConditionContext;

myGrammarParser.prototype.specifierCondition = function() {

    var localctx = new SpecifierConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, myGrammarParser.RULE_specifierCondition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 665;
        this.where();
        this.state = 667;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.T__13) {
            this.state = 666;
            this.not();
        }

        this.state = 669;
        this.equalsTo();
        this.state = 670;
        this.words();
        this.state = 672;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        if(la_===1) {
            this.state = 671;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnValuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_returnValues;
    return this;
}

ReturnValuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnValuesContext.prototype.constructor = ReturnValuesContext;

ReturnValuesContext.prototype.ReturnValue = function() {
    return this.getToken(myGrammarParser.ReturnValue, 0);
};

ReturnValuesContext.prototype.returnValueCondition = function() {
    return this.getTypedRuleContext(ReturnValueConditionContext,0);
};

ReturnValuesContext.prototype.returnValueOf = function() {
    return this.getTypedRuleContext(ReturnValueOfContext,0);
};

ReturnValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterReturnValues(this);
	}
};

ReturnValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitReturnValues(this);
	}
};




myGrammarParser.ReturnValuesContext = ReturnValuesContext;

myGrammarParser.prototype.returnValues = function() {

    var localctx = new ReturnValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, myGrammarParser.RULE_returnValues);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 674;
        this.match(myGrammarParser.ReturnValue);
        this.state = 676;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        if(la_===1) {
            this.state = 675;
            this.returnValueCondition();

        }
        this.state = 679;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        if(la_===1) {
            this.state = 678;
            this.returnValueOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnValueOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_returnValueOf;
    return this;
}

ReturnValueOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnValueOfContext.prototype.constructor = ReturnValueOfContext;

ReturnValueOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ReturnValueOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

ReturnValueOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterReturnValueOf(this);
	}
};

ReturnValueOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitReturnValueOf(this);
	}
};




myGrammarParser.ReturnValueOfContext = ReturnValueOfContext;

myGrammarParser.prototype.returnValueOf = function() {

    var localctx = new ReturnValueOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, myGrammarParser.RULE_returnValueOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 681;
        this.of();
        this.state = 682;
        this.functions();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnValueConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_returnValueCondition;
    return this;
}

ReturnValueConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnValueConditionContext.prototype.constructor = ReturnValueConditionContext;

ReturnValueConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

ReturnValueConditionContext.prototype.returnValueExpression = function() {
    return this.getTypedRuleContext(ReturnValueExpressionContext,0);
};

ReturnValueConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

ReturnValueConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterReturnValueCondition(this);
	}
};

ReturnValueConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitReturnValueCondition(this);
	}
};




myGrammarParser.ReturnValueConditionContext = ReturnValueConditionContext;

myGrammarParser.prototype.returnValueCondition = function() {

    var localctx = new ReturnValueConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, myGrammarParser.RULE_returnValueCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 684;
        this.where();
        this.state = 685;
        this.returnValueExpression(0);
        this.state = 687;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        if(la_===1) {
            this.state = 686;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnValueExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_returnValueExpression;
    this.left = null; // ReturnValueExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ReturnValueExpressionContext
    return this;
}

ReturnValueExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnValueExpressionContext.prototype.constructor = ReturnValueExpressionContext;

ReturnValueExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

ReturnValueExpressionContext.prototype.returnValueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ReturnValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ReturnValueExpressionContext,i);
    }
};

ReturnValueExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

ReturnValueExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

ReturnValueExpressionContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

ReturnValueExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

ReturnValueExpressionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

ReturnValueExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ReturnValueExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterReturnValueExpression(this);
	}
};

ReturnValueExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitReturnValueExpression(this);
	}
};



myGrammarParser.prototype.returnValueExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ReturnValueExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 116;
    this.enterRecursionRule(localctx, 116, myGrammarParser.RULE_returnValueExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 702;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 690;
            this.match(myGrammarParser.LPAREN);
            this.state = 691;
            this.returnValueExpression(0);
            this.state = 692;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
            this.state = 694;
            this.have();
            this.state = 697;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.CALL:
                this.state = 695;
                this.calls();
                break;
            case myGrammarParser.NAME:
                this.state = 696;
                this.names();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 700;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
            if(la_===1) {
                this.state = 699;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 710;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,76,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ReturnValueExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_returnValueExpression);
                this.state = 704;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 705;
                localctx.op = this.binary();
                this.state = 706;
                localctx.right = this.returnValueExpression(3); 
            }
            this.state = 712;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,76,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function DeclarationStatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_declarationStatements;
    return this;
}

DeclarationStatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementsContext.prototype.constructor = DeclarationStatementsContext;

DeclarationStatementsContext.prototype.DeclarationStatement = function() {
    return this.getToken(myGrammarParser.DeclarationStatement, 0);
};

DeclarationStatementsContext.prototype.declarationStatementCondition = function() {
    return this.getTypedRuleContext(DeclarationStatementConditionContext,0);
};

DeclarationStatementsContext.prototype.declarationStatementOf = function() {
    return this.getTypedRuleContext(DeclarationStatementOfContext,0);
};

DeclarationStatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterDeclarationStatements(this);
	}
};

DeclarationStatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitDeclarationStatements(this);
	}
};




myGrammarParser.DeclarationStatementsContext = DeclarationStatementsContext;

myGrammarParser.prototype.declarationStatements = function() {

    var localctx = new DeclarationStatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, myGrammarParser.RULE_declarationStatements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 713;
        this.match(myGrammarParser.DeclarationStatement);
        this.state = 715;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
        if(la_===1) {
            this.state = 714;
            this.declarationStatementCondition();

        }
        this.state = 718;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        if(la_===1) {
            this.state = 717;
            this.declarationStatementOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationStatementOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_declarationStatementOf;
    return this;
}

DeclarationStatementOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementOfContext.prototype.constructor = DeclarationStatementOfContext;

DeclarationStatementOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

DeclarationStatementOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

DeclarationStatementOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

DeclarationStatementOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

DeclarationStatementOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterDeclarationStatementOf(this);
	}
};

DeclarationStatementOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitDeclarationStatementOf(this);
	}
};




myGrammarParser.DeclarationStatementOfContext = DeclarationStatementOfContext;

myGrammarParser.prototype.declarationStatementOf = function() {

    var localctx = new DeclarationStatementOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, myGrammarParser.RULE_declarationStatementOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 720;
        this.of();
        this.state = 724;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.CLASSES:
            this.state = 721;
            this.classes();
            break;
        case myGrammarParser.FUNCTION:
            this.state = 722;
            this.functions();
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.state = 723;
            this.constructors();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationStatementConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_declarationStatementCondition;
    return this;
}

DeclarationStatementConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementConditionContext.prototype.constructor = DeclarationStatementConditionContext;

DeclarationStatementConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

DeclarationStatementConditionContext.prototype.declarationStatementExpression = function() {
    return this.getTypedRuleContext(DeclarationStatementExpressionContext,0);
};

DeclarationStatementConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

DeclarationStatementConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterDeclarationStatementCondition(this);
	}
};

DeclarationStatementConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitDeclarationStatementCondition(this);
	}
};




myGrammarParser.DeclarationStatementConditionContext = DeclarationStatementConditionContext;

myGrammarParser.prototype.declarationStatementCondition = function() {

    var localctx = new DeclarationStatementConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, myGrammarParser.RULE_declarationStatementCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 726;
        this.where();
        this.state = 727;
        this.declarationStatementExpression(0);
        this.state = 729;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
        if(la_===1) {
            this.state = 728;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationStatementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_declarationStatementExpression;
    this.left = null; // DeclarationStatementExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // DeclarationStatementExpressionContext
    return this;
}

DeclarationStatementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementExpressionContext.prototype.constructor = DeclarationStatementExpressionContext;

DeclarationStatementExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

DeclarationStatementExpressionContext.prototype.declarationStatementExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationStatementExpressionContext);
    } else {
        return this.getTypedRuleContext(DeclarationStatementExpressionContext,i);
    }
};

DeclarationStatementExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

DeclarationStatementExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

DeclarationStatementExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

DeclarationStatementExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

DeclarationStatementExpressionContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

DeclarationStatementExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

DeclarationStatementExpressionContext.prototype.initValues = function() {
    return this.getTypedRuleContext(InitValuesContext,0);
};

DeclarationStatementExpressionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

DeclarationStatementExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

DeclarationStatementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterDeclarationStatementExpression(this);
	}
};

DeclarationStatementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitDeclarationStatementExpression(this);
	}
};



myGrammarParser.prototype.declarationStatementExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new DeclarationStatementExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 124;
    this.enterRecursionRule(localctx, 124, myGrammarParser.RULE_declarationStatementExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 747;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 732;
            this.match(myGrammarParser.LPAREN);
            this.state = 733;
            this.declarationStatementExpression(0);
            this.state = 734;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
            this.state = 736;
            this.have();
            this.state = 742;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.ANNOTATION:
                this.state = 737;
                this.annotations();
                break;
            case myGrammarParser.SPECIFIER:
                this.state = 738;
                this.specifiers();
                break;
            case myGrammarParser.TYPES:
                this.state = 739;
                this.types();
                break;
            case myGrammarParser.NAME:
                this.state = 740;
                this.names();
                break;
            case myGrammarParser.InitValue:
                this.state = 741;
                this.initValues();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 745;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
            if(la_===1) {
                this.state = 744;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 755;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new DeclarationStatementExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_declarationStatementExpression);
                this.state = 749;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 750;
                localctx.op = this.binary();
                this.state = 751;
                localctx.right = this.declarationStatementExpression(3); 
            }
            this.state = 757;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ExpressionStatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_expressionStatements;
    return this;
}

ExpressionStatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementsContext.prototype.constructor = ExpressionStatementsContext;

ExpressionStatementsContext.prototype.ExpressionStatement = function() {
    return this.getToken(myGrammarParser.ExpressionStatement, 0);
};

ExpressionStatementsContext.prototype.expressionStatementCondition = function() {
    return this.getTypedRuleContext(ExpressionStatementConditionContext,0);
};

ExpressionStatementsContext.prototype.expressionStatementOf = function() {
    return this.getTypedRuleContext(ExpressionStatementOfContext,0);
};

ExpressionStatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExpressionStatements(this);
	}
};

ExpressionStatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExpressionStatements(this);
	}
};




myGrammarParser.ExpressionStatementsContext = ExpressionStatementsContext;

myGrammarParser.prototype.expressionStatements = function() {

    var localctx = new ExpressionStatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, myGrammarParser.RULE_expressionStatements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 758;
        this.match(myGrammarParser.ExpressionStatement);
        this.state = 760;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        if(la_===1) {
            this.state = 759;
            this.expressionStatementCondition();

        }
        this.state = 763;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
        if(la_===1) {
            this.state = 762;
            this.expressionStatementOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_expressionStatementOf;
    return this;
}

ExpressionStatementOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementOfContext.prototype.constructor = ExpressionStatementOfContext;

ExpressionStatementOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ExpressionStatementOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

ExpressionStatementOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

ExpressionStatementOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExpressionStatementOf(this);
	}
};

ExpressionStatementOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExpressionStatementOf(this);
	}
};




myGrammarParser.ExpressionStatementOfContext = ExpressionStatementOfContext;

myGrammarParser.prototype.expressionStatementOf = function() {

    var localctx = new ExpressionStatementOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, myGrammarParser.RULE_expressionStatementOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 765;
        this.of();
        this.state = 769;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
        switch(la_) {
        case 1:
            this.state = 766;
            this.functions();
            break;

        case 2:
            this.state = 767;
            this.constructors();
            break;

        case 3:
            this.state = 768;
            this.constructors();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_expressionStatementCondition;
    return this;
}

ExpressionStatementConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementConditionContext.prototype.constructor = ExpressionStatementConditionContext;

ExpressionStatementConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

ExpressionStatementConditionContext.prototype.expressionStatementExpression = function() {
    return this.getTypedRuleContext(ExpressionStatementExpressionContext,0);
};

ExpressionStatementConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

ExpressionStatementConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExpressionStatementCondition(this);
	}
};

ExpressionStatementConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExpressionStatementCondition(this);
	}
};




myGrammarParser.ExpressionStatementConditionContext = ExpressionStatementConditionContext;

myGrammarParser.prototype.expressionStatementCondition = function() {

    var localctx = new ExpressionStatementConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, myGrammarParser.RULE_expressionStatementCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 771;
        this.where();
        this.state = 772;
        this.expressionStatementExpression(0);
        this.state = 774;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        if(la_===1) {
            this.state = 773;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_expressionStatementExpression;
    this.left = null; // ExpressionStatementExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ExpressionStatementExpressionContext
    return this;
}

ExpressionStatementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementExpressionContext.prototype.constructor = ExpressionStatementExpressionContext;

ExpressionStatementExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

ExpressionStatementExpressionContext.prototype.expressionStatementExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionStatementExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionStatementExpressionContext,i);
    }
};

ExpressionStatementExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

ExpressionStatementExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

ExpressionStatementExpressionContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

ExpressionStatementExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

ExpressionStatementExpressionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

ExpressionStatementExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ExpressionStatementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExpressionStatementExpression(this);
	}
};

ExpressionStatementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExpressionStatementExpression(this);
	}
};



myGrammarParser.prototype.expressionStatementExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionStatementExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 132;
    this.enterRecursionRule(localctx, 132, myGrammarParser.RULE_expressionStatementExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 789;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 777;
            this.match(myGrammarParser.LPAREN);
            this.state = 778;
            this.expressionStatementExpression(0);
            this.state = 779;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
            this.state = 781;
            this.have();
            this.state = 784;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.CALL:
                this.state = 782;
                this.calls();
                break;
            case myGrammarParser.NAME:
                this.state = 783;
                this.names();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 787;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
            if(la_===1) {
                this.state = 786;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 797;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,92,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ExpressionStatementExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_expressionStatementExpression);
                this.state = 791;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 792;
                localctx.op = this.binary();
                this.state = 793;
                localctx.right = this.expressionStatementExpression(3); 
            }
            this.state = 799;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,92,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function InitValuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_initValues;
    return this;
}

InitValuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitValuesContext.prototype.constructor = InitValuesContext;

InitValuesContext.prototype.InitValue = function() {
    return this.getToken(myGrammarParser.InitValue, 0);
};

InitValuesContext.prototype.initValueCondition = function() {
    return this.getTypedRuleContext(InitValueConditionContext,0);
};

InitValuesContext.prototype.initValueOf = function() {
    return this.getTypedRuleContext(InitValueOfContext,0);
};

InitValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterInitValues(this);
	}
};

InitValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitInitValues(this);
	}
};




myGrammarParser.InitValuesContext = InitValuesContext;

myGrammarParser.prototype.initValues = function() {

    var localctx = new InitValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, myGrammarParser.RULE_initValues);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 800;
        this.match(myGrammarParser.InitValue);
        this.state = 802;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        if(la_===1) {
            this.state = 801;
            this.initValueCondition();

        }
        this.state = 805;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        if(la_===1) {
            this.state = 804;
            this.initValueOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitValueOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_initValueOf;
    return this;
}

InitValueOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitValueOfContext.prototype.constructor = InitValueOfContext;

InitValueOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

InitValueOfContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

InitValueOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterInitValueOf(this);
	}
};

InitValueOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitInitValueOf(this);
	}
};




myGrammarParser.InitValueOfContext = InitValueOfContext;

myGrammarParser.prototype.initValueOf = function() {

    var localctx = new InitValueOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, myGrammarParser.RULE_initValueOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 807;
        this.of();
        this.state = 808;
        this.declarationStatements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitValueConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_initValueCondition;
    return this;
}

InitValueConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitValueConditionContext.prototype.constructor = InitValueConditionContext;

InitValueConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

InitValueConditionContext.prototype.initValueExpression = function() {
    return this.getTypedRuleContext(InitValueExpressionContext,0);
};

InitValueConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

InitValueConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterInitValueCondition(this);
	}
};

InitValueConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitInitValueCondition(this);
	}
};




myGrammarParser.InitValueConditionContext = InitValueConditionContext;

myGrammarParser.prototype.initValueCondition = function() {

    var localctx = new InitValueConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, myGrammarParser.RULE_initValueCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 810;
        this.where();
        this.state = 811;
        this.initValueExpression(0);
        this.state = 813;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
        if(la_===1) {
            this.state = 812;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitValueExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_initValueExpression;
    this.left = null; // InitValueExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // InitValueExpressionContext
    return this;
}

InitValueExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitValueExpressionContext.prototype.constructor = InitValueExpressionContext;

InitValueExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

InitValueExpressionContext.prototype.initValueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitValueExpressionContext);
    } else {
        return this.getTypedRuleContext(InitValueExpressionContext,i);
    }
};

InitValueExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

InitValueExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

InitValueExpressionContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

InitValueExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

InitValueExpressionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

InitValueExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

InitValueExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterInitValueExpression(this);
	}
};

InitValueExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitInitValueExpression(this);
	}
};



myGrammarParser.prototype.initValueExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new InitValueExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 140;
    this.enterRecursionRule(localctx, 140, myGrammarParser.RULE_initValueExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 828;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 816;
            this.match(myGrammarParser.LPAREN);
            this.state = 817;
            this.initValueExpression(0);
            this.state = 818;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
            this.state = 820;
            this.have();
            this.state = 823;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.CALL:
                this.state = 821;
                this.calls();
                break;
            case myGrammarParser.NAME:
                this.state = 822;
                this.names();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 826;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
            if(la_===1) {
                this.state = 825;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 836;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,99,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new InitValueExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_initValueExpression);
                this.state = 830;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 831;
                localctx.op = this.binary();
                this.state = 832;
                localctx.right = this.initValueExpression(3); 
            }
            this.state = 838;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,99,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.ARGUMENT = function() {
    return this.getToken(myGrammarParser.ARGUMENT, 0);
};

ArgumentsContext.prototype.argumentCondition = function() {
    return this.getTypedRuleContext(ArgumentConditionContext,0);
};

ArgumentsContext.prototype.argumentOf = function() {
    return this.getTypedRuleContext(ArgumentOfContext,0);
};

ArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterArguments(this);
	}
};

ArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitArguments(this);
	}
};




myGrammarParser.ArgumentsContext = ArgumentsContext;

myGrammarParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, myGrammarParser.RULE_arguments);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 839;
        this.match(myGrammarParser.ARGUMENT);
        this.state = 841;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
        if(la_===1) {
            this.state = 840;
            this.argumentCondition();

        }
        this.state = 844;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
        if(la_===1) {
            this.state = 843;
            this.argumentOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_argumentOf;
    return this;
}

ArgumentOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentOfContext.prototype.constructor = ArgumentOfContext;

ArgumentOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ArgumentOfContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

ArgumentOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterArgumentOf(this);
	}
};

ArgumentOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitArgumentOf(this);
	}
};




myGrammarParser.ArgumentOfContext = ArgumentOfContext;

myGrammarParser.prototype.argumentOf = function() {

    var localctx = new ArgumentOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, myGrammarParser.RULE_argumentOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 846;
        this.of();
        this.state = 847;
        this.calls();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_argumentCondition;
    return this;
}

ArgumentConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentConditionContext.prototype.constructor = ArgumentConditionContext;

ArgumentConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

ArgumentConditionContext.prototype.argumentExpression = function() {
    return this.getTypedRuleContext(ArgumentExpressionContext,0);
};

ArgumentConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

ArgumentConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterArgumentCondition(this);
	}
};

ArgumentConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitArgumentCondition(this);
	}
};




myGrammarParser.ArgumentConditionContext = ArgumentConditionContext;

myGrammarParser.prototype.argumentCondition = function() {

    var localctx = new ArgumentConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, myGrammarParser.RULE_argumentCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 849;
        this.where();
        this.state = 850;
        this.argumentExpression(0);
        this.state = 852;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        if(la_===1) {
            this.state = 851;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_argumentExpression;
    this.left = null; // ArgumentExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ArgumentExpressionContext
    return this;
}

ArgumentExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentExpressionContext.prototype.constructor = ArgumentExpressionContext;

ArgumentExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

ArgumentExpressionContext.prototype.argumentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentExpressionContext);
    } else {
        return this.getTypedRuleContext(ArgumentExpressionContext,i);
    }
};

ArgumentExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

ArgumentExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

ArgumentExpressionContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

ArgumentExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

ArgumentExpressionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

ArgumentExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ArgumentExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterArgumentExpression(this);
	}
};

ArgumentExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitArgumentExpression(this);
	}
};



myGrammarParser.prototype.argumentExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ArgumentExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 148;
    this.enterRecursionRule(localctx, 148, myGrammarParser.RULE_argumentExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 867;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 855;
            this.match(myGrammarParser.LPAREN);
            this.state = 856;
            this.argumentExpression(0);
            this.state = 857;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
            this.state = 859;
            this.have();
            this.state = 862;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.CALL:
                this.state = 860;
                this.calls();
                break;
            case myGrammarParser.NAME:
                this.state = 861;
                this.names();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 865;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
            if(la_===1) {
                this.state = 864;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 875;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,106,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ArgumentExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_argumentExpression);
                this.state = 869;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 870;
                localctx.op = this.binary();
                this.state = 871;
                localctx.right = this.argumentExpression(3); 
            }
            this.state = 877;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,106,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function CallsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_calls;
    return this;
}

CallsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallsContext.prototype.constructor = CallsContext;

CallsContext.prototype.CALL = function() {
    return this.getToken(myGrammarParser.CALL, 0);
};

CallsContext.prototype.callCondition = function() {
    return this.getTypedRuleContext(CallConditionContext,0);
};

CallsContext.prototype.callOf = function() {
    return this.getTypedRuleContext(CallOfContext,0);
};

CallsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterCalls(this);
	}
};

CallsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitCalls(this);
	}
};




myGrammarParser.CallsContext = CallsContext;

myGrammarParser.prototype.calls = function() {

    var localctx = new CallsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, myGrammarParser.RULE_calls);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 878;
        this.match(myGrammarParser.CALL);
        this.state = 880;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
        if(la_===1) {
            this.state = 879;
            this.callCondition();

        }
        this.state = 883;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
        if(la_===1) {
            this.state = 882;
            this.callOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_callOf;
    return this;
}

CallOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallOfContext.prototype.constructor = CallOfContext;

CallOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

CallOfContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

CallOfContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

CallOfContext.prototype.expressionStatements = function() {
    return this.getTypedRuleContext(ExpressionStatementsContext,0);
};

CallOfContext.prototype.initValues = function() {
    return this.getTypedRuleContext(InitValuesContext,0);
};

CallOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterCallOf(this);
	}
};

CallOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitCallOf(this);
	}
};




myGrammarParser.CallOfContext = CallOfContext;

myGrammarParser.prototype.callOf = function() {

    var localctx = new CallOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, myGrammarParser.RULE_callOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 885;
        this.of();
        this.state = 890;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.ARGUMENT:
            this.state = 886;
            this.arguments();
            break;
        case myGrammarParser.ReturnValue:
            this.state = 887;
            this.returnValues();
            break;
        case myGrammarParser.ExpressionStatement:
            this.state = 888;
            this.expressionStatements();
            break;
        case myGrammarParser.InitValue:
            this.state = 889;
            this.initValues();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_callCondition;
    return this;
}

CallConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallConditionContext.prototype.constructor = CallConditionContext;

CallConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

CallConditionContext.prototype.callerExpression = function() {
    return this.getTypedRuleContext(CallerExpressionContext,0);
};

CallConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

CallConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterCallCondition(this);
	}
};

CallConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitCallCondition(this);
	}
};




myGrammarParser.CallConditionContext = CallConditionContext;

myGrammarParser.prototype.callCondition = function() {

    var localctx = new CallConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, myGrammarParser.RULE_callCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 892;
        this.where();
        this.state = 893;
        this.callerExpression(0);
        this.state = 895;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
        if(la_===1) {
            this.state = 894;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallerExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_callerExpression;
    this.left = null; // CallerExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // CallerExpressionContext
    return this;
}

CallerExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallerExpressionContext.prototype.constructor = CallerExpressionContext;

CallerExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

CallerExpressionContext.prototype.callerExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CallerExpressionContext);
    } else {
        return this.getTypedRuleContext(CallerExpressionContext,i);
    }
};

CallerExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

CallerExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

CallerExpressionContext.prototype.callers = function() {
    return this.getTypedRuleContext(CallersContext,0);
};

CallerExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

CallerExpressionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

CallerExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

CallerExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterCallerExpression(this);
	}
};

CallerExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitCallerExpression(this);
	}
};



myGrammarParser.prototype.callerExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new CallerExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 156;
    this.enterRecursionRule(localctx, 156, myGrammarParser.RULE_callerExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 910;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 898;
            this.match(myGrammarParser.LPAREN);
            this.state = 899;
            this.callerExpression(0);
            this.state = 900;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
            this.state = 902;
            this.have();
            this.state = 905;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.CALLER:
                this.state = 903;
                this.callers();
                break;
            case myGrammarParser.NAME:
                this.state = 904;
                this.names();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 908;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
            if(la_===1) {
                this.state = 907;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 918;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,114,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CallerExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_callerExpression);
                this.state = 912;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 913;
                localctx.op = this.binary();
                this.state = 914;
                localctx.right = this.callerExpression(3); 
            }
            this.state = 920;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,114,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function CallersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_callers;
    return this;
}

CallersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallersContext.prototype.constructor = CallersContext;

CallersContext.prototype.CALLER = function() {
    return this.getToken(myGrammarParser.CALLER, 0);
};

CallersContext.prototype.callerCondition = function() {
    return this.getTypedRuleContext(CallerConditionContext,0);
};

CallersContext.prototype.callerOf = function() {
    return this.getTypedRuleContext(CallerOfContext,0);
};

CallersContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterCallers(this);
	}
};

CallersContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitCallers(this);
	}
};




myGrammarParser.CallersContext = CallersContext;

myGrammarParser.prototype.callers = function() {

    var localctx = new CallersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, myGrammarParser.RULE_callers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 921;
        this.match(myGrammarParser.CALLER);
        this.state = 923;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        if(la_===1) {
            this.state = 922;
            this.callerCondition();

        }
        this.state = 926;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        if(la_===1) {
            this.state = 925;
            this.callerOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallerOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_callerOf;
    return this;
}

CallerOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallerOfContext.prototype.constructor = CallerOfContext;

CallerOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

CallerOfContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

CallerOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterCallerOf(this);
	}
};

CallerOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitCallerOf(this);
	}
};




myGrammarParser.CallerOfContext = CallerOfContext;

myGrammarParser.prototype.callerOf = function() {

    var localctx = new CallerOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, myGrammarParser.RULE_callerOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 928;
        this.of();
        this.state = 929;
        this.calls();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallerConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_callerCondition;
    return this;
}

CallerConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallerConditionContext.prototype.constructor = CallerConditionContext;

CallerConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

CallerConditionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

CallerConditionContext.prototype.NAME = function() {
    return this.getToken(myGrammarParser.NAME, 0);
};

CallerConditionContext.prototype.equalsTo = function() {
    return this.getTypedRuleContext(EqualsToContext,0);
};

CallerConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

CallerConditionContext.prototype.not = function() {
    return this.getTypedRuleContext(NotContext,0);
};

CallerConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

CallerConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterCallerCondition(this);
	}
};

CallerConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitCallerCondition(this);
	}
};




myGrammarParser.CallerConditionContext = CallerConditionContext;

myGrammarParser.prototype.callerCondition = function() {

    var localctx = new CallerConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, myGrammarParser.RULE_callerCondition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 931;
        this.where();
        this.state = 932;
        this.have();
        this.state = 933;
        this.match(myGrammarParser.NAME);
        this.state = 935;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.T__13) {
            this.state = 934;
            this.not();
        }

        this.state = 937;
        this.equalsTo();
        this.state = 938;
        this.words();
        this.state = 940;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
        if(la_===1) {
            this.state = 939;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_values;
    return this;
}

ValuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuesContext.prototype.constructor = ValuesContext;

ValuesContext.prototype.VALUE = function() {
    return this.getToken(myGrammarParser.VALUE, 0);
};

ValuesContext.prototype.valueCondition = function() {
    return this.getTypedRuleContext(ValueConditionContext,0);
};

ValuesContext.prototype.valueOf = function() {
    return this.getTypedRuleContext(ValueOfContext,0);
};

ValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterValues(this);
	}
};

ValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitValues(this);
	}
};




myGrammarParser.ValuesContext = ValuesContext;

myGrammarParser.prototype.values = function() {

    var localctx = new ValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, myGrammarParser.RULE_values);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 942;
        this.match(myGrammarParser.VALUE);
        this.state = 944;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.T__4) {
            this.state = 943;
            this.valueCondition();
        }

        this.state = 947;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.T__5) {
            this.state = 946;
            this.valueOf();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_valueOf;
    return this;
}

ValueOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueOfContext.prototype.constructor = ValueOfContext;

ValueOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ValueOfContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

ValueOfContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

ValueOfContext.prototype.expressionStatements = function() {
    return this.getTypedRuleContext(ExpressionStatementsContext,0);
};

ValueOfContext.prototype.initValues = function() {
    return this.getTypedRuleContext(InitValuesContext,0);
};

ValueOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterValueOf(this);
	}
};

ValueOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitValueOf(this);
	}
};




myGrammarParser.ValueOfContext = ValueOfContext;

myGrammarParser.prototype.valueOf = function() {

    var localctx = new ValueOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, myGrammarParser.RULE_valueOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 949;
        this.of();
        this.state = 954;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.ARGUMENT:
            this.state = 950;
            this.arguments();
            break;
        case myGrammarParser.ReturnValue:
            this.state = 951;
            this.returnValues();
            break;
        case myGrammarParser.ExpressionStatement:
            this.state = 952;
            this.expressionStatements();
            break;
        case myGrammarParser.InitValue:
            this.state = 953;
            this.initValues();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_valueCondition;
    return this;
}

ValueConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueConditionContext.prototype.constructor = ValueConditionContext;

ValueConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

ValueConditionContext.prototype.equalsTo = function() {
    return this.getTypedRuleContext(EqualsToContext,0);
};

ValueConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

ValueConditionContext.prototype.not = function() {
    return this.getTypedRuleContext(NotContext,0);
};

ValueConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

ValueConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterValueCondition(this);
	}
};

ValueConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitValueCondition(this);
	}
};




myGrammarParser.ValueConditionContext = ValueConditionContext;

myGrammarParser.prototype.valueCondition = function() {

    var localctx = new ValueConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, myGrammarParser.RULE_valueCondition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 956;
        this.where();
        this.state = 958;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.T__13) {
            this.state = 957;
            this.not();
        }

        this.state = 960;
        this.equalsTo();
        this.state = 961;
        this.words();
        this.state = 963;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.Comma) {
            this.state = 962;
            this.match(myGrammarParser.Comma);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_classes;
    return this;
}

ClassesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassesContext.prototype.constructor = ClassesContext;

ClassesContext.prototype.CLASSES = function() {
    return this.getToken(myGrammarParser.CLASSES, 0);
};

ClassesContext.prototype.classCondition = function() {
    return this.getTypedRuleContext(ClassConditionContext,0);
};

ClassesContext.prototype.classOf = function() {
    return this.getTypedRuleContext(ClassOfContext,0);
};

ClassesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterClasses(this);
	}
};

ClassesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitClasses(this);
	}
};




myGrammarParser.ClassesContext = ClassesContext;

myGrammarParser.prototype.classes = function() {

    var localctx = new ClassesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, myGrammarParser.RULE_classes);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 965;
        this.match(myGrammarParser.CLASSES);
        this.state = 967;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
        if(la_===1) {
            this.state = 966;
            this.classCondition();

        }
        this.state = 970;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
        if(la_===1) {
            this.state = 969;
            this.classOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_classOf;
    return this;
}

ClassOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassOfContext.prototype.constructor = ClassOfContext;

ClassOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ClassOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

ClassOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterClassOf(this);
	}
};

ClassOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitClassOf(this);
	}
};




myGrammarParser.ClassOfContext = ClassOfContext;

myGrammarParser.prototype.classOf = function() {

    var localctx = new ClassOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, myGrammarParser.RULE_classOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 972;
        this.of();
        this.state = 973;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_classCondition;
    return this;
}

ClassConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassConditionContext.prototype.constructor = ClassConditionContext;

ClassConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

ClassConditionContext.prototype.classExpression = function() {
    return this.getTypedRuleContext(ClassExpressionContext,0);
};

ClassConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

ClassConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterClassCondition(this);
	}
};

ClassConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitClassCondition(this);
	}
};




myGrammarParser.ClassConditionContext = ClassConditionContext;

myGrammarParser.prototype.classCondition = function() {

    var localctx = new ClassConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, myGrammarParser.RULE_classCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 975;
        this.where();
        this.state = 976;
        this.classExpression(0);
        this.state = 978;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
        if(la_===1) {
            this.state = 977;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_classExpression;
    this.left = null; // ClassExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ClassExpressionContext
    return this;
}

ClassExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassExpressionContext.prototype.constructor = ClassExpressionContext;

ClassExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

ClassExpressionContext.prototype.classExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassExpressionContext);
    } else {
        return this.getTypedRuleContext(ClassExpressionContext,i);
    }
};

ClassExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

ClassExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

ClassExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

ClassExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

ClassExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

ClassExpressionContext.prototype.extensions = function() {
    return this.getTypedRuleContext(ExtensionsContext,0);
};

ClassExpressionContext.prototype.implementations = function() {
    return this.getTypedRuleContext(ImplementationsContext,0);
};

ClassExpressionContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

ClassExpressionContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

ClassExpressionContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

ClassExpressionContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

ClassExpressionContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

ClassExpressionContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

ClassExpressionContext.prototype.SPACE = function() {
    return this.getToken(myGrammarParser.SPACE, 0);
};

ClassExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ClassExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterClassExpression(this);
	}
};

ClassExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitClassExpression(this);
	}
};



myGrammarParser.prototype.classExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ClassExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 176;
    this.enterRecursionRule(localctx, 176, myGrammarParser.RULE_classExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1002;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 981;
            this.match(myGrammarParser.LPAREN);
            this.state = 982;
            this.classExpression(0);
            this.state = 983;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
            this.state = 985;
            this.have();
            this.state = 997;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.ANNOTATION:
                this.state = 986;
                this.annotations();
                break;
            case myGrammarParser.SPECIFIER:
                this.state = 987;
                this.specifiers();
                break;
            case myGrammarParser.NAME:
                this.state = 988;
                this.names();
                break;
            case myGrammarParser.EXTENSION:
                this.state = 989;
                this.extensions();
                break;
            case myGrammarParser.IMPLEMENTATION:
                this.state = 990;
                this.implementations();
                break;
            case myGrammarParser.FUNCTION:
                this.state = 991;
                this.functions();
                break;
            case myGrammarParser.AbstractFunctions:
                this.state = 992;
                this.abstractFunctions();
                break;
            case myGrammarParser.CONSTRUCTOR:
                this.state = 993;
                this.constructors();
                break;
            case myGrammarParser.DeclarationStatement:
                this.state = 994;
                this.declarationStatements();
                break;
            case myGrammarParser.CLASSES:
                this.state = 995;
                this.classes();
                break;
            case myGrammarParser.ReturnValue:
                this.state = 996;
                this.returnValues();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1000;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
            if(la_===1) {
                this.state = 999;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1010;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,130,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ClassExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_classExpression);
                this.state = 1004;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 1005;
                localctx.op = this.binary();
                this.state = 1006;
                localctx.right = this.classExpression(3); 
            }
            this.state = 1012;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,130,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


myGrammarParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 26:
			return this.annotationExpression_sempred(localctx, predIndex);
	case 36:
			return this.functionExpression_sempred(localctx, predIndex);
	case 40:
			return this.abstractFunctionExpression_sempred(localctx, predIndex);
	case 44:
			return this.constructorExpression_sempred(localctx, predIndex);
	case 48:
			return this.parameterExpression_sempred(localctx, predIndex);
	case 58:
			return this.returnValueExpression_sempred(localctx, predIndex);
	case 62:
			return this.declarationStatementExpression_sempred(localctx, predIndex);
	case 66:
			return this.expressionStatementExpression_sempred(localctx, predIndex);
	case 70:
			return this.initValueExpression_sempred(localctx, predIndex);
	case 74:
			return this.argumentExpression_sempred(localctx, predIndex);
	case 78:
			return this.callerExpression_sempred(localctx, predIndex);
	case 88:
			return this.classExpression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

myGrammarParser.prototype.annotationExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.functionExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.abstractFunctionExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.constructorExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.parameterExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.returnValueExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.declarationStatementExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.expressionStatementExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.initValueExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.argumentExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 9:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.callerExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 10:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.classExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 11:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.myGrammarParser = myGrammarParser;
