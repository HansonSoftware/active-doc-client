// Generated from myGrammar.g4 by ANTLR 4.7.1
// jshint ignore: start
/* eslint-disable */
var antlr4 = require('antlr4/index');
var myGrammarListener = require('./myGrammarListener').myGrammarListener;
var grammarFileName = "myGrammar.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\'\u04ad\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0003\u0002\u0007\u0002\u00ae\n\u0002\f\u0002\u000e\u0002\u00b1",
    "\u000b\u0002\u0003\u0002\u0005\u0002\u00b4\n\u0002\u0003\u0002\u0005",
    "\u0002\u00b7\n\u0002\u0003\u0002\u0007\u0002\u00ba\n\u0002\f\u0002\u000e",
    "\u0002\u00bd\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003",
    "\u0005\u0003\u00c3\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u010d\n\u0004\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005",
    "\u0157\n\u0005\u0003\u0006\u0006\u0006\u015a\n\u0006\r\u0006\u000e\u0006",
    "\u015b\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0003",
    "\n\u0003\n\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\r\u0003\r\u0003",
    "\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003",
    "\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003",
    "\u0014\u0003\u0014\u0005\u0014\u017a\n\u0014\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u017e\n\u0015\u0003\u0015\u0005\u0015\u0181\n\u0015\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0005\u0016\u0190\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0005\u0017\u0196\n\u0017\u0003\u0017\u0005\u0017\u0199",
    "\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u019d\n\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0005\u0017\u01a2\n\u0017\u0003\u0018\u0003",
    "\u0018\u0005\u0018\u01a6\n\u0018\u0003\u0018\u0005\u0018\u01a9\n\u0018",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0005\u0019\u01b3\n\u0019\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u01ba\n\u001a",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0005\u001b\u01c2\n\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0005\u001b\u01c8\n\u001b\u0003\u001b\u0005\u001b\u01cb\n\u001b",
    "\u0005\u001b\u01cd\n\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0007\u001b\u01d5\n\u001b\f\u001b\u000e",
    "\u001b\u01d8\u000b\u001b\u0003\u001c\u0003\u001c\u0005\u001c\u01dc\n",
    "\u001c\u0003\u001c\u0005\u001c\u01df\n\u001c\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0005\u001e\u01ea\n\u001e\u0003\u001e\u0005\u001e\u01ed",
    "\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e",
    "\u01f3\n\u001e\u0003\u001f\u0003\u001f\u0005\u001f\u01f7\n\u001f\u0003",
    "\u001f\u0005\u001f\u01fa\n\u001f\u0003 \u0003 \u0003 \u0003 \u0003 ",
    "\u0003!\u0003!\u0003!\u0003!\u0003!\u0005!\u0206\n!\u0003\"\u0003\"",
    "\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u020e\n\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u0219\n\"",
    "\u0003\"\u0005\"\u021c\n\"\u0005\"\u021e\n\"\u0003\"\u0003\"\u0003\"",
    "\u0003\"\u0003\"\u0003\"\u0007\"\u0226\n\"\f\"\u000e\"\u0229\u000b\"",
    "\u0003#\u0003#\u0005#\u022d\n#\u0003#\u0005#\u0230\n#\u0003$\u0003$",
    "\u0003$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003%\u0003%\u0005%\u023c",
    "\n%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u0244\n&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u024c\n&\u0003&\u0005&\u024f",
    "\n&\u0005&\u0251\n&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0007",
    "&\u0259\n&\f&\u000e&\u025c\u000b&\u0003\'\u0003\'\u0005\'\u0260\n\'",
    "\u0003\'\u0005\'\u0263\n\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0005)\u026f\n)\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0005*\u0277\n*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0005*\u0281\n*\u0003*\u0005*\u0284\n*\u0005*\u0286",
    "\n*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0007*\u028e\n*\f*\u000e",
    "*\u0291\u000b*\u0003+\u0003+\u0005+\u0295\n+\u0003+\u0005+\u0298\n+",
    "\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0005,\u02a0\n,\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0005-\u02a7\n-\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0005.\u02af\n.\u0003.\u0003.\u0003.\u0003.\u0005.\u02b5\n",
    ".\u0003.\u0005.\u02b8\n.\u0005.\u02ba\n.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0007.\u02c2\n.\f.\u000e.\u02c5\u000b.\u0003/\u0003",
    "/\u0005/\u02c9\n/\u0003/\u0005/\u02cc\n/\u00030\u00030\u00030\u0003",
    "0\u00030\u00050\u02d3\n0\u00031\u00031\u00031\u00031\u00051\u02d9\n",
    "1\u00031\u00051\u02dc\n1\u00031\u00031\u00031\u00031\u00051\u02e2\n",
    "1\u00032\u00032\u00052\u02e6\n2\u00032\u00052\u02e9\n2\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00053\u02f3\n3\u00034\u0003",
    "4\u00034\u00034\u00054\u02f9\n4\u00034\u00054\u02fc\n4\u00034\u0003",
    "4\u00034\u00034\u00054\u0302\n4\u00035\u00035\u00055\u0306\n5\u0003",
    "5\u00055\u0309\n5\u00036\u00036\u00036\u00036\u00036\u00037\u00037\u0003",
    "7\u00037\u00037\u00057\u0315\n7\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00058\u031d\n8\u00038\u00038\u00038\u00038\u00058\u0323\n8\u0003",
    "8\u00058\u0326\n8\u00058\u0328\n8\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00078\u0330\n8\f8\u000e8\u0333\u000b8\u00039\u00039\u0005",
    "9\u0337\n9\u00039\u00059\u033a\n9\u0003:\u0003:\u0003:\u0003:\u0003",
    ":\u0003:\u0005:\u0342\n:\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u0349",
    "\n;\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0005<\u0351\n<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0005<\u035a\n<\u0003<\u0005",
    "<\u035d\n<\u0005<\u035f\n<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0007<\u0367\n<\f<\u000e<\u036a\u000b<\u0003=\u0003=\u0005=\u036e",
    "\n=\u0003=\u0005=\u0371\n=\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0005>\u0379\n>\u0003?\u0003?\u0003?\u0003?\u0003?\u0005?\u0380\n",
    "?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u0388\n@\u0003@\u0003",
    "@\u0003@\u0003@\u0005@\u038e\n@\u0003@\u0005@\u0391\n@\u0005@\u0393",
    "\n@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0007@\u039b\n@\f@\u000e",
    "@\u039e\u000b@\u0003A\u0003A\u0005A\u03a2\nA\u0003A\u0005A\u03a5\nA",
    "\u0003B\u0003B\u0003B\u0003B\u0003B\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0005C\u03b1\nC\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u03b9",
    "\nD\u0003D\u0003D\u0003D\u0003D\u0005D\u03bf\nD\u0003D\u0005D\u03c2",
    "\nD\u0005D\u03c4\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0007",
    "D\u03cc\nD\fD\u000eD\u03cf\u000bD\u0003E\u0003E\u0005E\u03d3\nE\u0003",
    "E\u0005E\u03d6\nE\u0003F\u0003F\u0003F\u0003F\u0003F\u0003G\u0003G\u0003",
    "G\u0003G\u0003G\u0005G\u03e2\nG\u0003H\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0005H\u03ea\nH\u0003H\u0003H\u0003H\u0003H\u0005H\u03f0\nH\u0003",
    "H\u0005H\u03f3\nH\u0005H\u03f5\nH\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0003H\u0007H\u03fd\nH\fH\u000eH\u0400\u000bH\u0003I\u0003I\u0005",
    "I\u0404\nI\u0003I\u0005I\u0407\nI\u0003J\u0003J\u0003J\u0003J\u0003",
    "J\u0003J\u0003J\u0005J\u0410\nJ\u0003K\u0003K\u0003K\u0003K\u0003K\u0005",
    "K\u0417\nK\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0005L\u041f\n",
    "L\u0003L\u0003L\u0003L\u0003L\u0005L\u0425\nL\u0003L\u0005L\u0428\n",
    "L\u0005L\u042a\nL\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0007L\u0432",
    "\nL\fL\u000eL\u0435\u000bL\u0003M\u0003M\u0005M\u0439\nM\u0003M\u0005",
    "M\u043c\nM\u0003N\u0003N\u0003N\u0003N\u0003N\u0003O\u0003O\u0003O\u0003",
    "O\u0003O\u0003O\u0003O\u0003O\u0005O\u044b\nO\u0003O\u0005O\u044e\n",
    "O\u0003O\u0003O\u0003O\u0003O\u0005O\u0454\nO\u0003P\u0003P\u0005P\u0458",
    "\nP\u0003P\u0005P\u045b\nP\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003",
    "Q\u0003Q\u0005Q\u0464\nQ\u0003R\u0003R\u0003R\u0003R\u0005R\u046a\n",
    "R\u0003R\u0005R\u046d\nR\u0003R\u0003R\u0003R\u0005R\u0472\nR\u0003",
    "S\u0003S\u0005S\u0476\nS\u0003S\u0005S\u0479\nS\u0003T\u0003T\u0003",
    "T\u0003T\u0003T\u0003U\u0003U\u0003U\u0003U\u0003U\u0005U\u0485\nU\u0003",
    "V\u0003V\u0003V\u0003V\u0003V\u0003V\u0005V\u048d\nV\u0003V\u0003V\u0003",
    "V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0005",
    "V\u049b\nV\u0003V\u0005V\u049e\nV\u0005V\u04a0\nV\u0003V\u0003V\u0003",
    "V\u0003V\u0003V\u0003V\u0007V\u04a8\nV\fV\u000eV\u04ab\u000bV\u0003",
    "V\u0002\u000e4BJRZnv~\u0086\u008e\u0096\u00aaW\u0002\u0004\u0006\b\n",
    "\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02",
    "468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0",
    "\u00a2\u00a4\u00a6\u00a8\u00aa\u0002\u0002\u0002\u0527\u0002\u00b3\u0003",
    "\u0002\u0002\u0002\u0004\u00c2\u0003\u0002\u0002\u0002\u0006\u010c\u0003",
    "\u0002\u0002\u0002\b\u0156\u0003\u0002\u0002\u0002\n\u0159\u0003\u0002",
    "\u0002\u0002\f\u015d\u0003\u0002\u0002\u0002\u000e\u015f\u0003\u0002",
    "\u0002\u0002\u0010\u0161\u0003\u0002\u0002\u0002\u0012\u0163\u0003\u0002",
    "\u0002\u0002\u0014\u0165\u0003\u0002\u0002\u0002\u0016\u0167\u0003\u0002",
    "\u0002\u0002\u0018\u0169\u0003\u0002\u0002\u0002\u001a\u016b\u0003\u0002",
    "\u0002\u0002\u001c\u016d\u0003\u0002\u0002\u0002\u001e\u016f\u0003\u0002",
    "\u0002\u0002 \u0171\u0003\u0002\u0002\u0002\"\u0173\u0003\u0002\u0002",
    "\u0002$\u0175\u0003\u0002\u0002\u0002&\u0179\u0003\u0002\u0002\u0002",
    "(\u017b\u0003\u0002\u0002\u0002*\u0182\u0003\u0002\u0002\u0002,\u0191",
    "\u0003\u0002\u0002\u0002.\u01a3\u0003\u0002\u0002\u00020\u01aa\u0003",
    "\u0002\u0002\u00022\u01b4\u0003\u0002\u0002\u00024\u01cc\u0003\u0002",
    "\u0002\u00026\u01d9\u0003\u0002\u0002\u00028\u01e0\u0003\u0002\u0002",
    "\u0002:\u01e5\u0003\u0002\u0002\u0002<\u01f4\u0003\u0002\u0002\u0002",
    ">\u01fb\u0003\u0002\u0002\u0002@\u0200\u0003\u0002\u0002\u0002B\u021d",
    "\u0003\u0002\u0002\u0002D\u022a\u0003\u0002\u0002\u0002F\u0231\u0003",
    "\u0002\u0002\u0002H\u0236\u0003\u0002\u0002\u0002J\u0250\u0003\u0002",
    "\u0002\u0002L\u025d\u0003\u0002\u0002\u0002N\u0264\u0003\u0002\u0002",
    "\u0002P\u0269\u0003\u0002\u0002\u0002R\u0285\u0003\u0002\u0002\u0002",
    "T\u0292\u0003\u0002\u0002\u0002V\u0299\u0003\u0002\u0002\u0002X\u02a1",
    "\u0003\u0002\u0002\u0002Z\u02b9\u0003\u0002\u0002\u0002\\\u02c6\u0003",
    "\u0002\u0002\u0002^\u02cd\u0003\u0002\u0002\u0002`\u02d4\u0003\u0002",
    "\u0002\u0002b\u02e3\u0003\u0002\u0002\u0002d\u02ea\u0003\u0002\u0002",
    "\u0002f\u02f4\u0003\u0002\u0002\u0002h\u0303\u0003\u0002\u0002\u0002",
    "j\u030a\u0003\u0002\u0002\u0002l\u030f\u0003\u0002\u0002\u0002n\u0327",
    "\u0003\u0002\u0002\u0002p\u0334\u0003\u0002\u0002\u0002r\u033b\u0003",
    "\u0002\u0002\u0002t\u0343\u0003\u0002\u0002\u0002v\u035e\u0003\u0002",
    "\u0002\u0002x\u036b\u0003\u0002\u0002\u0002z\u0372\u0003\u0002\u0002",
    "\u0002|\u037a\u0003\u0002\u0002\u0002~\u0392\u0003\u0002\u0002\u0002",
    "\u0080\u039f\u0003\u0002\u0002\u0002\u0082\u03a6\u0003\u0002\u0002\u0002",
    "\u0084\u03ab\u0003\u0002\u0002\u0002\u0086\u03c3\u0003\u0002\u0002\u0002",
    "\u0088\u03d0\u0003\u0002\u0002\u0002\u008a\u03d7\u0003\u0002\u0002\u0002",
    "\u008c\u03dc\u0003\u0002\u0002\u0002\u008e\u03f4\u0003\u0002\u0002\u0002",
    "\u0090\u0401\u0003\u0002\u0002\u0002\u0092\u0408\u0003\u0002\u0002\u0002",
    "\u0094\u0411\u0003\u0002\u0002\u0002\u0096\u0429\u0003\u0002\u0002\u0002",
    "\u0098\u0436\u0003\u0002\u0002\u0002\u009a\u043d\u0003\u0002\u0002\u0002",
    "\u009c\u0442\u0003\u0002\u0002\u0002\u009e\u0455\u0003\u0002\u0002\u0002",
    "\u00a0\u045c\u0003\u0002\u0002\u0002\u00a2\u0465\u0003\u0002\u0002\u0002",
    "\u00a4\u0473\u0003\u0002\u0002\u0002\u00a6\u047a\u0003\u0002\u0002\u0002",
    "\u00a8\u047f\u0003\u0002\u0002\u0002\u00aa\u049f\u0003\u0002\u0002\u0002",
    "\u00ac\u00ae\u0005\u000e\b\u0002\u00ad\u00ac\u0003\u0002\u0002\u0002",
    "\u00ae\u00b1\u0003\u0002\u0002\u0002\u00af\u00ad\u0003\u0002\u0002\u0002",
    "\u00af\u00b0\u0003\u0002\u0002\u0002\u00b0\u00b4\u0003\u0002\u0002\u0002",
    "\u00b1\u00af\u0003\u0002\u0002\u0002\u00b2\u00b4\u0005\u0004\u0003\u0002",
    "\u00b3\u00af\u0003\u0002\u0002\u0002\u00b3\u00b2\u0003\u0002\u0002\u0002",
    "\u00b4\u00b6\u0003\u0002\u0002\u0002\u00b5\u00b7\u0005\f\u0007\u0002",
    "\u00b6\u00b5\u0003\u0002\u0002\u0002\u00b6\u00b7\u0003\u0002\u0002\u0002",
    "\u00b7\u00bb\u0003\u0002\u0002\u0002\u00b8\u00ba\u0007\u0011\u0002\u0002",
    "\u00b9\u00b8\u0003\u0002\u0002\u0002\u00ba\u00bd\u0003\u0002\u0002\u0002",
    "\u00bb\u00b9\u0003\u0002\u0002\u0002\u00bb\u00bc\u0003\u0002\u0002\u0002",
    "\u00bc\u00be\u0003\u0002\u0002\u0002\u00bd\u00bb\u0003\u0002\u0002\u0002",
    "\u00be\u00bf\u0007\u0002\u0002\u0003\u00bf\u0003\u0003\u0002\u0002\u0002",
    "\u00c0\u00c3\u0005\u0006\u0004\u0002\u00c1\u00c3\u0005\b\u0005\u0002",
    "\u00c2\u00c0\u0003\u0002\u0002\u0002\u00c2\u00c1\u0003\u0002\u0002\u0002",
    "\u00c3\u0005\u0003\u0002\u0002\u0002\u00c4\u00c5\u0005<\u001f\u0002",
    "\u00c5\u00c6\u0007\u000f\u0002\u0002\u00c6\u00c7\u0005\u0012\n\u0002",
    "\u00c7\u00c8\u0007\u000f\u0002\u0002\u00c8\u00c9\u0005B\"\u0002\u00c9",
    "\u010d\u0003\u0002\u0002\u0002\u00ca\u00cb\u0005D#\u0002\u00cb\u00cc",
    "\u0007\u000f\u0002\u0002\u00cc\u00cd\u0005\u0012\n\u0002\u00cd\u00ce",
    "\u0007\u000f\u0002\u0002\u00ce\u00cf\u0005J&\u0002\u00cf\u010d\u0003",
    "\u0002\u0002\u0002\u00d0\u00d1\u0005L\'\u0002\u00d1\u00d2\u0007\u000f",
    "\u0002\u0002\u00d2\u00d3\u0005\u0012\n\u0002\u00d3\u00d4\u0007\u000f",
    "\u0002\u0002\u00d4\u00d5\u0005R*\u0002\u00d5\u010d\u0003\u0002\u0002",
    "\u0002\u00d6\u00d7\u0005.\u0018\u0002\u00d7\u00d8\u0007\u000f\u0002",
    "\u0002\u00d8\u00d9\u0005\u0012\n\u0002\u00d9\u00da\u0007\u000f\u0002",
    "\u0002\u00da\u00db\u00054\u001b\u0002\u00db\u010d\u0003\u0002\u0002",
    "\u0002\u00dc\u00dd\u0005T+\u0002\u00dd\u00de\u0007\u000f\u0002\u0002",
    "\u00de\u00df\u0005\u0012\n\u0002\u00df\u00e0\u0007\u000f\u0002\u0002",
    "\u00e0\u00e1\u0005Z.\u0002\u00e1\u010d\u0003\u0002\u0002\u0002\u00e2",
    "\u00e3\u0005h5\u0002\u00e3\u00e4\u0007\u000f\u0002\u0002\u00e4\u00e5",
    "\u0005\u0012\n\u0002\u00e5\u00e6\u0007\u000f\u0002\u0002\u00e6\u00e7",
    "\u0005n8\u0002\u00e7\u010d\u0003\u0002\u0002\u0002\u00e8\u00e9\u0005",
    "p9\u0002\u00e9\u00ea\u0007\u000f\u0002\u0002\u00ea\u00eb\u0005\u0012",
    "\n\u0002\u00eb\u00ec\u0007\u000f\u0002\u0002\u00ec\u00ed\u0005v<\u0002",
    "\u00ed\u010d\u0003\u0002\u0002\u0002\u00ee\u00ef\u0005x=\u0002\u00ef",
    "\u00f0\u0007\u000f\u0002\u0002\u00f0\u00f1\u0005\u0012\n\u0002\u00f1",
    "\u00f2\u0007\u000f\u0002\u0002\u00f2\u00f3\u0005~@\u0002\u00f3\u010d",
    "\u0003\u0002\u0002\u0002\u00f4\u00f5\u0005\u0080A\u0002\u00f5\u00f6",
    "\u0007\u000f\u0002\u0002\u00f6\u00f7\u0005\u0012\n\u0002\u00f7\u00f8",
    "\u0007\u000f\u0002\u0002\u00f8\u00f9\u0005\u0086D\u0002\u00f9\u010d",
    "\u0003\u0002\u0002\u0002\u00fa\u00fb\u0005\u0088E\u0002\u00fb\u00fc",
    "\u0007\u000f\u0002\u0002\u00fc\u00fd\u0005\u0012\n\u0002\u00fd\u00fe",
    "\u0007\u000f\u0002\u0002\u00fe\u00ff\u0005\u008eH\u0002\u00ff\u010d",
    "\u0003\u0002\u0002\u0002\u0100\u0101\u0005\u0098M\u0002\u0101\u0102",
    "\u0007\u000f\u0002\u0002\u0102\u0103\u0005\u0012\n\u0002\u0103\u0104",
    "\u0007\u000f\u0002\u0002\u0104\u0105\u0005\u0096L\u0002\u0105\u010d",
    "\u0003\u0002\u0002\u0002\u0106\u0107\u0005\u00a4S\u0002\u0107\u0108",
    "\u0007\u000f\u0002\u0002\u0108\u0109\u0005\u0012\n\u0002\u0109\u010a",
    "\u0007\u000f\u0002\u0002\u010a\u010b\u0005\u00aaV\u0002\u010b\u010d",
    "\u0003\u0002\u0002\u0002\u010c\u00c4\u0003\u0002\u0002\u0002\u010c\u00ca",
    "\u0003\u0002\u0002\u0002\u010c\u00d0\u0003\u0002\u0002\u0002\u010c\u00d6",
    "\u0003\u0002\u0002\u0002\u010c\u00dc\u0003\u0002\u0002\u0002\u010c\u00e2",
    "\u0003\u0002\u0002\u0002\u010c\u00e8\u0003\u0002\u0002\u0002\u010c\u00ee",
    "\u0003\u0002\u0002\u0002\u010c\u00f4\u0003\u0002\u0002\u0002\u010c\u00fa",
    "\u0003\u0002\u0002\u0002\u010c\u0100\u0003\u0002\u0002\u0002\u010c\u0106",
    "\u0003\u0002\u0002\u0002\u010d\u0007\u0003\u0002\u0002\u0002\u010e\u010f",
    "\u0005<\u001f\u0002\u010f\u0110\u0007\u000f\u0002\u0002\u0110\u0111",
    "\u0005\u0014\u000b\u0002\u0111\u0112\u0007\u000f\u0002\u0002\u0112\u0113",
    "\u0005<\u001f\u0002\u0113\u0157\u0003\u0002\u0002\u0002\u0114\u0115",
    "\u0005D#\u0002\u0115\u0116\u0007\u000f\u0002\u0002\u0116\u0117\u0005",
    "\u0014\u000b\u0002\u0117\u0118\u0007\u000f\u0002\u0002\u0118\u0119\u0005",
    "D#\u0002\u0119\u0157\u0003\u0002\u0002\u0002\u011a\u011b\u0005L\'\u0002",
    "\u011b\u011c\u0007\u000f\u0002\u0002\u011c\u011d\u0005\u0014\u000b\u0002",
    "\u011d\u011e\u0007\u000f\u0002\u0002\u011e\u011f\u0005L\'\u0002\u011f",
    "\u0157\u0003\u0002\u0002\u0002\u0120\u0121\u0005.\u0018\u0002\u0121",
    "\u0122\u0007\u000f\u0002\u0002\u0122\u0123\u0005\u0014\u000b\u0002\u0123",
    "\u0124\u0007\u000f\u0002\u0002\u0124\u0125\u0005.\u0018\u0002\u0125",
    "\u0157\u0003\u0002\u0002\u0002\u0126\u0127\u0005T+\u0002\u0127\u0128",
    "\u0007\u000f\u0002\u0002\u0128\u0129\u0005\u0014\u000b\u0002\u0129\u012a",
    "\u0007\u000f\u0002\u0002\u012a\u012b\u0005T+\u0002\u012b\u0157\u0003",
    "\u0002\u0002\u0002\u012c\u012d\u0005h5\u0002\u012d\u012e\u0007\u000f",
    "\u0002\u0002\u012e\u012f\u0005\u0014\u000b\u0002\u012f\u0130\u0007\u000f",
    "\u0002\u0002\u0130\u0131\u0005h5\u0002\u0131\u0157\u0003\u0002\u0002",
    "\u0002\u0132\u0133\u0005p9\u0002\u0133\u0134\u0007\u000f\u0002\u0002",
    "\u0134\u0135\u0005\u0014\u000b\u0002\u0135\u0136\u0007\u000f\u0002\u0002",
    "\u0136\u0137\u0005p9\u0002\u0137\u0157\u0003\u0002\u0002\u0002\u0138",
    "\u0139\u0005x=\u0002\u0139\u013a\u0007\u000f\u0002\u0002\u013a\u013b",
    "\u0005\u0014\u000b\u0002\u013b\u013c\u0007\u000f\u0002\u0002\u013c\u013d",
    "\u0005x=\u0002\u013d\u0157\u0003\u0002\u0002\u0002\u013e\u013f\u0005",
    "\u0080A\u0002\u013f\u0140\u0007\u000f\u0002\u0002\u0140\u0141\u0005",
    "\u0014\u000b\u0002\u0141\u0142\u0007\u000f\u0002\u0002\u0142\u0143\u0005",
    "\u0080A\u0002\u0143\u0157\u0003\u0002\u0002\u0002\u0144\u0145\u0005",
    "\u0088E\u0002\u0145\u0146\u0007\u000f\u0002\u0002\u0146\u0147\u0005",
    "\u0014\u000b\u0002\u0147\u0148\u0007\u000f\u0002\u0002\u0148\u0149\u0005",
    "\u0088E\u0002\u0149\u0157\u0003\u0002\u0002\u0002\u014a\u014b\u0005",
    "\u0098M\u0002\u014b\u014c\u0007\u000f\u0002\u0002\u014c\u014d\u0005",
    "\u0014\u000b\u0002\u014d\u014e\u0007\u000f\u0002\u0002\u014e\u014f\u0005",
    "\u0098M\u0002\u014f\u0157\u0003\u0002\u0002\u0002\u0150\u0151\u0005",
    "\u00a4S\u0002\u0151\u0152\u0007\u000f\u0002\u0002\u0152\u0153\u0005",
    "\u0014\u000b\u0002\u0153\u0154\u0007\u000f\u0002\u0002\u0154\u0155\u0005",
    "\u00a4S\u0002\u0155\u0157\u0003\u0002\u0002\u0002\u0156\u010e\u0003",
    "\u0002\u0002\u0002\u0156\u0114\u0003\u0002\u0002\u0002\u0156\u011a\u0003",
    "\u0002\u0002\u0002\u0156\u0120\u0003\u0002\u0002\u0002\u0156\u0126\u0003",
    "\u0002\u0002\u0002\u0156\u012c\u0003\u0002\u0002\u0002\u0156\u0132\u0003",
    "\u0002\u0002\u0002\u0156\u0138\u0003\u0002\u0002\u0002\u0156\u013e\u0003",
    "\u0002\u0002\u0002\u0156\u0144\u0003\u0002\u0002\u0002\u0156\u014a\u0003",
    "\u0002\u0002\u0002\u0156\u0150\u0003\u0002\u0002\u0002\u0157\t\u0003",
    "\u0002\u0002\u0002\u0158\u015a\u0007\u0010\u0002\u0002\u0159\u0158\u0003",
    "\u0002\u0002\u0002\u015a\u015b\u0003\u0002\u0002\u0002\u015b\u0159\u0003",
    "\u0002\u0002\u0002\u015b\u015c\u0003\u0002\u0002\u0002\u015c\u000b\u0003",
    "\u0002\u0002\u0002\u015d\u015e\u0007\u0003\u0002\u0002\u015e\r\u0003",
    "\u0002\u0002\u0002\u015f\u0160\u0007\u0011\u0002\u0002\u0160\u000f\u0003",
    "\u0002\u0002\u0002\u0161\u0162\u0007\u0004\u0002\u0002\u0162\u0011\u0003",
    "\u0002\u0002\u0002\u0163\u0164\u0007\u0005\u0002\u0002\u0164\u0013\u0003",
    "\u0002\u0002\u0002\u0165\u0166\u0007\u0006\u0002\u0002\u0166\u0015\u0003",
    "\u0002\u0002\u0002\u0167\u0168\u0007\u0007\u0002\u0002\u0168\u0017\u0003",
    "\u0002\u0002\u0002\u0169\u016a\u0007\b\u0002\u0002\u016a\u0019\u0003",
    "\u0002\u0002\u0002\u016b\u016c\u0007\t\u0002\u0002\u016c\u001b\u0003",
    "\u0002\u0002\u0002\u016d\u016e\u0007\n\u0002\u0002\u016e\u001d\u0003",
    "\u0002\u0002\u0002\u016f\u0170\u0007\u000b\u0002\u0002\u0170\u001f\u0003",
    "\u0002\u0002\u0002\u0171\u0172\u0007\f\u0002\u0002\u0172!\u0003\u0002",
    "\u0002\u0002\u0173\u0174\u0007\r\u0002\u0002\u0174#\u0003\u0002\u0002",
    "\u0002\u0175\u0176\u0007\u000e\u0002\u0002\u0176%\u0003\u0002\u0002",
    "\u0002\u0177\u017a\u0005\u001a\u000e\u0002\u0178\u017a\u0005\u001c\u000f",
    "\u0002\u0179\u0177\u0003\u0002\u0002\u0002\u0179\u0178\u0003\u0002\u0002",
    "\u0002\u017a\'\u0003\u0002\u0002\u0002\u017b\u017d\u0007\u0015\u0002",
    "\u0002\u017c\u017e\u0005,\u0017\u0002\u017d\u017c\u0003\u0002\u0002",
    "\u0002\u017d\u017e\u0003\u0002\u0002\u0002\u017e\u0180\u0003\u0002\u0002",
    "\u0002\u017f\u0181\u0005*\u0016\u0002\u0180\u017f\u0003\u0002\u0002",
    "\u0002\u0180\u0181\u0003\u0002\u0002\u0002\u0181)\u0003\u0002\u0002",
    "\u0002\u0182\u0183\u0007\u000f\u0002\u0002\u0183\u0184\u0005\u0018\r",
    "\u0002\u0184\u018f\u0007\u000f\u0002\u0002\u0185\u0190\u0005\u00a4S",
    "\u0002\u0186\u0190\u0005<\u001f\u0002\u0187\u0190\u0005D#\u0002\u0188",
    "\u0190\u0005p9\u0002\u0189\u0190\u0005T+\u0002\u018a\u0190\u0005.\u0018",
    "\u0002\u018b\u0190\u0005\\/\u0002\u018c\u0190\u0005L\'\u0002\u018d\u0190",
    "\u0005\u0088E\u0002\u018e\u0190\u00056\u001c\u0002\u018f\u0185\u0003",
    "\u0002\u0002\u0002\u018f\u0186\u0003\u0002\u0002\u0002\u018f\u0187\u0003",
    "\u0002\u0002\u0002\u018f\u0188\u0003\u0002\u0002\u0002\u018f\u0189\u0003",
    "\u0002\u0002\u0002\u018f\u018a\u0003\u0002\u0002\u0002\u018f\u018b\u0003",
    "\u0002\u0002\u0002\u018f\u018c\u0003\u0002\u0002\u0002\u018f\u018d\u0003",
    "\u0002\u0002\u0002\u018f\u018e\u0003\u0002\u0002\u0002\u0190+\u0003",
    "\u0002\u0002\u0002\u0191\u0192\u0007\u000f\u0002\u0002\u0192\u0193\u0005",
    "\u0016\f\u0002\u0193\u0195\u0007\u000f\u0002\u0002\u0194\u0196\u0005",
    "$\u0013\u0002\u0195\u0194\u0003\u0002\u0002\u0002\u0195\u0196\u0003",
    "\u0002\u0002\u0002\u0196\u0198\u0003\u0002\u0002\u0002\u0197\u0199\u0007",
    "\u000f\u0002\u0002\u0198\u0197\u0003\u0002\u0002\u0002\u0198\u0199\u0003",
    "\u0002\u0002\u0002\u0199\u019c\u0003\u0002\u0002\u0002\u019a\u019d\u0005",
    " \u0011\u0002\u019b\u019d\u0005\"\u0012\u0002\u019c\u019a\u0003\u0002",
    "\u0002\u0002\u019c\u019b\u0003\u0002\u0002\u0002\u019d\u019e\u0003\u0002",
    "\u0002\u0002\u019e\u019f\u0007\u000f\u0002\u0002\u019f\u01a1\u0005\n",
    "\u0006\u0002\u01a0\u01a2\u0007\u0012\u0002\u0002\u01a1\u01a0\u0003\u0002",
    "\u0002\u0002\u01a1\u01a2\u0003\u0002\u0002\u0002\u01a2-\u0003\u0002",
    "\u0002\u0002\u01a3\u01a5\u0007\u0016\u0002\u0002\u01a4\u01a6\u00052",
    "\u001a\u0002\u01a5\u01a4\u0003\u0002\u0002\u0002\u01a5\u01a6\u0003\u0002",
    "\u0002\u0002\u01a6\u01a8\u0003\u0002\u0002\u0002\u01a7\u01a9\u00050",
    "\u0019\u0002\u01a8\u01a7\u0003\u0002\u0002\u0002\u01a8\u01a9\u0003\u0002",
    "\u0002\u0002\u01a9/\u0003\u0002\u0002\u0002\u01aa\u01ab\u0007\u000f",
    "\u0002\u0002\u01ab\u01ac\u0005\u0018\r\u0002\u01ac\u01b2\u0007\u000f",
    "\u0002\u0002\u01ad\u01b3\u0005\u00a4S\u0002\u01ae\u01b3\u0005<\u001f",
    "\u0002\u01af\u01b3\u0005L\'\u0002\u01b0\u01b3\u0005D#\u0002\u01b1\u01b3",
    "\u0005p9\u0002\u01b2\u01ad\u0003\u0002\u0002\u0002\u01b2\u01ae\u0003",
    "\u0002\u0002\u0002\u01b2\u01af\u0003\u0002\u0002\u0002\u01b2\u01b0\u0003",
    "\u0002\u0002\u0002\u01b2\u01b1\u0003\u0002\u0002\u0002\u01b31\u0003",
    "\u0002\u0002\u0002\u01b4\u01b5\u0007\u000f\u0002\u0002\u01b5\u01b6\u0005",
    "\u0016\f\u0002\u01b6\u01b7\u0007\u000f\u0002\u0002\u01b7\u01b9\u0005",
    "4\u001b\u0002\u01b8\u01ba\u0007\u0012\u0002\u0002\u01b9\u01b8\u0003",
    "\u0002\u0002\u0002\u01b9\u01ba\u0003\u0002\u0002\u0002\u01ba3\u0003",
    "\u0002\u0002\u0002\u01bb\u01bc\b\u001b\u0001\u0002\u01bc\u01bd\u0007",
    "\u0013\u0002\u0002\u01bd\u01be\u00054\u001b\u0002\u01be\u01bf\u0007",
    "\u0014\u0002\u0002\u01bf\u01cd\u0003\u0002\u0002\u0002\u01c0\u01c2\u0007",
    "\u000f\u0002\u0002\u01c1\u01c0\u0003\u0002\u0002\u0002\u01c1\u01c2\u0003",
    "\u0002\u0002\u0002\u01c2\u01c3\u0003\u0002\u0002\u0002\u01c3\u01c4\u0005",
    "\u001e\u0010\u0002\u01c4\u01c7\u0007\u000f\u0002\u0002\u01c5\u01c8\u0005",
    "(\u0015\u0002\u01c6\u01c8\u0005\u0088E\u0002\u01c7\u01c5\u0003\u0002",
    "\u0002\u0002\u01c7\u01c6\u0003\u0002\u0002\u0002\u01c8\u01ca\u0003\u0002",
    "\u0002\u0002\u01c9\u01cb\u0007\u000f\u0002\u0002\u01ca\u01c9\u0003\u0002",
    "\u0002\u0002\u01ca\u01cb\u0003\u0002\u0002\u0002\u01cb\u01cd\u0003\u0002",
    "\u0002\u0002\u01cc\u01bb\u0003\u0002\u0002\u0002\u01cc\u01c1\u0003\u0002",
    "\u0002\u0002\u01cd\u01d6\u0003\u0002\u0002\u0002\u01ce\u01cf\f\u0004",
    "\u0002\u0002\u01cf\u01d0\u0007\u000f\u0002\u0002\u01d0\u01d1\u0005&",
    "\u0014\u0002\u01d1\u01d2\u0007\u000f\u0002\u0002\u01d2\u01d3\u00054",
    "\u001b\u0005\u01d3\u01d5\u0003\u0002\u0002\u0002\u01d4\u01ce\u0003\u0002",
    "\u0002\u0002\u01d5\u01d8\u0003\u0002\u0002\u0002\u01d6\u01d4\u0003\u0002",
    "\u0002\u0002\u01d6\u01d7\u0003\u0002\u0002\u0002\u01d75\u0003\u0002",
    "\u0002\u0002\u01d8\u01d6\u0003\u0002\u0002\u0002\u01d9\u01db\u0007\u0018",
    "\u0002\u0002\u01da\u01dc\u0005:\u001e\u0002\u01db\u01da\u0003\u0002",
    "\u0002\u0002\u01db\u01dc\u0003\u0002\u0002\u0002\u01dc\u01de\u0003\u0002",
    "\u0002\u0002\u01dd\u01df\u00058\u001d\u0002\u01de\u01dd\u0003\u0002",
    "\u0002\u0002\u01de\u01df\u0003\u0002\u0002\u0002\u01df7\u0003\u0002",
    "\u0002\u0002\u01e0\u01e1\u0007\u000f\u0002\u0002\u01e1\u01e2\u0005\u0018",
    "\r\u0002\u01e2\u01e3\u0007\u000f\u0002\u0002\u01e3\u01e4\u0005\u00a4",
    "S\u0002\u01e49\u0003\u0002\u0002\u0002\u01e5\u01e6\u0007\u000f\u0002",
    "\u0002\u01e6\u01e7\u0005\u0016\f\u0002\u01e7\u01e9\u0007\u000f\u0002",
    "\u0002\u01e8\u01ea\u0005$\u0013\u0002\u01e9\u01e8\u0003\u0002\u0002",
    "\u0002\u01e9\u01ea\u0003\u0002\u0002\u0002\u01ea\u01ec\u0003\u0002\u0002",
    "\u0002\u01eb\u01ed\u0007\u000f\u0002\u0002\u01ec\u01eb\u0003\u0002\u0002",
    "\u0002\u01ec\u01ed\u0003\u0002\u0002\u0002\u01ed\u01ee\u0003\u0002\u0002",
    "\u0002\u01ee\u01ef\u0005 \u0011\u0002\u01ef\u01f0\u0007\u000f\u0002",
    "\u0002\u01f0\u01f2\u0005\n\u0006\u0002\u01f1\u01f3\u0007\u0012\u0002",
    "\u0002\u01f2\u01f1\u0003\u0002\u0002\u0002\u01f2\u01f3\u0003\u0002\u0002",
    "\u0002\u01f3;\u0003\u0002\u0002\u0002\u01f4\u01f6\u0007\u0019\u0002",
    "\u0002\u01f5\u01f7\u0005@!\u0002\u01f6\u01f5\u0003\u0002\u0002\u0002",
    "\u01f6\u01f7\u0003\u0002\u0002\u0002\u01f7\u01f9\u0003\u0002\u0002\u0002",
    "\u01f8\u01fa\u0005> \u0002\u01f9\u01f8\u0003\u0002\u0002\u0002\u01f9",
    "\u01fa\u0003\u0002\u0002\u0002\u01fa=\u0003\u0002\u0002\u0002\u01fb",
    "\u01fc\u0007\u000f\u0002\u0002\u01fc\u01fd\u0005\u0018\r\u0002\u01fd",
    "\u01fe\u0007\u000f\u0002\u0002\u01fe\u01ff\u0005\u00a4S\u0002\u01ff",
    "?\u0003\u0002\u0002\u0002\u0200\u0201\u0007\u000f\u0002\u0002\u0201",
    "\u0202\u0005\u0016\f\u0002\u0202\u0203\u0007\u000f\u0002\u0002\u0203",
    "\u0205\u0005B\"\u0002\u0204\u0206\u0007\u0012\u0002\u0002\u0205\u0204",
    "\u0003\u0002\u0002\u0002\u0205\u0206\u0003\u0002\u0002\u0002\u0206A",
    "\u0003\u0002\u0002\u0002\u0207\u0208\b\"\u0001\u0002\u0208\u0209\u0007",
    "\u0013\u0002\u0002\u0209\u020a\u0005B\"\u0002\u020a\u020b\u0007\u0014",
    "\u0002\u0002\u020b\u021e\u0003\u0002\u0002\u0002\u020c\u020e\u0007\u000f",
    "\u0002\u0002\u020d\u020c\u0003\u0002\u0002\u0002\u020d\u020e\u0003\u0002",
    "\u0002\u0002\u020e\u020f\u0003\u0002\u0002\u0002\u020f\u0210\u0005\u001e",
    "\u0010\u0002\u0210\u0218\u0007\u000f\u0002\u0002\u0211\u0219\u0005.",
    "\u0018\u0002\u0212\u0219\u0005b2\u0002\u0213\u0219\u0005(\u0015\u0002",
    "\u0214\u0219\u0005T+\u0002\u0215\u0219\u0005h5\u0002\u0216\u0219\u0005",
    "p9\u0002\u0217\u0219\u0005x=\u0002\u0218\u0211\u0003\u0002\u0002\u0002",
    "\u0218\u0212\u0003\u0002\u0002\u0002\u0218\u0213\u0003\u0002\u0002\u0002",
    "\u0218\u0214\u0003\u0002\u0002\u0002\u0218\u0215\u0003\u0002\u0002\u0002",
    "\u0218\u0216\u0003\u0002\u0002\u0002\u0218\u0217\u0003\u0002\u0002\u0002",
    "\u0219\u021b\u0003\u0002\u0002\u0002\u021a\u021c\u0007\u000f\u0002\u0002",
    "\u021b\u021a\u0003\u0002\u0002\u0002\u021b\u021c\u0003\u0002\u0002\u0002",
    "\u021c\u021e\u0003\u0002\u0002\u0002\u021d\u0207\u0003\u0002\u0002\u0002",
    "\u021d\u020d\u0003\u0002\u0002\u0002\u021e\u0227\u0003\u0002\u0002\u0002",
    "\u021f\u0220\f\u0004\u0002\u0002\u0220\u0221\u0007\u000f\u0002\u0002",
    "\u0221\u0222\u0005&\u0014\u0002\u0222\u0223\u0007\u000f\u0002\u0002",
    "\u0223\u0224\u0005B\"\u0005\u0224\u0226\u0003\u0002\u0002\u0002\u0225",
    "\u021f\u0003\u0002\u0002\u0002\u0226\u0229\u0003\u0002\u0002\u0002\u0227",
    "\u0225\u0003\u0002\u0002\u0002\u0227\u0228\u0003\u0002\u0002\u0002\u0228",
    "C\u0003\u0002\u0002\u0002\u0229\u0227\u0003\u0002\u0002\u0002\u022a",
    "\u022c\u0007\u001a\u0002\u0002\u022b\u022d\u0005H%\u0002\u022c\u022b",
    "\u0003\u0002\u0002\u0002\u022c\u022d\u0003\u0002\u0002\u0002\u022d\u022f",
    "\u0003\u0002\u0002\u0002\u022e\u0230\u0005F$\u0002\u022f\u022e\u0003",
    "\u0002\u0002\u0002\u022f\u0230\u0003\u0002\u0002\u0002\u0230E\u0003",
    "\u0002\u0002\u0002\u0231\u0232\u0007\u000f\u0002\u0002\u0232\u0233\u0005",
    "\u0018\r\u0002\u0233\u0234\u0007\u000f\u0002\u0002\u0234\u0235\u0005",
    "\u00a4S\u0002\u0235G\u0003\u0002\u0002\u0002\u0236\u0237\u0007\u000f",
    "\u0002\u0002\u0237\u0238\u0005\u0016\f\u0002\u0238\u0239\u0007\u000f",
    "\u0002\u0002\u0239\u023b\u0005J&\u0002\u023a\u023c\u0007\u0012\u0002",
    "\u0002\u023b\u023a\u0003\u0002\u0002\u0002\u023b\u023c\u0003\u0002\u0002",
    "\u0002\u023cI\u0003\u0002\u0002\u0002\u023d\u023e\b&\u0001\u0002\u023e",
    "\u023f\u0007\u0013\u0002\u0002\u023f\u0240\u0005J&\u0002\u0240\u0241",
    "\u0007\u0014\u0002\u0002\u0241\u0251\u0003\u0002\u0002\u0002\u0242\u0244",
    "\u0007\u000f\u0002\u0002\u0243\u0242\u0003\u0002\u0002\u0002\u0243\u0244",
    "\u0003\u0002\u0002\u0002\u0244\u0245\u0003\u0002\u0002\u0002\u0245\u0246",
    "\u0005\u001e\u0010\u0002\u0246\u024b\u0007\u000f\u0002\u0002\u0247\u024c",
    "\u0005.\u0018\u0002\u0248\u024c\u0005b2\u0002\u0249\u024c\u0005(\u0015",
    "\u0002\u024a\u024c\u0005T+\u0002\u024b\u0247\u0003\u0002\u0002\u0002",
    "\u024b\u0248\u0003\u0002\u0002\u0002\u024b\u0249\u0003\u0002\u0002\u0002",
    "\u024b\u024a\u0003\u0002\u0002\u0002\u024c\u024e\u0003\u0002\u0002\u0002",
    "\u024d\u024f\u0007\u000f\u0002\u0002\u024e\u024d\u0003\u0002\u0002\u0002",
    "\u024e\u024f\u0003\u0002\u0002\u0002\u024f\u0251\u0003\u0002\u0002\u0002",
    "\u0250\u023d\u0003\u0002\u0002\u0002\u0250\u0243\u0003\u0002\u0002\u0002",
    "\u0251\u025a\u0003\u0002\u0002\u0002\u0252\u0253\f\u0004\u0002\u0002",
    "\u0253\u0254\u0007\u000f\u0002\u0002\u0254\u0255\u0005&\u0014\u0002",
    "\u0255\u0256\u0007\u000f\u0002\u0002\u0256\u0257\u0005J&\u0005\u0257",
    "\u0259\u0003\u0002\u0002\u0002\u0258\u0252\u0003\u0002\u0002\u0002\u0259",
    "\u025c\u0003\u0002\u0002\u0002\u025a\u0258\u0003\u0002\u0002\u0002\u025a",
    "\u025b\u0003\u0002\u0002\u0002\u025bK\u0003\u0002\u0002\u0002\u025c",
    "\u025a\u0003\u0002\u0002\u0002\u025d\u025f\u0007\u001b\u0002\u0002\u025e",
    "\u0260\u0005P)\u0002\u025f\u025e\u0003\u0002\u0002\u0002\u025f\u0260",
    "\u0003\u0002\u0002\u0002\u0260\u0262\u0003\u0002\u0002\u0002\u0261\u0263",
    "\u0005N(\u0002\u0262\u0261\u0003\u0002\u0002\u0002\u0262\u0263\u0003",
    "\u0002\u0002\u0002\u0263M\u0003\u0002\u0002\u0002\u0264\u0265\u0007",
    "\u000f\u0002\u0002\u0265\u0266\u0005\u0018\r\u0002\u0266\u0267\u0007",
    "\u000f\u0002\u0002\u0267\u0268\u0005\u00a4S\u0002\u0268O\u0003\u0002",
    "\u0002\u0002\u0269\u026a\u0007\u000f\u0002\u0002\u026a\u026b\u0005\u0016",
    "\f\u0002\u026b\u026c\u0007\u000f\u0002\u0002\u026c\u026e\u0005R*\u0002",
    "\u026d\u026f\u0007\u0012\u0002\u0002\u026e\u026d\u0003\u0002\u0002\u0002",
    "\u026e\u026f\u0003\u0002\u0002\u0002\u026fQ\u0003\u0002\u0002\u0002",
    "\u0270\u0271\b*\u0001\u0002\u0271\u0272\u0007\u0013\u0002\u0002\u0272",
    "\u0273\u0005R*\u0002\u0273\u0274\u0007\u0014\u0002\u0002\u0274\u0286",
    "\u0003\u0002\u0002\u0002\u0275\u0277\u0007\u000f\u0002\u0002\u0276\u0275",
    "\u0003\u0002\u0002\u0002\u0276\u0277\u0003\u0002\u0002\u0002\u0277\u0278",
    "\u0003\u0002\u0002\u0002\u0278\u0279\u0005\u001e\u0010\u0002\u0279\u0280",
    "\u0007\u000f\u0002\u0002\u027a\u0281\u0005.\u0018\u0002\u027b\u0281",
    "\u0005b2\u0002\u027c\u0281\u0005T+\u0002\u027d\u0281\u0005h5\u0002\u027e",
    "\u0281\u0005p9\u0002\u027f\u0281\u0005x=\u0002\u0280\u027a\u0003\u0002",
    "\u0002\u0002\u0280\u027b\u0003\u0002\u0002\u0002\u0280\u027c\u0003\u0002",
    "\u0002\u0002\u0280\u027d\u0003\u0002\u0002\u0002\u0280\u027e\u0003\u0002",
    "\u0002\u0002\u0280\u027f\u0003\u0002\u0002\u0002\u0281\u0283\u0003\u0002",
    "\u0002\u0002\u0282\u0284\u0007\u000f\u0002\u0002\u0283\u0282\u0003\u0002",
    "\u0002\u0002\u0283\u0284\u0003\u0002\u0002\u0002\u0284\u0286\u0003\u0002",
    "\u0002\u0002\u0285\u0270\u0003\u0002\u0002\u0002\u0285\u0276\u0003\u0002",
    "\u0002\u0002\u0286\u028f\u0003\u0002\u0002\u0002\u0287\u0288\f\u0004",
    "\u0002\u0002\u0288\u0289\u0007\u000f\u0002\u0002\u0289\u028a\u0005&",
    "\u0014\u0002\u028a\u028b\u0007\u000f\u0002\u0002\u028b\u028c\u0005R",
    "*\u0005\u028c\u028e\u0003\u0002\u0002\u0002\u028d\u0287\u0003\u0002",
    "\u0002\u0002\u028e\u0291\u0003\u0002\u0002\u0002\u028f\u028d\u0003\u0002",
    "\u0002\u0002\u028f\u0290\u0003\u0002\u0002\u0002\u0290S\u0003\u0002",
    "\u0002\u0002\u0291\u028f\u0003\u0002\u0002\u0002\u0292\u0294\u0007\u001c",
    "\u0002\u0002\u0293\u0295\u0005X-\u0002\u0294\u0293\u0003\u0002\u0002",
    "\u0002\u0294\u0295\u0003\u0002\u0002\u0002\u0295\u0297\u0003\u0002\u0002",
    "\u0002\u0296\u0298\u0005V,\u0002\u0297\u0296\u0003\u0002\u0002\u0002",
    "\u0297\u0298\u0003\u0002\u0002\u0002\u0298U\u0003\u0002\u0002\u0002",
    "\u0299\u029a\u0007\u000f\u0002\u0002\u029a\u029b\u0005\u0018\r\u0002",
    "\u029b\u029f\u0007\u000f\u0002\u0002\u029c\u02a0\u0005<\u001f\u0002",
    "\u029d\u02a0\u0005L\'\u0002\u029e\u02a0\u0005D#\u0002\u029f\u029c\u0003",
    "\u0002\u0002\u0002\u029f\u029d\u0003\u0002\u0002\u0002\u029f\u029e\u0003",
    "\u0002\u0002\u0002\u02a0W\u0003\u0002\u0002\u0002\u02a1\u02a2\u0007",
    "\u000f\u0002\u0002\u02a2\u02a3\u0005\u0016\f\u0002\u02a3\u02a4\u0007",
    "\u000f\u0002\u0002\u02a4\u02a6\u0005Z.\u0002\u02a5\u02a7\u0007\u0012",
    "\u0002\u0002\u02a6\u02a5\u0003\u0002\u0002\u0002\u02a6\u02a7\u0003\u0002",
    "\u0002\u0002\u02a7Y\u0003\u0002\u0002\u0002\u02a8\u02a9\b.\u0001\u0002",
    "\u02a9\u02aa\u0007\u0013\u0002\u0002\u02aa\u02ab\u0005Z.\u0002\u02ab",
    "\u02ac\u0007\u0014\u0002\u0002\u02ac\u02ba\u0003\u0002\u0002\u0002\u02ad",
    "\u02af\u0007\u000f\u0002\u0002\u02ae\u02ad\u0003\u0002\u0002\u0002\u02ae",
    "\u02af\u0003\u0002\u0002\u0002\u02af\u02b0\u0003\u0002\u0002\u0002\u02b0",
    "\u02b1\u0005\u001e\u0010\u0002\u02b1\u02b4\u0007\u000f\u0002\u0002\u02b2",
    "\u02b5\u0005(\u0015\u0002\u02b3\u02b5\u0005\\/\u0002\u02b4\u02b2\u0003",
    "\u0002\u0002\u0002\u02b4\u02b3\u0003\u0002\u0002\u0002\u02b5\u02b7\u0003",
    "\u0002\u0002\u0002\u02b6\u02b8\u0007\u000f\u0002\u0002\u02b7\u02b6\u0003",
    "\u0002\u0002\u0002\u02b7\u02b8\u0003\u0002\u0002\u0002\u02b8\u02ba\u0003",
    "\u0002\u0002\u0002\u02b9\u02a8\u0003\u0002\u0002\u0002\u02b9\u02ae\u0003",
    "\u0002\u0002\u0002\u02ba\u02c3\u0003\u0002\u0002\u0002\u02bb\u02bc\f",
    "\u0004\u0002\u0002\u02bc\u02bd\u0007\u000f\u0002\u0002\u02bd\u02be\u0005",
    "&\u0014\u0002\u02be\u02bf\u0007\u000f\u0002\u0002\u02bf\u02c0\u0005",
    "Z.\u0005\u02c0\u02c2\u0003\u0002\u0002\u0002\u02c1\u02bb\u0003\u0002",
    "\u0002\u0002\u02c2\u02c5\u0003\u0002\u0002\u0002\u02c3\u02c1\u0003\u0002",
    "\u0002\u0002\u02c3\u02c4\u0003\u0002\u0002\u0002\u02c4[\u0003\u0002",
    "\u0002\u0002\u02c5\u02c3\u0003\u0002\u0002\u0002\u02c6\u02c8\u0007\u001d",
    "\u0002\u0002\u02c7\u02c9\u0005`1\u0002\u02c8\u02c7\u0003\u0002\u0002",
    "\u0002\u02c8\u02c9\u0003\u0002\u0002\u0002\u02c9\u02cb\u0003\u0002\u0002",
    "\u0002\u02ca\u02cc\u0005^0\u0002\u02cb\u02ca\u0003\u0002\u0002\u0002",
    "\u02cb\u02cc\u0003\u0002\u0002\u0002\u02cc]\u0003\u0002\u0002\u0002",
    "\u02cd\u02ce\u0007\u000f\u0002\u0002\u02ce\u02cf\u0005\u0018\r\u0002",
    "\u02cf\u02d2\u0007\u000f\u0002\u0002\u02d0\u02d3\u0005T+\u0002\u02d1",
    "\u02d3\u0005p9\u0002\u02d2\u02d0\u0003\u0002\u0002\u0002\u02d2\u02d1",
    "\u0003\u0002\u0002\u0002\u02d3_\u0003\u0002\u0002\u0002\u02d4\u02d5",
    "\u0007\u000f\u0002\u0002\u02d5\u02d6\u0005\u0016\f\u0002\u02d6\u02d8",
    "\u0007\u000f\u0002\u0002\u02d7\u02d9\u0005$\u0013\u0002\u02d8\u02d7",
    "\u0003\u0002\u0002\u0002\u02d8\u02d9\u0003\u0002\u0002\u0002\u02d9\u02db",
    "\u0003\u0002\u0002\u0002\u02da\u02dc\u0007\u000f\u0002\u0002\u02db\u02da",
    "\u0003\u0002\u0002\u0002\u02db\u02dc\u0003\u0002\u0002\u0002\u02dc\u02dd",
    "\u0003\u0002\u0002\u0002\u02dd\u02de\u0005 \u0011\u0002\u02de\u02df",
    "\u0007\u000f\u0002\u0002\u02df\u02e1\u0005\n\u0006\u0002\u02e0\u02e2",
    "\u0007\u0012\u0002\u0002\u02e1\u02e0\u0003\u0002\u0002\u0002\u02e1\u02e2",
    "\u0003\u0002\u0002\u0002\u02e2a\u0003\u0002\u0002\u0002\u02e3\u02e5",
    "\u0007\u001e\u0002\u0002\u02e4\u02e6\u0005f4\u0002\u02e5\u02e4\u0003",
    "\u0002\u0002\u0002\u02e5\u02e6\u0003\u0002\u0002\u0002\u02e6\u02e8\u0003",
    "\u0002\u0002\u0002\u02e7\u02e9\u0005d3\u0002\u02e8\u02e7\u0003\u0002",
    "\u0002\u0002\u02e8\u02e9\u0003\u0002\u0002\u0002\u02e9c\u0003\u0002",
    "\u0002\u0002\u02ea\u02eb\u0007\u000f\u0002\u0002\u02eb\u02ec\u0005\u0018",
    "\r\u0002\u02ec\u02f2\u0007\u000f\u0002\u0002\u02ed\u02f3\u0005<\u001f",
    "\u0002\u02ee\u02f3\u0005L\'\u0002\u02ef\u02f3\u0005D#\u0002\u02f0\u02f3",
    "\u0005p9\u0002\u02f1\u02f3\u0005\u00a4S\u0002\u02f2\u02ed\u0003\u0002",
    "\u0002\u0002\u02f2\u02ee\u0003\u0002\u0002\u0002\u02f2\u02ef\u0003\u0002",
    "\u0002\u0002\u02f2\u02f0\u0003\u0002\u0002\u0002\u02f2\u02f1\u0003\u0002",
    "\u0002\u0002\u02f3e\u0003\u0002\u0002\u0002\u02f4\u02f5\u0007\u000f",
    "\u0002\u0002\u02f5\u02f6\u0005\u0016\f\u0002\u02f6\u02f8\u0007\u000f",
    "\u0002\u0002\u02f7\u02f9\u0005$\u0013\u0002\u02f8\u02f7\u0003\u0002",
    "\u0002\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9\u02fb\u0003\u0002",
    "\u0002\u0002\u02fa\u02fc\u0007\u000f\u0002\u0002\u02fb\u02fa\u0003\u0002",
    "\u0002\u0002\u02fb\u02fc\u0003\u0002\u0002\u0002\u02fc\u02fd\u0003\u0002",
    "\u0002\u0002\u02fd\u02fe\u0005 \u0011\u0002\u02fe\u02ff\u0007\u000f",
    "\u0002\u0002\u02ff\u0301\u0005\n\u0006\u0002\u0300\u0302\u0007\u0012",
    "\u0002\u0002\u0301\u0300\u0003\u0002\u0002\u0002\u0301\u0302\u0003\u0002",
    "\u0002\u0002\u0302g\u0003\u0002\u0002\u0002\u0303\u0305\u0007\u001f",
    "\u0002\u0002\u0304\u0306\u0005l7\u0002\u0305\u0304\u0003\u0002\u0002",
    "\u0002\u0305\u0306\u0003\u0002\u0002\u0002\u0306\u0308\u0003\u0002\u0002",
    "\u0002\u0307\u0309\u0005j6\u0002\u0308\u0307\u0003\u0002\u0002\u0002",
    "\u0308\u0309\u0003\u0002\u0002\u0002\u0309i\u0003\u0002\u0002\u0002",
    "\u030a\u030b\u0007\u000f\u0002\u0002\u030b\u030c\u0005\u0018\r\u0002",
    "\u030c\u030d\u0007\u000f\u0002\u0002\u030d\u030e\u0005<\u001f\u0002",
    "\u030ek\u0003\u0002\u0002\u0002\u030f\u0310\u0007\u000f\u0002\u0002",
    "\u0310\u0311\u0005\u0016\f\u0002\u0311\u0312\u0007\u000f\u0002\u0002",
    "\u0312\u0314\u0005n8\u0002\u0313\u0315\u0007\u0012\u0002\u0002\u0314",
    "\u0313\u0003\u0002\u0002\u0002\u0314\u0315\u0003\u0002\u0002\u0002\u0315",
    "m\u0003\u0002\u0002\u0002\u0316\u0317\b8\u0001\u0002\u0317\u0318\u0007",
    "\u0013\u0002\u0002\u0318\u0319\u0005n8\u0002\u0319\u031a\u0007\u0014",
    "\u0002\u0002\u031a\u0328\u0003\u0002\u0002\u0002\u031b\u031d\u0007\u000f",
    "\u0002\u0002\u031c\u031b\u0003\u0002\u0002\u0002\u031c\u031d\u0003\u0002",
    "\u0002\u0002\u031d\u031e\u0003\u0002\u0002\u0002\u031e\u031f\u0005\u001e",
    "\u0010\u0002\u031f\u0322\u0007\u000f\u0002\u0002\u0320\u0323\u0005\u0090",
    "I\u0002\u0321\u0323\u0005(\u0015\u0002\u0322\u0320\u0003\u0002\u0002",
    "\u0002\u0322\u0321\u0003\u0002\u0002\u0002\u0323\u0325\u0003\u0002\u0002",
    "\u0002\u0324\u0326\u0007\u000f\u0002\u0002\u0325\u0324\u0003\u0002\u0002",
    "\u0002\u0325\u0326\u0003\u0002\u0002\u0002\u0326\u0328\u0003\u0002\u0002",
    "\u0002\u0327\u0316\u0003\u0002\u0002\u0002\u0327\u031c\u0003\u0002\u0002",
    "\u0002\u0328\u0331\u0003\u0002\u0002\u0002\u0329\u032a\f\u0004\u0002",
    "\u0002\u032a\u032b\u0007\u000f\u0002\u0002\u032b\u032c\u0005&\u0014",
    "\u0002\u032c\u032d\u0007\u000f\u0002\u0002\u032d\u032e\u0005n8\u0005",
    "\u032e\u0330\u0003\u0002\u0002\u0002\u032f\u0329\u0003\u0002\u0002\u0002",
    "\u0330\u0333\u0003\u0002\u0002\u0002\u0331\u032f\u0003\u0002\u0002\u0002",
    "\u0331\u0332\u0003\u0002\u0002\u0002\u0332o\u0003\u0002\u0002\u0002",
    "\u0333\u0331\u0003\u0002\u0002\u0002\u0334\u0336\u0007 \u0002\u0002",
    "\u0335\u0337\u0005t;\u0002\u0336\u0335\u0003\u0002\u0002\u0002\u0336",
    "\u0337\u0003\u0002\u0002\u0002\u0337\u0339\u0003\u0002\u0002\u0002\u0338",
    "\u033a\u0005r:\u0002\u0339\u0338\u0003\u0002\u0002\u0002\u0339\u033a",
    "\u0003\u0002\u0002\u0002\u033aq\u0003\u0002\u0002\u0002\u033b\u033c",
    "\u0007\u000f\u0002\u0002\u033c\u033d\u0005\u0018\r\u0002\u033d\u0341",
    "\u0007\u000f\u0002\u0002\u033e\u0342\u0005\u00a4S\u0002\u033f\u0342",
    "\u0005<\u001f\u0002\u0340\u0342\u0005L\'\u0002\u0341\u033e\u0003\u0002",
    "\u0002\u0002\u0341\u033f\u0003\u0002\u0002\u0002\u0341\u0340\u0003\u0002",
    "\u0002\u0002\u0342s\u0003\u0002\u0002\u0002\u0343\u0344\u0007\u000f",
    "\u0002\u0002\u0344\u0345\u0005\u0016\f\u0002\u0345\u0346\u0007\u000f",
    "\u0002\u0002\u0346\u0348\u0005v<\u0002\u0347\u0349\u0007\u0012\u0002",
    "\u0002\u0348\u0347\u0003\u0002\u0002\u0002\u0348\u0349\u0003\u0002\u0002",
    "\u0002\u0349u\u0003\u0002\u0002\u0002\u034a\u034b\b<\u0001\u0002\u034b",
    "\u034c\u0007\u0013\u0002\u0002\u034c\u034d\u0005v<\u0002\u034d\u034e",
    "\u0007\u0014\u0002\u0002\u034e\u035f\u0003\u0002\u0002\u0002\u034f\u0351",
    "\u0007\u000f\u0002\u0002\u0350\u034f\u0003\u0002\u0002\u0002\u0350\u0351",
    "\u0003\u0002\u0002\u0002\u0351\u0352\u0003\u0002\u0002\u0002\u0352\u0353",
    "\u0005\u001e\u0010\u0002\u0353\u0359\u0007\u000f\u0002\u0002\u0354\u035a",
    "\u0005.\u0018\u0002\u0355\u035a\u0005b2\u0002\u0356\u035a\u0005\\/\u0002",
    "\u0357\u035a\u0005(\u0015\u0002\u0358\u035a\u0005\u0080A\u0002\u0359",
    "\u0354\u0003\u0002\u0002\u0002\u0359\u0355\u0003\u0002\u0002\u0002\u0359",
    "\u0356\u0003\u0002\u0002\u0002\u0359\u0357\u0003\u0002\u0002\u0002\u0359",
    "\u0358\u0003\u0002\u0002\u0002\u035a\u035c\u0003\u0002\u0002\u0002\u035b",
    "\u035d\u0007\u000f\u0002\u0002\u035c\u035b\u0003\u0002\u0002\u0002\u035c",
    "\u035d\u0003\u0002\u0002\u0002\u035d\u035f\u0003\u0002\u0002\u0002\u035e",
    "\u034a\u0003\u0002\u0002\u0002\u035e\u0350\u0003\u0002\u0002\u0002\u035f",
    "\u0368\u0003\u0002\u0002\u0002\u0360\u0361\f\u0004\u0002\u0002\u0361",
    "\u0362\u0007\u000f\u0002\u0002\u0362\u0363\u0005&\u0014\u0002\u0363",
    "\u0364\u0007\u000f\u0002\u0002\u0364\u0365\u0005v<\u0005\u0365\u0367",
    "\u0003\u0002\u0002\u0002\u0366\u0360\u0003\u0002\u0002\u0002\u0367\u036a",
    "\u0003\u0002\u0002\u0002\u0368\u0366\u0003\u0002\u0002\u0002\u0368\u0369",
    "\u0003\u0002\u0002\u0002\u0369w\u0003\u0002\u0002\u0002\u036a\u0368",
    "\u0003\u0002\u0002\u0002\u036b\u036d\u0007!\u0002\u0002\u036c\u036e",
    "\u0005|?\u0002\u036d\u036c\u0003\u0002\u0002\u0002\u036d\u036e\u0003",
    "\u0002\u0002\u0002\u036e\u0370\u0003\u0002\u0002\u0002\u036f\u0371\u0005",
    "z>\u0002\u0370\u036f\u0003\u0002\u0002\u0002\u0370\u0371\u0003\u0002",
    "\u0002\u0002\u0371y\u0003\u0002\u0002\u0002\u0372\u0373\u0007\u000f",
    "\u0002\u0002\u0373\u0374\u0005\u0018\r\u0002\u0374\u0378\u0007\u000f",
    "\u0002\u0002\u0375\u0379\u0005<\u001f\u0002\u0376\u0379\u0005L\'\u0002",
    "\u0377\u0379\u0005L\'\u0002\u0378\u0375\u0003\u0002\u0002\u0002\u0378",
    "\u0376\u0003\u0002\u0002\u0002\u0378\u0377\u0003\u0002\u0002\u0002\u0379",
    "{\u0003\u0002\u0002\u0002\u037a\u037b\u0007\u000f\u0002\u0002\u037b",
    "\u037c\u0005\u0016\f\u0002\u037c\u037d\u0007\u000f\u0002\u0002\u037d",
    "\u037f\u0005~@\u0002\u037e\u0380\u0007\u0012\u0002\u0002\u037f\u037e",
    "\u0003\u0002\u0002\u0002\u037f\u0380\u0003\u0002\u0002\u0002\u0380}",
    "\u0003\u0002\u0002\u0002\u0381\u0382\b@\u0001\u0002\u0382\u0383\u0007",
    "\u0013\u0002\u0002\u0383\u0384\u0005~@\u0002\u0384\u0385\u0007\u0014",
    "\u0002\u0002\u0385\u0393\u0003\u0002\u0002\u0002\u0386\u0388\u0007\u000f",
    "\u0002\u0002\u0387\u0386\u0003\u0002\u0002\u0002\u0387\u0388\u0003\u0002",
    "\u0002\u0002\u0388\u0389\u0003\u0002\u0002\u0002\u0389\u038a\u0005\u001e",
    "\u0010\u0002\u038a\u038d\u0007\u000f\u0002\u0002\u038b\u038e\u0005\u0090",
    "I\u0002\u038c\u038e\u0005(\u0015\u0002\u038d\u038b\u0003\u0002\u0002",
    "\u0002\u038d\u038c\u0003\u0002\u0002\u0002\u038e\u0390\u0003\u0002\u0002",
    "\u0002\u038f\u0391\u0007\u000f\u0002\u0002\u0390\u038f\u0003\u0002\u0002",
    "\u0002\u0390\u0391\u0003\u0002\u0002\u0002\u0391\u0393\u0003\u0002\u0002",
    "\u0002\u0392\u0381\u0003\u0002\u0002\u0002\u0392\u0387\u0003\u0002\u0002",
    "\u0002\u0393\u039c\u0003\u0002\u0002\u0002\u0394\u0395\f\u0004\u0002",
    "\u0002\u0395\u0396\u0007\u000f\u0002\u0002\u0396\u0397\u0005&\u0014",
    "\u0002\u0397\u0398\u0007\u000f\u0002\u0002\u0398\u0399\u0005~@\u0005",
    "\u0399\u039b\u0003\u0002\u0002\u0002\u039a\u0394\u0003\u0002\u0002\u0002",
    "\u039b\u039e\u0003\u0002\u0002\u0002\u039c\u039a\u0003\u0002\u0002\u0002",
    "\u039c\u039d\u0003\u0002\u0002\u0002\u039d\u007f\u0003\u0002\u0002\u0002",
    "\u039e\u039c\u0003\u0002\u0002\u0002\u039f\u03a1\u0007\"\u0002\u0002",
    "\u03a0\u03a2\u0005\u0084C\u0002\u03a1\u03a0\u0003\u0002\u0002\u0002",
    "\u03a1\u03a2\u0003\u0002\u0002\u0002\u03a2\u03a4\u0003\u0002\u0002\u0002",
    "\u03a3\u03a5\u0005\u0082B\u0002\u03a4\u03a3\u0003\u0002\u0002\u0002",
    "\u03a4\u03a5\u0003\u0002\u0002\u0002\u03a5\u0081\u0003\u0002\u0002\u0002",
    "\u03a6\u03a7\u0007\u000f\u0002\u0002\u03a7\u03a8\u0005\u0018\r\u0002",
    "\u03a8\u03a9\u0007\u000f\u0002\u0002\u03a9\u03aa\u0005p9\u0002\u03aa",
    "\u0083\u0003\u0002\u0002\u0002\u03ab\u03ac\u0007\u000f\u0002\u0002\u03ac",
    "\u03ad\u0005\u0016\f\u0002\u03ad\u03ae\u0007\u000f\u0002\u0002\u03ae",
    "\u03b0\u0005\u0086D\u0002\u03af\u03b1\u0007\u0012\u0002\u0002\u03b0",
    "\u03af\u0003\u0002\u0002\u0002\u03b0\u03b1\u0003\u0002\u0002\u0002\u03b1",
    "\u0085\u0003\u0002\u0002\u0002\u03b2\u03b3\bD\u0001\u0002\u03b3\u03b4",
    "\u0007\u0013\u0002\u0002\u03b4\u03b5\u0005\u0086D\u0002\u03b5\u03b6",
    "\u0007\u0014\u0002\u0002\u03b6\u03c4\u0003\u0002\u0002\u0002\u03b7\u03b9",
    "\u0007\u000f\u0002\u0002\u03b8\u03b7\u0003\u0002\u0002\u0002\u03b8\u03b9",
    "\u0003\u0002\u0002\u0002\u03b9\u03ba\u0003\u0002\u0002\u0002\u03ba\u03bb",
    "\u0005\u001e\u0010\u0002\u03bb\u03be\u0007\u000f\u0002\u0002\u03bc\u03bf",
    "\u0005\u0090I\u0002\u03bd\u03bf\u0005(\u0015\u0002\u03be\u03bc\u0003",
    "\u0002\u0002\u0002\u03be\u03bd\u0003\u0002\u0002\u0002\u03bf\u03c1\u0003",
    "\u0002\u0002\u0002\u03c0\u03c2\u0007\u000f\u0002\u0002\u03c1\u03c0\u0003",
    "\u0002\u0002\u0002\u03c1\u03c2\u0003\u0002\u0002\u0002\u03c2\u03c4\u0003",
    "\u0002\u0002\u0002\u03c3\u03b2\u0003\u0002\u0002\u0002\u03c3\u03b8\u0003",
    "\u0002\u0002\u0002\u03c4\u03cd\u0003\u0002\u0002\u0002\u03c5\u03c6\f",
    "\u0004\u0002\u0002\u03c6\u03c7\u0007\u000f\u0002\u0002\u03c7\u03c8\u0005",
    "&\u0014\u0002\u03c8\u03c9\u0007\u000f\u0002\u0002\u03c9\u03ca\u0005",
    "\u0086D\u0005\u03ca\u03cc\u0003\u0002\u0002\u0002\u03cb\u03c5\u0003",
    "\u0002\u0002\u0002\u03cc\u03cf\u0003\u0002\u0002\u0002\u03cd\u03cb\u0003",
    "\u0002\u0002\u0002\u03cd\u03ce\u0003\u0002\u0002\u0002\u03ce\u0087\u0003",
    "\u0002\u0002\u0002\u03cf\u03cd\u0003\u0002\u0002\u0002\u03d0\u03d2\u0007",
    "#\u0002\u0002\u03d1\u03d3\u0005\u008cG\u0002\u03d2\u03d1\u0003\u0002",
    "\u0002\u0002\u03d2\u03d3\u0003\u0002\u0002\u0002\u03d3\u03d5\u0003\u0002",
    "\u0002\u0002\u03d4\u03d6\u0005\u008aF\u0002\u03d5\u03d4\u0003\u0002",
    "\u0002\u0002\u03d5\u03d6\u0003\u0002\u0002\u0002\u03d6\u0089\u0003\u0002",
    "\u0002\u0002\u03d7\u03d8\u0007\u000f\u0002\u0002\u03d8\u03d9\u0005\u0018",
    "\r\u0002\u03d9\u03da\u0007\u000f\u0002\u0002\u03da\u03db\u0005\u0090",
    "I\u0002\u03db\u008b\u0003\u0002\u0002\u0002\u03dc\u03dd\u0007\u000f",
    "\u0002\u0002\u03dd\u03de\u0005\u0016\f\u0002\u03de\u03df\u0007\u000f",
    "\u0002\u0002\u03df\u03e1\u0005\u008eH\u0002\u03e0\u03e2\u0007\u0012",
    "\u0002\u0002\u03e1\u03e0\u0003\u0002\u0002\u0002\u03e1\u03e2\u0003\u0002",
    "\u0002\u0002\u03e2\u008d\u0003\u0002\u0002\u0002\u03e3\u03e4\bH\u0001",
    "\u0002\u03e4\u03e5\u0007\u0013\u0002\u0002\u03e5\u03e6\u0005\u008eH",
    "\u0002\u03e6\u03e7\u0007\u0014\u0002\u0002\u03e7\u03f5\u0003\u0002\u0002",
    "\u0002\u03e8\u03ea\u0007\u000f\u0002\u0002\u03e9\u03e8\u0003\u0002\u0002",
    "\u0002\u03e9\u03ea\u0003\u0002\u0002\u0002\u03ea\u03eb\u0003\u0002\u0002",
    "\u0002\u03eb\u03ec\u0005\u001e\u0010\u0002\u03ec\u03ef\u0007\u000f\u0002",
    "\u0002\u03ed\u03f0\u0005\u0090I\u0002\u03ee\u03f0\u0005(\u0015\u0002",
    "\u03ef\u03ed\u0003\u0002\u0002\u0002\u03ef\u03ee\u0003\u0002\u0002\u0002",
    "\u03f0\u03f2\u0003\u0002\u0002\u0002\u03f1\u03f3\u0007\u000f\u0002\u0002",
    "\u03f2\u03f1\u0003\u0002\u0002\u0002\u03f2\u03f3\u0003\u0002\u0002\u0002",
    "\u03f3\u03f5\u0003\u0002\u0002\u0002\u03f4\u03e3\u0003\u0002\u0002\u0002",
    "\u03f4\u03e9\u0003\u0002\u0002\u0002\u03f5\u03fe\u0003\u0002\u0002\u0002",
    "\u03f6\u03f7\f\u0004\u0002\u0002\u03f7\u03f8\u0007\u000f\u0002\u0002",
    "\u03f8\u03f9\u0005&\u0014\u0002\u03f9\u03fa\u0007\u000f\u0002\u0002",
    "\u03fa\u03fb\u0005\u008eH\u0005\u03fb\u03fd\u0003\u0002\u0002\u0002",
    "\u03fc\u03f6\u0003\u0002\u0002\u0002\u03fd\u0400\u0003\u0002\u0002\u0002",
    "\u03fe\u03fc\u0003\u0002\u0002\u0002\u03fe\u03ff\u0003\u0002\u0002\u0002",
    "\u03ff\u008f\u0003\u0002\u0002\u0002\u0400\u03fe\u0003\u0002\u0002\u0002",
    "\u0401\u0403\u0007$\u0002\u0002\u0402\u0404\u0005\u0094K\u0002\u0403",
    "\u0402\u0003\u0002\u0002\u0002\u0403\u0404\u0003\u0002\u0002\u0002\u0404",
    "\u0406\u0003\u0002\u0002\u0002\u0405\u0407\u0005\u0092J\u0002\u0406",
    "\u0405\u0003\u0002\u0002\u0002\u0406\u0407\u0003\u0002\u0002\u0002\u0407",
    "\u0091\u0003\u0002\u0002\u0002\u0408\u0409\u0007\u000f\u0002\u0002\u0409",
    "\u040a\u0005\u0018\r\u0002\u040a\u040f\u0007\u000f\u0002\u0002\u040b",
    "\u0410\u0005\u0088E\u0002\u040c\u0410\u0005h5\u0002\u040d\u0410\u0005",
    "x=\u0002\u040e\u0410\u0005\u0080A\u0002\u040f\u040b\u0003\u0002\u0002",
    "\u0002\u040f\u040c\u0003\u0002\u0002\u0002\u040f\u040d\u0003\u0002\u0002",
    "\u0002\u040f\u040e\u0003\u0002\u0002\u0002\u0410\u0093\u0003\u0002\u0002",
    "\u0002\u0411\u0412\u0007\u000f\u0002\u0002\u0412\u0413\u0005\u0016\f",
    "\u0002\u0413\u0414\u0007\u000f\u0002\u0002\u0414\u0416\u0005\u0096L",
    "\u0002\u0415\u0417\u0007\u0012\u0002\u0002\u0416\u0415\u0003\u0002\u0002",
    "\u0002\u0416\u0417\u0003\u0002\u0002\u0002\u0417\u0095\u0003\u0002\u0002",
    "\u0002\u0418\u0419\bL\u0001\u0002\u0419\u041a\u0007\u0013\u0002\u0002",
    "\u041a\u041b\u0005\u0096L\u0002\u041b\u041c\u0007\u0014\u0002\u0002",
    "\u041c\u042a\u0003\u0002\u0002\u0002\u041d\u041f\u0007\u000f\u0002\u0002",
    "\u041e\u041d\u0003\u0002\u0002\u0002\u041e\u041f\u0003\u0002\u0002\u0002",
    "\u041f\u0420\u0003\u0002\u0002\u0002\u0420\u0421\u0005\u001e\u0010\u0002",
    "\u0421\u0424\u0007\u000f\u0002\u0002\u0422\u0425\u0005\u0098M\u0002",
    "\u0423\u0425\u0005(\u0015\u0002\u0424\u0422\u0003\u0002\u0002\u0002",
    "\u0424\u0423\u0003\u0002\u0002\u0002\u0425\u0427\u0003\u0002\u0002\u0002",
    "\u0426\u0428\u0007\u000f\u0002\u0002\u0427\u0426\u0003\u0002\u0002\u0002",
    "\u0427\u0428\u0003\u0002\u0002\u0002\u0428\u042a\u0003\u0002\u0002\u0002",
    "\u0429\u0418\u0003\u0002\u0002\u0002\u0429\u041e\u0003\u0002\u0002\u0002",
    "\u042a\u0433\u0003\u0002\u0002\u0002\u042b\u042c\f\u0004\u0002\u0002",
    "\u042c\u042d\u0007\u000f\u0002\u0002\u042d\u042e\u0005&\u0014\u0002",
    "\u042e\u042f\u0007\u000f\u0002\u0002\u042f\u0430\u0005\u0096L\u0005",
    "\u0430\u0432\u0003\u0002\u0002\u0002\u0431\u042b\u0003\u0002\u0002\u0002",
    "\u0432\u0435\u0003\u0002\u0002\u0002\u0433\u0431\u0003\u0002\u0002\u0002",
    "\u0433\u0434\u0003\u0002\u0002\u0002\u0434\u0097\u0003\u0002\u0002\u0002",
    "\u0435\u0433\u0003\u0002\u0002\u0002\u0436\u0438\u0007%\u0002\u0002",
    "\u0437\u0439\u0005\u009cO\u0002\u0438\u0437\u0003\u0002\u0002\u0002",
    "\u0438\u0439\u0003\u0002\u0002\u0002\u0439\u043b\u0003\u0002\u0002\u0002",
    "\u043a\u043c\u0005\u009aN\u0002\u043b\u043a\u0003\u0002\u0002\u0002",
    "\u043b\u043c\u0003\u0002\u0002\u0002\u043c\u0099\u0003\u0002\u0002\u0002",
    "\u043d\u043e\u0007\u000f\u0002\u0002\u043e\u043f\u0005\u0018\r\u0002",
    "\u043f\u0440\u0007\u000f\u0002\u0002\u0440\u0441\u0005\u0090I\u0002",
    "\u0441\u009b\u0003\u0002\u0002\u0002\u0442\u0443\u0007\u000f\u0002\u0002",
    "\u0443\u0444\u0005\u0016\f\u0002\u0444\u0445\u0007\u000f\u0002\u0002",
    "\u0445\u0446\u0005\u001e\u0010\u0002\u0446\u0447\u0007\u000f\u0002\u0002",
    "\u0447\u0448\u0007\u0015\u0002\u0002\u0448\u044a\u0007\u000f\u0002\u0002",
    "\u0449\u044b\u0005$\u0013\u0002\u044a\u0449\u0003\u0002\u0002\u0002",
    "\u044a\u044b\u0003\u0002\u0002\u0002\u044b\u044d\u0003\u0002\u0002\u0002",
    "\u044c\u044e\u0007\u000f\u0002\u0002\u044d\u044c\u0003\u0002\u0002\u0002",
    "\u044d\u044e\u0003\u0002\u0002\u0002\u044e\u044f\u0003\u0002\u0002\u0002",
    "\u044f\u0450\u0005 \u0011\u0002\u0450\u0451\u0007\u000f\u0002\u0002",
    "\u0451\u0453\u0005\n\u0006\u0002\u0452\u0454\u0007\u0012\u0002\u0002",
    "\u0453\u0452\u0003\u0002\u0002\u0002\u0453\u0454\u0003\u0002\u0002\u0002",
    "\u0454\u009d\u0003\u0002\u0002\u0002\u0455\u0457\u0007&\u0002\u0002",
    "\u0456\u0458\u0005\u00a2R\u0002\u0457\u0456\u0003\u0002\u0002\u0002",
    "\u0457\u0458\u0003\u0002\u0002\u0002\u0458\u045a\u0003\u0002\u0002\u0002",
    "\u0459\u045b\u0005\u00a0Q\u0002\u045a\u0459\u0003\u0002\u0002\u0002",
    "\u045a\u045b\u0003\u0002\u0002\u0002\u045b\u009f\u0003\u0002\u0002\u0002",
    "\u045c\u045d\u0007\u000f\u0002\u0002\u045d\u045e\u0005\u0018\r\u0002",
    "\u045e\u0463\u0007\u000f\u0002\u0002\u045f\u0464\u0005\u0088E\u0002",
    "\u0460\u0464\u0005h5\u0002\u0461\u0464\u0005x=\u0002\u0462\u0464\u0005",
    "\u0080A\u0002\u0463\u045f\u0003\u0002\u0002\u0002\u0463\u0460\u0003",
    "\u0002\u0002\u0002\u0463\u0461\u0003\u0002\u0002\u0002\u0463\u0462\u0003",
    "\u0002\u0002\u0002\u0464\u00a1\u0003\u0002\u0002\u0002\u0465\u0466\u0007",
    "\u000f\u0002\u0002\u0466\u0467\u0005\u0016\f\u0002\u0467\u0469\u0007",
    "\u000f\u0002\u0002\u0468\u046a\u0005$\u0013\u0002\u0469\u0468\u0003",
    "\u0002\u0002\u0002\u0469\u046a\u0003\u0002\u0002\u0002\u046a\u046c\u0003",
    "\u0002\u0002\u0002\u046b\u046d\u0007\u000f\u0002\u0002\u046c\u046b\u0003",
    "\u0002\u0002\u0002\u046c\u046d\u0003\u0002\u0002\u0002\u046d\u046e\u0003",
    "\u0002\u0002\u0002\u046e\u046f\u0005 \u0011\u0002\u046f\u0471\u0005",
    "\n\u0006\u0002\u0470\u0472\u0007\u0012\u0002\u0002\u0471\u0470\u0003",
    "\u0002\u0002\u0002\u0471\u0472\u0003\u0002\u0002\u0002\u0472\u00a3\u0003",
    "\u0002\u0002\u0002\u0473\u0475\u0007\'\u0002\u0002\u0474\u0476\u0005",
    "\u00a8U\u0002\u0475\u0474\u0003\u0002\u0002\u0002\u0475\u0476\u0003",
    "\u0002\u0002\u0002\u0476\u0478\u0003\u0002\u0002\u0002\u0477\u0479\u0005",
    "\u00a6T\u0002\u0478\u0477\u0003\u0002\u0002\u0002\u0478\u0479\u0003",
    "\u0002\u0002\u0002\u0479\u00a5\u0003\u0002\u0002\u0002\u047a\u047b\u0007",
    "\u000f\u0002\u0002\u047b\u047c\u0005\u0018\r\u0002\u047c\u047d\u0007",
    "\u000f\u0002\u0002\u047d\u047e\u0005\u00a4S\u0002\u047e\u00a7\u0003",
    "\u0002\u0002\u0002\u047f\u0480\u0007\u000f\u0002\u0002\u0480\u0481\u0005",
    "\u0016\f\u0002\u0481\u0482\u0007\u000f\u0002\u0002\u0482\u0484\u0005",
    "\u00aaV\u0002\u0483\u0485\u0007\u0012\u0002\u0002\u0484\u0483\u0003",
    "\u0002\u0002\u0002\u0484\u0485\u0003\u0002\u0002\u0002\u0485\u00a9\u0003",
    "\u0002\u0002\u0002\u0486\u0487\bV\u0001\u0002\u0487\u0488\u0007\u0013",
    "\u0002\u0002\u0488\u0489\u0005\u00aaV\u0002\u0489\u048a\u0007\u0014",
    "\u0002\u0002\u048a\u04a0\u0003\u0002\u0002\u0002\u048b\u048d\u0007\u000f",
    "\u0002\u0002\u048c\u048b\u0003\u0002\u0002\u0002\u048c\u048d\u0003\u0002",
    "\u0002\u0002\u048d\u048e\u0003\u0002\u0002\u0002\u048e\u048f\u0005\u001e",
    "\u0010\u0002\u048f\u049a\u0007\u000f\u0002\u0002\u0490\u049b\u0005.",
    "\u0018\u0002\u0491\u049b\u0005b2\u0002\u0492\u049b\u0005(\u0015\u0002",
    "\u0493\u049b\u00056\u001c\u0002\u0494\u049b\u0005<\u001f\u0002\u0495",
    "\u049b\u0005D#\u0002\u0496\u049b\u0005L\'\u0002\u0497\u049b\u0005p9",
    "\u0002\u0498\u049b\u0005\u00a4S\u0002\u0499\u049b\u0005h5\u0002\u049a",
    "\u0490\u0003\u0002\u0002\u0002\u049a\u0491\u0003\u0002\u0002\u0002\u049a",
    "\u0492\u0003\u0002\u0002\u0002\u049a\u0493\u0003\u0002\u0002\u0002\u049a",
    "\u0494\u0003\u0002\u0002\u0002\u049a\u0495\u0003\u0002\u0002\u0002\u049a",
    "\u0496\u0003\u0002\u0002\u0002\u049a\u0497\u0003\u0002\u0002\u0002\u049a",
    "\u0498\u0003\u0002\u0002\u0002\u049a\u0499\u0003\u0002\u0002\u0002\u049b",
    "\u049d\u0003\u0002\u0002\u0002\u049c\u049e\u0007\u000f\u0002\u0002\u049d",
    "\u049c\u0003\u0002\u0002\u0002\u049d\u049e\u0003\u0002\u0002\u0002\u049e",
    "\u04a0\u0003\u0002\u0002\u0002\u049f\u0486\u0003\u0002\u0002\u0002\u049f",
    "\u048c\u0003\u0002\u0002\u0002\u04a0\u04a9\u0003\u0002\u0002\u0002\u04a1",
    "\u04a2\f\u0004\u0002\u0002\u04a2\u04a3\u0007\u000f\u0002\u0002\u04a3",
    "\u04a4\u0005&\u0014\u0002\u04a4\u04a5\u0007\u000f\u0002\u0002\u04a5",
    "\u04a6\u0005\u00aaV\u0005\u04a6\u04a8\u0003\u0002\u0002\u0002\u04a7",
    "\u04a1\u0003\u0002\u0002\u0002\u04a8\u04ab\u0003\u0002\u0002\u0002\u04a9",
    "\u04a7\u0003\u0002\u0002\u0002\u04a9\u04aa\u0003\u0002\u0002\u0002\u04aa",
    "\u00ab\u0003\u0002\u0002\u0002\u04ab\u04a9\u0003\u0002\u0002\u0002\u0093",
    "\u00af\u00b3\u00b6\u00bb\u00c2\u010c\u0156\u015b\u0179\u017d\u0180\u018f",
    "\u0195\u0198\u019c\u01a1\u01a5\u01a8\u01b2\u01b9\u01c1\u01c7\u01ca\u01cc",
    "\u01d6\u01db\u01de\u01e9\u01ec\u01f2\u01f6\u01f9\u0205\u020d\u0218\u021b",
    "\u021d\u0227\u022c\u022f\u023b\u0243\u024b\u024e\u0250\u025a\u025f\u0262",
    "\u026e\u0276\u0280\u0283\u0285\u028f\u0294\u0297\u029f\u02a6\u02ae\u02b4",
    "\u02b7\u02b9\u02c3\u02c8\u02cb\u02d2\u02d8\u02db\u02e1\u02e5\u02e8\u02f2",
    "\u02f8\u02fb\u0301\u0305\u0308\u0314\u031c\u0322\u0325\u0327\u0331\u0336",
    "\u0339\u0341\u0348\u0350\u0359\u035c\u035e\u0368\u036d\u0370\u0378\u037f",
    "\u0387\u038d\u0390\u0392\u039c\u03a1\u03a4\u03b0\u03b8\u03be\u03c1\u03c3",
    "\u03cd\u03d2\u03d5\u03e1\u03e9\u03ef\u03f2\u03f4\u03fe\u0403\u0406\u040f",
    "\u0416\u041e\u0424\u0427\u0429\u0433\u0438\u043b\u044a\u044d\u0453\u0457",
    "\u045a\u0463\u0469\u046c\u0471\u0475\u0478\u0484\u048c\u049a\u049d\u049f",
    "\u04a9"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'.'", "'be'", "'must'", "'must be equal to'", 
                     "'where'", "'of'", "'and'", "'or'", "'have'", "'equal to'", 
                     "'include'", "'not'", null, null, null, "','", "'('", 
                     "')'", "'name'", "'annotation'", "'extend'", "'extension'", 
                     "'function'", "'abstract function'", "'constructor'", 
                     "'parameter'", "'type'", "'specifier'", "'return value'", 
                     "'declaration statement'", "'expression statement'", 
                     "'initial value'", "'argument'", "'call'", "'caller'", 
                     "'value'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, "SPACE", "Alphabet", "NL", 
                      "Comma", "LPAREN", "RPAREN", "NAME", "ANNOTATION", 
                      "EXTEND", "EXTENSION", "FUNCTION", "AbstractFunctions", 
                      "CONSTRUCTOR", "PARAMETER", "TYPES", "SPECIFIER", 
                      "ReturnValue", "DeclarationStatement", "ExpressionStatement", 
                      "InitValue", "ARGUMENT", "CALL", "CALLER", "VALUE", 
                      "CLASSES" ];

var ruleNames =  [ "inputSentence", "designRule", "mustClause", "mustBeEqualToClause", 
                   "words", "end", "emptyLine", "be", "must", "mustBeEqualTo", 
                   "where", "of", "and", "or", "have", "equalsTo", "includes", 
                   "not", "binary", "names", "nameOf", "nameCondition", 
                   "annotations", "annotationOf", "annotationCondition", 
                   "annotationExpression", "extensions", "extensionOf", 
                   "extensionCondition", "functions", "functionOf", "functionCondition", 
                   "functionExpression", "abstractFunctions", "abstractFunctionOf", 
                   "abstractFunctionCondition", "abstractFunctionExpression", 
                   "constructors", "constructorOf", "constructorCondition", 
                   "constructorExpression", "parameters", "parameterOf", 
                   "parameterCondition", "parameterExpression", "types", 
                   "typeOf", "typeCondition", "specifiers", "specifierOf", 
                   "specifierCondition", "returnValues", "returnValueOf", 
                   "returnValueCondition", "returnValueExpression", "declarationStatements", 
                   "declarationStatementOf", "declarationStatementCondition", 
                   "declarationStatementExpression", "expressionStatements", 
                   "expressionStatementOf", "expressionStatementCondition", 
                   "expressionStatementExpression", "initValues", "initValueOf", 
                   "initValueCondition", "initValueExpression", "arguments", 
                   "argumentOf", "argumentCondition", "argumentExpression", 
                   "calls", "callOf", "callCondition", "callerExpression", 
                   "callers", "callerOf", "callerCondition", "values", "valueOf", 
                   "valueCondition", "classes", "classOf", "classCondition", 
                   "classExpression" ];

function myGrammarParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

myGrammarParser.prototype = Object.create(antlr4.Parser.prototype);
myGrammarParser.prototype.constructor = myGrammarParser;

Object.defineProperty(myGrammarParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

myGrammarParser.EOF = antlr4.Token.EOF;
myGrammarParser.T__0 = 1;
myGrammarParser.T__1 = 2;
myGrammarParser.T__2 = 3;
myGrammarParser.T__3 = 4;
myGrammarParser.T__4 = 5;
myGrammarParser.T__5 = 6;
myGrammarParser.T__6 = 7;
myGrammarParser.T__7 = 8;
myGrammarParser.T__8 = 9;
myGrammarParser.T__9 = 10;
myGrammarParser.T__10 = 11;
myGrammarParser.T__11 = 12;
myGrammarParser.SPACE = 13;
myGrammarParser.Alphabet = 14;
myGrammarParser.NL = 15;
myGrammarParser.Comma = 16;
myGrammarParser.LPAREN = 17;
myGrammarParser.RPAREN = 18;
myGrammarParser.NAME = 19;
myGrammarParser.ANNOTATION = 20;
myGrammarParser.EXTEND = 21;
myGrammarParser.EXTENSION = 22;
myGrammarParser.FUNCTION = 23;
myGrammarParser.AbstractFunctions = 24;
myGrammarParser.CONSTRUCTOR = 25;
myGrammarParser.PARAMETER = 26;
myGrammarParser.TYPES = 27;
myGrammarParser.SPECIFIER = 28;
myGrammarParser.ReturnValue = 29;
myGrammarParser.DeclarationStatement = 30;
myGrammarParser.ExpressionStatement = 31;
myGrammarParser.InitValue = 32;
myGrammarParser.ARGUMENT = 33;
myGrammarParser.CALL = 34;
myGrammarParser.CALLER = 35;
myGrammarParser.VALUE = 36;
myGrammarParser.CLASSES = 37;

myGrammarParser.RULE_inputSentence = 0;
myGrammarParser.RULE_designRule = 1;
myGrammarParser.RULE_mustClause = 2;
myGrammarParser.RULE_mustBeEqualToClause = 3;
myGrammarParser.RULE_words = 4;
myGrammarParser.RULE_end = 5;
myGrammarParser.RULE_emptyLine = 6;
myGrammarParser.RULE_be = 7;
myGrammarParser.RULE_must = 8;
myGrammarParser.RULE_mustBeEqualTo = 9;
myGrammarParser.RULE_where = 10;
myGrammarParser.RULE_of = 11;
myGrammarParser.RULE_and = 12;
myGrammarParser.RULE_or = 13;
myGrammarParser.RULE_have = 14;
myGrammarParser.RULE_equalsTo = 15;
myGrammarParser.RULE_includes = 16;
myGrammarParser.RULE_not = 17;
myGrammarParser.RULE_binary = 18;
myGrammarParser.RULE_names = 19;
myGrammarParser.RULE_nameOf = 20;
myGrammarParser.RULE_nameCondition = 21;
myGrammarParser.RULE_annotations = 22;
myGrammarParser.RULE_annotationOf = 23;
myGrammarParser.RULE_annotationCondition = 24;
myGrammarParser.RULE_annotationExpression = 25;
myGrammarParser.RULE_extensions = 26;
myGrammarParser.RULE_extensionOf = 27;
myGrammarParser.RULE_extensionCondition = 28;
myGrammarParser.RULE_functions = 29;
myGrammarParser.RULE_functionOf = 30;
myGrammarParser.RULE_functionCondition = 31;
myGrammarParser.RULE_functionExpression = 32;
myGrammarParser.RULE_abstractFunctions = 33;
myGrammarParser.RULE_abstractFunctionOf = 34;
myGrammarParser.RULE_abstractFunctionCondition = 35;
myGrammarParser.RULE_abstractFunctionExpression = 36;
myGrammarParser.RULE_constructors = 37;
myGrammarParser.RULE_constructorOf = 38;
myGrammarParser.RULE_constructorCondition = 39;
myGrammarParser.RULE_constructorExpression = 40;
myGrammarParser.RULE_parameters = 41;
myGrammarParser.RULE_parameterOf = 42;
myGrammarParser.RULE_parameterCondition = 43;
myGrammarParser.RULE_parameterExpression = 44;
myGrammarParser.RULE_types = 45;
myGrammarParser.RULE_typeOf = 46;
myGrammarParser.RULE_typeCondition = 47;
myGrammarParser.RULE_specifiers = 48;
myGrammarParser.RULE_specifierOf = 49;
myGrammarParser.RULE_specifierCondition = 50;
myGrammarParser.RULE_returnValues = 51;
myGrammarParser.RULE_returnValueOf = 52;
myGrammarParser.RULE_returnValueCondition = 53;
myGrammarParser.RULE_returnValueExpression = 54;
myGrammarParser.RULE_declarationStatements = 55;
myGrammarParser.RULE_declarationStatementOf = 56;
myGrammarParser.RULE_declarationStatementCondition = 57;
myGrammarParser.RULE_declarationStatementExpression = 58;
myGrammarParser.RULE_expressionStatements = 59;
myGrammarParser.RULE_expressionStatementOf = 60;
myGrammarParser.RULE_expressionStatementCondition = 61;
myGrammarParser.RULE_expressionStatementExpression = 62;
myGrammarParser.RULE_initValues = 63;
myGrammarParser.RULE_initValueOf = 64;
myGrammarParser.RULE_initValueCondition = 65;
myGrammarParser.RULE_initValueExpression = 66;
myGrammarParser.RULE_arguments = 67;
myGrammarParser.RULE_argumentOf = 68;
myGrammarParser.RULE_argumentCondition = 69;
myGrammarParser.RULE_argumentExpression = 70;
myGrammarParser.RULE_calls = 71;
myGrammarParser.RULE_callOf = 72;
myGrammarParser.RULE_callCondition = 73;
myGrammarParser.RULE_callerExpression = 74;
myGrammarParser.RULE_callers = 75;
myGrammarParser.RULE_callerOf = 76;
myGrammarParser.RULE_callerCondition = 77;
myGrammarParser.RULE_values = 78;
myGrammarParser.RULE_valueOf = 79;
myGrammarParser.RULE_valueCondition = 80;
myGrammarParser.RULE_classes = 81;
myGrammarParser.RULE_classOf = 82;
myGrammarParser.RULE_classCondition = 83;
myGrammarParser.RULE_classExpression = 84;

function InputSentenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_inputSentence;
    return this;
}

InputSentenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InputSentenceContext.prototype.constructor = InputSentenceContext;

InputSentenceContext.prototype.EOF = function() {
    return this.getToken(myGrammarParser.EOF, 0);
};

InputSentenceContext.prototype.designRule = function() {
    return this.getTypedRuleContext(DesignRuleContext,0);
};

InputSentenceContext.prototype.end = function() {
    return this.getTypedRuleContext(EndContext,0);
};

InputSentenceContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.NL);
    } else {
        return this.getToken(myGrammarParser.NL, i);
    }
};


InputSentenceContext.prototype.emptyLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EmptyLineContext);
    } else {
        return this.getTypedRuleContext(EmptyLineContext,i);
    }
};

InputSentenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterInputSentence(this);
	}
};

InputSentenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitInputSentence(this);
	}
};




myGrammarParser.InputSentenceContext = InputSentenceContext;

myGrammarParser.prototype.inputSentence = function() {

    var localctx = new InputSentenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, myGrammarParser.RULE_inputSentence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 177;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.EOF:
        case myGrammarParser.T__0:
        case myGrammarParser.NL:
            this.state = 173;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 170;
                    this.emptyLine(); 
                }
                this.state = 175;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
            }

            break;
        case myGrammarParser.ANNOTATION:
        case myGrammarParser.FUNCTION:
        case myGrammarParser.AbstractFunctions:
        case myGrammarParser.CONSTRUCTOR:
        case myGrammarParser.PARAMETER:
        case myGrammarParser.ReturnValue:
        case myGrammarParser.DeclarationStatement:
        case myGrammarParser.ExpressionStatement:
        case myGrammarParser.InitValue:
        case myGrammarParser.ARGUMENT:
        case myGrammarParser.CALLER:
        case myGrammarParser.CLASSES:
            this.state = 176;
            this.designRule();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 180;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.T__0) {
            this.state = 179;
            this.end();
        }

        this.state = 185;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===myGrammarParser.NL) {
            this.state = 182;
            this.match(myGrammarParser.NL);
            this.state = 187;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 188;
        this.match(myGrammarParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DesignRuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_designRule;
    return this;
}

DesignRuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DesignRuleContext.prototype.constructor = DesignRuleContext;

DesignRuleContext.prototype.mustClause = function() {
    return this.getTypedRuleContext(MustClauseContext,0);
};

DesignRuleContext.prototype.mustBeEqualToClause = function() {
    return this.getTypedRuleContext(MustBeEqualToClauseContext,0);
};

DesignRuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterDesignRule(this);
	}
};

DesignRuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitDesignRule(this);
	}
};




myGrammarParser.DesignRuleContext = DesignRuleContext;

myGrammarParser.prototype.designRule = function() {

    var localctx = new DesignRuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, myGrammarParser.RULE_designRule);
    try {
        this.state = 192;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 190;
            this.mustClause();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 191;
            this.mustBeEqualToClause();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MustClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_mustClause;
    return this;
}

MustClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MustClauseContext.prototype.constructor = MustClauseContext;

MustClauseContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

MustClauseContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


MustClauseContext.prototype.must = function() {
    return this.getTypedRuleContext(MustContext,0);
};

MustClauseContext.prototype.functionExpression = function() {
    return this.getTypedRuleContext(FunctionExpressionContext,0);
};

MustClauseContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

MustClauseContext.prototype.abstractFunctionExpression = function() {
    return this.getTypedRuleContext(AbstractFunctionExpressionContext,0);
};

MustClauseContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

MustClauseContext.prototype.constructorExpression = function() {
    return this.getTypedRuleContext(ConstructorExpressionContext,0);
};

MustClauseContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

MustClauseContext.prototype.annotationExpression = function() {
    return this.getTypedRuleContext(AnnotationExpressionContext,0);
};

MustClauseContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

MustClauseContext.prototype.parameterExpression = function() {
    return this.getTypedRuleContext(ParameterExpressionContext,0);
};

MustClauseContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

MustClauseContext.prototype.returnValueExpression = function() {
    return this.getTypedRuleContext(ReturnValueExpressionContext,0);
};

MustClauseContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

MustClauseContext.prototype.declarationStatementExpression = function() {
    return this.getTypedRuleContext(DeclarationStatementExpressionContext,0);
};

MustClauseContext.prototype.expressionStatements = function() {
    return this.getTypedRuleContext(ExpressionStatementsContext,0);
};

MustClauseContext.prototype.expressionStatementExpression = function() {
    return this.getTypedRuleContext(ExpressionStatementExpressionContext,0);
};

MustClauseContext.prototype.initValues = function() {
    return this.getTypedRuleContext(InitValuesContext,0);
};

MustClauseContext.prototype.initValueExpression = function() {
    return this.getTypedRuleContext(InitValueExpressionContext,0);
};

MustClauseContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

MustClauseContext.prototype.argumentExpression = function() {
    return this.getTypedRuleContext(ArgumentExpressionContext,0);
};

MustClauseContext.prototype.callers = function() {
    return this.getTypedRuleContext(CallersContext,0);
};

MustClauseContext.prototype.callerExpression = function() {
    return this.getTypedRuleContext(CallerExpressionContext,0);
};

MustClauseContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

MustClauseContext.prototype.classExpression = function() {
    return this.getTypedRuleContext(ClassExpressionContext,0);
};

MustClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterMustClause(this);
	}
};

MustClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitMustClause(this);
	}
};




myGrammarParser.MustClauseContext = MustClauseContext;

myGrammarParser.prototype.mustClause = function() {

    var localctx = new MustClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, myGrammarParser.RULE_mustClause);
    try {
        this.state = 266;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.FUNCTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 194;
            this.functions();
            this.state = 195;
            this.match(myGrammarParser.SPACE);
            this.state = 196;
            this.must();
            this.state = 197;
            this.match(myGrammarParser.SPACE);
            this.state = 198;
            this.functionExpression(0);
            break;
        case myGrammarParser.AbstractFunctions:
            this.enterOuterAlt(localctx, 2);
            this.state = 200;
            this.abstractFunctions();
            this.state = 201;
            this.match(myGrammarParser.SPACE);
            this.state = 202;
            this.must();
            this.state = 203;
            this.match(myGrammarParser.SPACE);
            this.state = 204;
            this.abstractFunctionExpression(0);
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.enterOuterAlt(localctx, 3);
            this.state = 206;
            this.constructors();
            this.state = 207;
            this.match(myGrammarParser.SPACE);
            this.state = 208;
            this.must();
            this.state = 209;
            this.match(myGrammarParser.SPACE);
            this.state = 210;
            this.constructorExpression(0);
            break;
        case myGrammarParser.ANNOTATION:
            this.enterOuterAlt(localctx, 4);
            this.state = 212;
            this.annotations();
            this.state = 213;
            this.match(myGrammarParser.SPACE);
            this.state = 214;
            this.must();
            this.state = 215;
            this.match(myGrammarParser.SPACE);
            this.state = 216;
            this.annotationExpression(0);
            break;
        case myGrammarParser.PARAMETER:
            this.enterOuterAlt(localctx, 5);
            this.state = 218;
            this.parameters();
            this.state = 219;
            this.match(myGrammarParser.SPACE);
            this.state = 220;
            this.must();
            this.state = 221;
            this.match(myGrammarParser.SPACE);
            this.state = 222;
            this.parameterExpression(0);
            break;
        case myGrammarParser.ReturnValue:
            this.enterOuterAlt(localctx, 6);
            this.state = 224;
            this.returnValues();
            this.state = 225;
            this.match(myGrammarParser.SPACE);
            this.state = 226;
            this.must();
            this.state = 227;
            this.match(myGrammarParser.SPACE);
            this.state = 228;
            this.returnValueExpression(0);
            break;
        case myGrammarParser.DeclarationStatement:
            this.enterOuterAlt(localctx, 7);
            this.state = 230;
            this.declarationStatements();
            this.state = 231;
            this.match(myGrammarParser.SPACE);
            this.state = 232;
            this.must();
            this.state = 233;
            this.match(myGrammarParser.SPACE);
            this.state = 234;
            this.declarationStatementExpression(0);
            break;
        case myGrammarParser.ExpressionStatement:
            this.enterOuterAlt(localctx, 8);
            this.state = 236;
            this.expressionStatements();
            this.state = 237;
            this.match(myGrammarParser.SPACE);
            this.state = 238;
            this.must();
            this.state = 239;
            this.match(myGrammarParser.SPACE);
            this.state = 240;
            this.expressionStatementExpression(0);
            break;
        case myGrammarParser.InitValue:
            this.enterOuterAlt(localctx, 9);
            this.state = 242;
            this.initValues();
            this.state = 243;
            this.match(myGrammarParser.SPACE);
            this.state = 244;
            this.must();
            this.state = 245;
            this.match(myGrammarParser.SPACE);
            this.state = 246;
            this.initValueExpression(0);
            break;
        case myGrammarParser.ARGUMENT:
            this.enterOuterAlt(localctx, 10);
            this.state = 248;
            this.arguments();
            this.state = 249;
            this.match(myGrammarParser.SPACE);
            this.state = 250;
            this.must();
            this.state = 251;
            this.match(myGrammarParser.SPACE);
            this.state = 252;
            this.argumentExpression(0);
            break;
        case myGrammarParser.CALLER:
            this.enterOuterAlt(localctx, 11);
            this.state = 254;
            this.callers();
            this.state = 255;
            this.match(myGrammarParser.SPACE);
            this.state = 256;
            this.must();
            this.state = 257;
            this.match(myGrammarParser.SPACE);
            this.state = 258;
            this.callerExpression(0);
            break;
        case myGrammarParser.CLASSES:
            this.enterOuterAlt(localctx, 12);
            this.state = 260;
            this.classes();
            this.state = 261;
            this.match(myGrammarParser.SPACE);
            this.state = 262;
            this.must();
            this.state = 263;
            this.match(myGrammarParser.SPACE);
            this.state = 264;
            this.classExpression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MustBeEqualToClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_mustBeEqualToClause;
    return this;
}

MustBeEqualToClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MustBeEqualToClauseContext.prototype.constructor = MustBeEqualToClauseContext;

MustBeEqualToClauseContext.prototype.functions = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionsContext);
    } else {
        return this.getTypedRuleContext(FunctionsContext,i);
    }
};

MustBeEqualToClauseContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


MustBeEqualToClauseContext.prototype.mustBeEqualTo = function() {
    return this.getTypedRuleContext(MustBeEqualToContext,0);
};

MustBeEqualToClauseContext.prototype.abstractFunctions = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AbstractFunctionsContext);
    } else {
        return this.getTypedRuleContext(AbstractFunctionsContext,i);
    }
};

MustBeEqualToClauseContext.prototype.constructors = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstructorsContext);
    } else {
        return this.getTypedRuleContext(ConstructorsContext,i);
    }
};

MustBeEqualToClauseContext.prototype.annotations = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationsContext);
    } else {
        return this.getTypedRuleContext(AnnotationsContext,i);
    }
};

MustBeEqualToClauseContext.prototype.parameters = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParametersContext);
    } else {
        return this.getTypedRuleContext(ParametersContext,i);
    }
};

MustBeEqualToClauseContext.prototype.returnValues = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ReturnValuesContext);
    } else {
        return this.getTypedRuleContext(ReturnValuesContext,i);
    }
};

MustBeEqualToClauseContext.prototype.declarationStatements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationStatementsContext);
    } else {
        return this.getTypedRuleContext(DeclarationStatementsContext,i);
    }
};

MustBeEqualToClauseContext.prototype.expressionStatements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionStatementsContext);
    } else {
        return this.getTypedRuleContext(ExpressionStatementsContext,i);
    }
};

MustBeEqualToClauseContext.prototype.initValues = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitValuesContext);
    } else {
        return this.getTypedRuleContext(InitValuesContext,i);
    }
};

MustBeEqualToClauseContext.prototype.arguments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentsContext);
    } else {
        return this.getTypedRuleContext(ArgumentsContext,i);
    }
};

MustBeEqualToClauseContext.prototype.callers = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CallersContext);
    } else {
        return this.getTypedRuleContext(CallersContext,i);
    }
};

MustBeEqualToClauseContext.prototype.classes = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassesContext);
    } else {
        return this.getTypedRuleContext(ClassesContext,i);
    }
};

MustBeEqualToClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterMustBeEqualToClause(this);
	}
};

MustBeEqualToClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitMustBeEqualToClause(this);
	}
};




myGrammarParser.MustBeEqualToClauseContext = MustBeEqualToClauseContext;

myGrammarParser.prototype.mustBeEqualToClause = function() {

    var localctx = new MustBeEqualToClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, myGrammarParser.RULE_mustBeEqualToClause);
    try {
        this.state = 340;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.FUNCTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 268;
            this.functions();
            this.state = 269;
            this.match(myGrammarParser.SPACE);
            this.state = 270;
            this.mustBeEqualTo();
            this.state = 271;
            this.match(myGrammarParser.SPACE);
            this.state = 272;
            this.functions();
            break;
        case myGrammarParser.AbstractFunctions:
            this.enterOuterAlt(localctx, 2);
            this.state = 274;
            this.abstractFunctions();
            this.state = 275;
            this.match(myGrammarParser.SPACE);
            this.state = 276;
            this.mustBeEqualTo();
            this.state = 277;
            this.match(myGrammarParser.SPACE);
            this.state = 278;
            this.abstractFunctions();
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.enterOuterAlt(localctx, 3);
            this.state = 280;
            this.constructors();
            this.state = 281;
            this.match(myGrammarParser.SPACE);
            this.state = 282;
            this.mustBeEqualTo();
            this.state = 283;
            this.match(myGrammarParser.SPACE);
            this.state = 284;
            this.constructors();
            break;
        case myGrammarParser.ANNOTATION:
            this.enterOuterAlt(localctx, 4);
            this.state = 286;
            this.annotations();
            this.state = 287;
            this.match(myGrammarParser.SPACE);
            this.state = 288;
            this.mustBeEqualTo();
            this.state = 289;
            this.match(myGrammarParser.SPACE);
            this.state = 290;
            this.annotations();
            break;
        case myGrammarParser.PARAMETER:
            this.enterOuterAlt(localctx, 5);
            this.state = 292;
            this.parameters();
            this.state = 293;
            this.match(myGrammarParser.SPACE);
            this.state = 294;
            this.mustBeEqualTo();
            this.state = 295;
            this.match(myGrammarParser.SPACE);
            this.state = 296;
            this.parameters();
            break;
        case myGrammarParser.ReturnValue:
            this.enterOuterAlt(localctx, 6);
            this.state = 298;
            this.returnValues();
            this.state = 299;
            this.match(myGrammarParser.SPACE);
            this.state = 300;
            this.mustBeEqualTo();
            this.state = 301;
            this.match(myGrammarParser.SPACE);
            this.state = 302;
            this.returnValues();
            break;
        case myGrammarParser.DeclarationStatement:
            this.enterOuterAlt(localctx, 7);
            this.state = 304;
            this.declarationStatements();
            this.state = 305;
            this.match(myGrammarParser.SPACE);
            this.state = 306;
            this.mustBeEqualTo();
            this.state = 307;
            this.match(myGrammarParser.SPACE);
            this.state = 308;
            this.declarationStatements();
            break;
        case myGrammarParser.ExpressionStatement:
            this.enterOuterAlt(localctx, 8);
            this.state = 310;
            this.expressionStatements();
            this.state = 311;
            this.match(myGrammarParser.SPACE);
            this.state = 312;
            this.mustBeEqualTo();
            this.state = 313;
            this.match(myGrammarParser.SPACE);
            this.state = 314;
            this.expressionStatements();
            break;
        case myGrammarParser.InitValue:
            this.enterOuterAlt(localctx, 9);
            this.state = 316;
            this.initValues();
            this.state = 317;
            this.match(myGrammarParser.SPACE);
            this.state = 318;
            this.mustBeEqualTo();
            this.state = 319;
            this.match(myGrammarParser.SPACE);
            this.state = 320;
            this.initValues();
            break;
        case myGrammarParser.ARGUMENT:
            this.enterOuterAlt(localctx, 10);
            this.state = 322;
            this.arguments();
            this.state = 323;
            this.match(myGrammarParser.SPACE);
            this.state = 324;
            this.mustBeEqualTo();
            this.state = 325;
            this.match(myGrammarParser.SPACE);
            this.state = 326;
            this.arguments();
            break;
        case myGrammarParser.CALLER:
            this.enterOuterAlt(localctx, 11);
            this.state = 328;
            this.callers();
            this.state = 329;
            this.match(myGrammarParser.SPACE);
            this.state = 330;
            this.mustBeEqualTo();
            this.state = 331;
            this.match(myGrammarParser.SPACE);
            this.state = 332;
            this.callers();
            break;
        case myGrammarParser.CLASSES:
            this.enterOuterAlt(localctx, 12);
            this.state = 334;
            this.classes();
            this.state = 335;
            this.match(myGrammarParser.SPACE);
            this.state = 336;
            this.mustBeEqualTo();
            this.state = 337;
            this.match(myGrammarParser.SPACE);
            this.state = 338;
            this.classes();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WordsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_words;
    return this;
}

WordsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WordsContext.prototype.constructor = WordsContext;

WordsContext.prototype.Alphabet = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.Alphabet);
    } else {
        return this.getToken(myGrammarParser.Alphabet, i);
    }
};


WordsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterWords(this);
	}
};

WordsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitWords(this);
	}
};




myGrammarParser.WordsContext = WordsContext;

myGrammarParser.prototype.words = function() {

    var localctx = new WordsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, myGrammarParser.RULE_words);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 343; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 342;
        		this.match(myGrammarParser.Alphabet);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 345; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,7, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_end;
    return this;
}

EndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EndContext.prototype.constructor = EndContext;


EndContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterEnd(this);
	}
};

EndContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitEnd(this);
	}
};




myGrammarParser.EndContext = EndContext;

myGrammarParser.prototype.end = function() {

    var localctx = new EndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, myGrammarParser.RULE_end);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 347;
        this.match(myGrammarParser.T__0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmptyLineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_emptyLine;
    return this;
}

EmptyLineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyLineContext.prototype.constructor = EmptyLineContext;

EmptyLineContext.prototype.NL = function() {
    return this.getToken(myGrammarParser.NL, 0);
};

EmptyLineContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterEmptyLine(this);
	}
};

EmptyLineContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitEmptyLine(this);
	}
};




myGrammarParser.EmptyLineContext = EmptyLineContext;

myGrammarParser.prototype.emptyLine = function() {

    var localctx = new EmptyLineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, myGrammarParser.RULE_emptyLine);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 349;
        this.match(myGrammarParser.NL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_be;
    return this;
}

BeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BeContext.prototype.constructor = BeContext;


BeContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterBe(this);
	}
};

BeContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitBe(this);
	}
};




myGrammarParser.BeContext = BeContext;

myGrammarParser.prototype.be = function() {

    var localctx = new BeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, myGrammarParser.RULE_be);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 351;
        this.match(myGrammarParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MustContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_must;
    return this;
}

MustContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MustContext.prototype.constructor = MustContext;


MustContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterMust(this);
	}
};

MustContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitMust(this);
	}
};




myGrammarParser.MustContext = MustContext;

myGrammarParser.prototype.must = function() {

    var localctx = new MustContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, myGrammarParser.RULE_must);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 353;
        this.match(myGrammarParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MustBeEqualToContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_mustBeEqualTo;
    return this;
}

MustBeEqualToContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MustBeEqualToContext.prototype.constructor = MustBeEqualToContext;


MustBeEqualToContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterMustBeEqualTo(this);
	}
};

MustBeEqualToContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitMustBeEqualTo(this);
	}
};




myGrammarParser.MustBeEqualToContext = MustBeEqualToContext;

myGrammarParser.prototype.mustBeEqualTo = function() {

    var localctx = new MustBeEqualToContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, myGrammarParser.RULE_mustBeEqualTo);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 355;
        this.match(myGrammarParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhereContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_where;
    return this;
}

WhereContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhereContext.prototype.constructor = WhereContext;


WhereContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterWhere(this);
	}
};

WhereContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitWhere(this);
	}
};




myGrammarParser.WhereContext = WhereContext;

myGrammarParser.prototype.where = function() {

    var localctx = new WhereContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, myGrammarParser.RULE_where);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 357;
        this.match(myGrammarParser.T__4);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_of;
    return this;
}

OfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OfContext.prototype.constructor = OfContext;


OfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterOf(this);
	}
};

OfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitOf(this);
	}
};




myGrammarParser.OfContext = OfContext;

myGrammarParser.prototype.of = function() {

    var localctx = new OfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, myGrammarParser.RULE_of);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 359;
        this.match(myGrammarParser.T__5);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_and;
    return this;
}

AndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AndContext.prototype.constructor = AndContext;


AndContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAnd(this);
	}
};

AndContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAnd(this);
	}
};




myGrammarParser.AndContext = AndContext;

myGrammarParser.prototype.and = function() {

    var localctx = new AndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, myGrammarParser.RULE_and);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 361;
        this.match(myGrammarParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_or;
    return this;
}

OrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrContext.prototype.constructor = OrContext;


OrContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterOr(this);
	}
};

OrContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitOr(this);
	}
};




myGrammarParser.OrContext = OrContext;

myGrammarParser.prototype.or = function() {

    var localctx = new OrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, myGrammarParser.RULE_or);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 363;
        this.match(myGrammarParser.T__7);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HaveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_have;
    return this;
}

HaveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HaveContext.prototype.constructor = HaveContext;


HaveContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterHave(this);
	}
};

HaveContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitHave(this);
	}
};




myGrammarParser.HaveContext = HaveContext;

myGrammarParser.prototype.have = function() {

    var localctx = new HaveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, myGrammarParser.RULE_have);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 365;
        this.match(myGrammarParser.T__8);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EqualsToContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_equalsTo;
    return this;
}

EqualsToContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqualsToContext.prototype.constructor = EqualsToContext;


EqualsToContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterEqualsTo(this);
	}
};

EqualsToContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitEqualsTo(this);
	}
};




myGrammarParser.EqualsToContext = EqualsToContext;

myGrammarParser.prototype.equalsTo = function() {

    var localctx = new EqualsToContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, myGrammarParser.RULE_equalsTo);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 367;
        this.match(myGrammarParser.T__9);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IncludesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_includes;
    return this;
}

IncludesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IncludesContext.prototype.constructor = IncludesContext;


IncludesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterIncludes(this);
	}
};

IncludesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitIncludes(this);
	}
};




myGrammarParser.IncludesContext = IncludesContext;

myGrammarParser.prototype.includes = function() {

    var localctx = new IncludesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, myGrammarParser.RULE_includes);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 369;
        this.match(myGrammarParser.T__10);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NotContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_not;
    return this;
}

NotContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NotContext.prototype.constructor = NotContext;


NotContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterNot(this);
	}
};

NotContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitNot(this);
	}
};




myGrammarParser.NotContext = NotContext;

myGrammarParser.prototype.not = function() {

    var localctx = new NotContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, myGrammarParser.RULE_not);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 371;
        this.match(myGrammarParser.T__11);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BinaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_binary;
    return this;
}

BinaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BinaryContext.prototype.constructor = BinaryContext;

BinaryContext.prototype.and = function() {
    return this.getTypedRuleContext(AndContext,0);
};

BinaryContext.prototype.or = function() {
    return this.getTypedRuleContext(OrContext,0);
};

BinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterBinary(this);
	}
};

BinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitBinary(this);
	}
};




myGrammarParser.BinaryContext = BinaryContext;

myGrammarParser.prototype.binary = function() {

    var localctx = new BinaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, myGrammarParser.RULE_binary);
    try {
        this.state = 375;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.T__6:
            this.enterOuterAlt(localctx, 1);
            this.state = 373;
            this.and();
            break;
        case myGrammarParser.T__7:
            this.enterOuterAlt(localctx, 2);
            this.state = 374;
            this.or();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_names;
    return this;
}

NamesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamesContext.prototype.constructor = NamesContext;

NamesContext.prototype.NAME = function() {
    return this.getToken(myGrammarParser.NAME, 0);
};

NamesContext.prototype.nameCondition = function() {
    return this.getTypedRuleContext(NameConditionContext,0);
};

NamesContext.prototype.nameOf = function() {
    return this.getTypedRuleContext(NameOfContext,0);
};

NamesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterNames(this);
	}
};

NamesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitNames(this);
	}
};




myGrammarParser.NamesContext = NamesContext;

myGrammarParser.prototype.names = function() {

    var localctx = new NamesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, myGrammarParser.RULE_names);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 377;
        this.match(myGrammarParser.NAME);
        this.state = 379;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        if(la_===1) {
            this.state = 378;
            this.nameCondition();

        }
        this.state = 382;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        if(la_===1) {
            this.state = 381;
            this.nameOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_nameOf;
    return this;
}

NameOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameOfContext.prototype.constructor = NameOfContext;

NameOfContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


NameOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

NameOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

NameOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

NameOfContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

NameOfContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

NameOfContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

NameOfContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

NameOfContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

NameOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

NameOfContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

NameOfContext.prototype.extensions = function() {
    return this.getTypedRuleContext(ExtensionsContext,0);
};

NameOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterNameOf(this);
	}
};

NameOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitNameOf(this);
	}
};




myGrammarParser.NameOfContext = NameOfContext;

myGrammarParser.prototype.nameOf = function() {

    var localctx = new NameOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, myGrammarParser.RULE_nameOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 384;
        this.match(myGrammarParser.SPACE);
        this.state = 385;
        this.of();
        this.state = 386;
        this.match(myGrammarParser.SPACE);
        this.state = 397;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.CLASSES:
            this.state = 387;
            this.classes();
            break;
        case myGrammarParser.FUNCTION:
            this.state = 388;
            this.functions();
            break;
        case myGrammarParser.AbstractFunctions:
            this.state = 389;
            this.abstractFunctions();
            break;
        case myGrammarParser.DeclarationStatement:
            this.state = 390;
            this.declarationStatements();
            break;
        case myGrammarParser.PARAMETER:
            this.state = 391;
            this.parameters();
            break;
        case myGrammarParser.ANNOTATION:
            this.state = 392;
            this.annotations();
            break;
        case myGrammarParser.TYPES:
            this.state = 393;
            this.types();
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.state = 394;
            this.constructors();
            break;
        case myGrammarParser.ARGUMENT:
            this.state = 395;
            this.arguments();
            break;
        case myGrammarParser.EXTENSION:
            this.state = 396;
            this.extensions();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_nameCondition;
    return this;
}

NameConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameConditionContext.prototype.constructor = NameConditionContext;

NameConditionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


NameConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

NameConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

NameConditionContext.prototype.equalsTo = function() {
    return this.getTypedRuleContext(EqualsToContext,0);
};

NameConditionContext.prototype.includes = function() {
    return this.getTypedRuleContext(IncludesContext,0);
};

NameConditionContext.prototype.not = function() {
    return this.getTypedRuleContext(NotContext,0);
};

NameConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

NameConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterNameCondition(this);
	}
};

NameConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitNameCondition(this);
	}
};




myGrammarParser.NameConditionContext = NameConditionContext;

myGrammarParser.prototype.nameCondition = function() {

    var localctx = new NameConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, myGrammarParser.RULE_nameCondition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 399;
        this.match(myGrammarParser.SPACE);
        this.state = 400;
        this.where();
        this.state = 401;
        this.match(myGrammarParser.SPACE);
        this.state = 403;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.T__11) {
            this.state = 402;
            this.not();
        }

        this.state = 406;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.SPACE) {
            this.state = 405;
            this.match(myGrammarParser.SPACE);
        }

        this.state = 410;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.T__9:
            this.state = 408;
            this.equalsTo();
            break;
        case myGrammarParser.T__10:
            this.state = 409;
            this.includes();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 412;
        this.match(myGrammarParser.SPACE);
        this.state = 413;
        this.words();
        this.state = 415;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        if(la_===1) {
            this.state = 414;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_annotations;
    return this;
}

AnnotationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationsContext.prototype.constructor = AnnotationsContext;

AnnotationsContext.prototype.ANNOTATION = function() {
    return this.getToken(myGrammarParser.ANNOTATION, 0);
};

AnnotationsContext.prototype.annotationCondition = function() {
    return this.getTypedRuleContext(AnnotationConditionContext,0);
};

AnnotationsContext.prototype.annotationOf = function() {
    return this.getTypedRuleContext(AnnotationOfContext,0);
};

AnnotationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAnnotations(this);
	}
};

AnnotationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAnnotations(this);
	}
};




myGrammarParser.AnnotationsContext = AnnotationsContext;

myGrammarParser.prototype.annotations = function() {

    var localctx = new AnnotationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, myGrammarParser.RULE_annotations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 417;
        this.match(myGrammarParser.ANNOTATION);
        this.state = 419;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        if(la_===1) {
            this.state = 418;
            this.annotationCondition();

        }
        this.state = 422;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        if(la_===1) {
            this.state = 421;
            this.annotationOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_annotationOf;
    return this;
}

AnnotationOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationOfContext.prototype.constructor = AnnotationOfContext;

AnnotationOfContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


AnnotationOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

AnnotationOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

AnnotationOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

AnnotationOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

AnnotationOfContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

AnnotationOfContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

AnnotationOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAnnotationOf(this);
	}
};

AnnotationOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAnnotationOf(this);
	}
};




myGrammarParser.AnnotationOfContext = AnnotationOfContext;

myGrammarParser.prototype.annotationOf = function() {

    var localctx = new AnnotationOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, myGrammarParser.RULE_annotationOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 424;
        this.match(myGrammarParser.SPACE);
        this.state = 425;
        this.of();
        this.state = 426;
        this.match(myGrammarParser.SPACE);
        this.state = 432;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.CLASSES:
            this.state = 427;
            this.classes();
            break;
        case myGrammarParser.FUNCTION:
            this.state = 428;
            this.functions();
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.state = 429;
            this.constructors();
            break;
        case myGrammarParser.AbstractFunctions:
            this.state = 430;
            this.abstractFunctions();
            break;
        case myGrammarParser.DeclarationStatement:
            this.state = 431;
            this.declarationStatements();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_annotationCondition;
    return this;
}

AnnotationConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationConditionContext.prototype.constructor = AnnotationConditionContext;

AnnotationConditionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


AnnotationConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

AnnotationConditionContext.prototype.annotationExpression = function() {
    return this.getTypedRuleContext(AnnotationExpressionContext,0);
};

AnnotationConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

AnnotationConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAnnotationCondition(this);
	}
};

AnnotationConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAnnotationCondition(this);
	}
};




myGrammarParser.AnnotationConditionContext = AnnotationConditionContext;

myGrammarParser.prototype.annotationCondition = function() {

    var localctx = new AnnotationConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, myGrammarParser.RULE_annotationCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 434;
        this.match(myGrammarParser.SPACE);
        this.state = 435;
        this.where();
        this.state = 436;
        this.match(myGrammarParser.SPACE);
        this.state = 437;
        this.annotationExpression(0);
        this.state = 439;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        if(la_===1) {
            this.state = 438;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_annotationExpression;
    this.left = null; // AnnotationExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // AnnotationExpressionContext
    return this;
}

AnnotationExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationExpressionContext.prototype.constructor = AnnotationExpressionContext;

AnnotationExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

AnnotationExpressionContext.prototype.annotationExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationExpressionContext);
    } else {
        return this.getTypedRuleContext(AnnotationExpressionContext,i);
    }
};

AnnotationExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

AnnotationExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

AnnotationExpressionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


AnnotationExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

AnnotationExpressionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

AnnotationExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

AnnotationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAnnotationExpression(this);
	}
};

AnnotationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAnnotationExpression(this);
	}
};



myGrammarParser.prototype.annotationExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AnnotationExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 50;
    this.enterRecursionRule(localctx, 50, myGrammarParser.RULE_annotationExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 458;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 442;
            this.match(myGrammarParser.LPAREN);
            this.state = 443;
            this.annotationExpression(0);
            this.state = 444;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
        case myGrammarParser.SPACE:
            this.state = 447;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===myGrammarParser.SPACE) {
                this.state = 446;
                this.match(myGrammarParser.SPACE);
            }

            this.state = 449;
            this.have();
            this.state = 450;
            this.match(myGrammarParser.SPACE);
            this.state = 453;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.NAME:
                this.state = 451;
                this.names();
                break;
            case myGrammarParser.ARGUMENT:
                this.state = 452;
                this.arguments();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 456;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
            if(la_===1) {
                this.state = 455;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 468;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new AnnotationExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_annotationExpression);
                this.state = 460;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 461;
                this.match(myGrammarParser.SPACE);
                this.state = 462;
                localctx.op = this.binary();
                this.state = 463;
                this.match(myGrammarParser.SPACE);
                this.state = 464;
                localctx.right = this.annotationExpression(3); 
            }
            this.state = 470;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ExtensionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_extensions;
    return this;
}

ExtensionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionsContext.prototype.constructor = ExtensionsContext;

ExtensionsContext.prototype.EXTENSION = function() {
    return this.getToken(myGrammarParser.EXTENSION, 0);
};

ExtensionsContext.prototype.extensionCondition = function() {
    return this.getTypedRuleContext(ExtensionConditionContext,0);
};

ExtensionsContext.prototype.extensionOf = function() {
    return this.getTypedRuleContext(ExtensionOfContext,0);
};

ExtensionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExtensions(this);
	}
};

ExtensionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExtensions(this);
	}
};




myGrammarParser.ExtensionsContext = ExtensionsContext;

myGrammarParser.prototype.extensions = function() {

    var localctx = new ExtensionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, myGrammarParser.RULE_extensions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 471;
        this.match(myGrammarParser.EXTENSION);
        this.state = 473;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        if(la_===1) {
            this.state = 472;
            this.extensionCondition();

        }
        this.state = 476;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        if(la_===1) {
            this.state = 475;
            this.extensionOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtensionOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_extensionOf;
    return this;
}

ExtensionOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionOfContext.prototype.constructor = ExtensionOfContext;

ExtensionOfContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ExtensionOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ExtensionOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

ExtensionOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExtensionOf(this);
	}
};

ExtensionOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExtensionOf(this);
	}
};




myGrammarParser.ExtensionOfContext = ExtensionOfContext;

myGrammarParser.prototype.extensionOf = function() {

    var localctx = new ExtensionOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, myGrammarParser.RULE_extensionOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 478;
        this.match(myGrammarParser.SPACE);
        this.state = 479;
        this.of();
        this.state = 480;
        this.match(myGrammarParser.SPACE);
        this.state = 481;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtensionConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_extensionCondition;
    return this;
}

ExtensionConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionConditionContext.prototype.constructor = ExtensionConditionContext;

ExtensionConditionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ExtensionConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

ExtensionConditionContext.prototype.equalsTo = function() {
    return this.getTypedRuleContext(EqualsToContext,0);
};

ExtensionConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

ExtensionConditionContext.prototype.not = function() {
    return this.getTypedRuleContext(NotContext,0);
};

ExtensionConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

ExtensionConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExtensionCondition(this);
	}
};

ExtensionConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExtensionCondition(this);
	}
};




myGrammarParser.ExtensionConditionContext = ExtensionConditionContext;

myGrammarParser.prototype.extensionCondition = function() {

    var localctx = new ExtensionConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, myGrammarParser.RULE_extensionCondition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 483;
        this.match(myGrammarParser.SPACE);
        this.state = 484;
        this.where();
        this.state = 485;
        this.match(myGrammarParser.SPACE);
        this.state = 487;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.T__11) {
            this.state = 486;
            this.not();
        }

        this.state = 490;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.SPACE) {
            this.state = 489;
            this.match(myGrammarParser.SPACE);
        }

        this.state = 492;
        this.equalsTo();
        this.state = 493;
        this.match(myGrammarParser.SPACE);
        this.state = 494;
        this.words();
        this.state = 496;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
        if(la_===1) {
            this.state = 495;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_functions;
    return this;
}

FunctionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionsContext.prototype.constructor = FunctionsContext;

FunctionsContext.prototype.FUNCTION = function() {
    return this.getToken(myGrammarParser.FUNCTION, 0);
};

FunctionsContext.prototype.functionCondition = function() {
    return this.getTypedRuleContext(FunctionConditionContext,0);
};

FunctionsContext.prototype.functionOf = function() {
    return this.getTypedRuleContext(FunctionOfContext,0);
};

FunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterFunctions(this);
	}
};

FunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitFunctions(this);
	}
};




myGrammarParser.FunctionsContext = FunctionsContext;

myGrammarParser.prototype.functions = function() {

    var localctx = new FunctionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, myGrammarParser.RULE_functions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 498;
        this.match(myGrammarParser.FUNCTION);
        this.state = 500;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        if(la_===1) {
            this.state = 499;
            this.functionCondition();

        }
        this.state = 503;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        if(la_===1) {
            this.state = 502;
            this.functionOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_functionOf;
    return this;
}

FunctionOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionOfContext.prototype.constructor = FunctionOfContext;

FunctionOfContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


FunctionOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

FunctionOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

FunctionOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterFunctionOf(this);
	}
};

FunctionOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitFunctionOf(this);
	}
};




myGrammarParser.FunctionOfContext = FunctionOfContext;

myGrammarParser.prototype.functionOf = function() {

    var localctx = new FunctionOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, myGrammarParser.RULE_functionOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 505;
        this.match(myGrammarParser.SPACE);
        this.state = 506;
        this.of();
        this.state = 507;
        this.match(myGrammarParser.SPACE);
        this.state = 508;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_functionCondition;
    return this;
}

FunctionConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionConditionContext.prototype.constructor = FunctionConditionContext;

FunctionConditionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


FunctionConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

FunctionConditionContext.prototype.functionExpression = function() {
    return this.getTypedRuleContext(FunctionExpressionContext,0);
};

FunctionConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

FunctionConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterFunctionCondition(this);
	}
};

FunctionConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitFunctionCondition(this);
	}
};




myGrammarParser.FunctionConditionContext = FunctionConditionContext;

myGrammarParser.prototype.functionCondition = function() {

    var localctx = new FunctionConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, myGrammarParser.RULE_functionCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 510;
        this.match(myGrammarParser.SPACE);
        this.state = 511;
        this.where();
        this.state = 512;
        this.match(myGrammarParser.SPACE);
        this.state = 513;
        this.functionExpression(0);
        this.state = 515;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        if(la_===1) {
            this.state = 514;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_functionExpression;
    this.left = null; // FunctionExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // FunctionExpressionContext
    return this;
}

FunctionExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionExpressionContext.prototype.constructor = FunctionExpressionContext;

FunctionExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

FunctionExpressionContext.prototype.functionExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionExpressionContext);
    } else {
        return this.getTypedRuleContext(FunctionExpressionContext,i);
    }
};

FunctionExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

FunctionExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

FunctionExpressionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


FunctionExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

FunctionExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

FunctionExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

FunctionExpressionContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

FunctionExpressionContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

FunctionExpressionContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

FunctionExpressionContext.prototype.expressionStatements = function() {
    return this.getTypedRuleContext(ExpressionStatementsContext,0);
};

FunctionExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

FunctionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterFunctionExpression(this);
	}
};

FunctionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitFunctionExpression(this);
	}
};



myGrammarParser.prototype.functionExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new FunctionExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 64;
    this.enterRecursionRule(localctx, 64, myGrammarParser.RULE_functionExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 539;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 518;
            this.match(myGrammarParser.LPAREN);
            this.state = 519;
            this.functionExpression(0);
            this.state = 520;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
        case myGrammarParser.SPACE:
            this.state = 523;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===myGrammarParser.SPACE) {
                this.state = 522;
                this.match(myGrammarParser.SPACE);
            }

            this.state = 525;
            this.have();
            this.state = 526;
            this.match(myGrammarParser.SPACE);
            this.state = 534;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.ANNOTATION:
                this.state = 527;
                this.annotations();
                break;
            case myGrammarParser.SPECIFIER:
                this.state = 528;
                this.specifiers();
                break;
            case myGrammarParser.NAME:
                this.state = 529;
                this.names();
                break;
            case myGrammarParser.PARAMETER:
                this.state = 530;
                this.parameters();
                break;
            case myGrammarParser.ReturnValue:
                this.state = 531;
                this.returnValues();
                break;
            case myGrammarParser.DeclarationStatement:
                this.state = 532;
                this.declarationStatements();
                break;
            case myGrammarParser.ExpressionStatement:
                this.state = 533;
                this.expressionStatements();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 537;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
            if(la_===1) {
                this.state = 536;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 549;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new FunctionExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_functionExpression);
                this.state = 541;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 542;
                this.match(myGrammarParser.SPACE);
                this.state = 543;
                localctx.op = this.binary();
                this.state = 544;
                this.match(myGrammarParser.SPACE);
                this.state = 545;
                localctx.right = this.functionExpression(3); 
            }
            this.state = 551;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AbstractFunctionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_abstractFunctions;
    return this;
}

AbstractFunctionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionsContext.prototype.constructor = AbstractFunctionsContext;

AbstractFunctionsContext.prototype.AbstractFunctions = function() {
    return this.getToken(myGrammarParser.AbstractFunctions, 0);
};

AbstractFunctionsContext.prototype.abstractFunctionCondition = function() {
    return this.getTypedRuleContext(AbstractFunctionConditionContext,0);
};

AbstractFunctionsContext.prototype.abstractFunctionOf = function() {
    return this.getTypedRuleContext(AbstractFunctionOfContext,0);
};

AbstractFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAbstractFunctions(this);
	}
};

AbstractFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAbstractFunctions(this);
	}
};




myGrammarParser.AbstractFunctionsContext = AbstractFunctionsContext;

myGrammarParser.prototype.abstractFunctions = function() {

    var localctx = new AbstractFunctionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, myGrammarParser.RULE_abstractFunctions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 552;
        this.match(myGrammarParser.AbstractFunctions);
        this.state = 554;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        if(la_===1) {
            this.state = 553;
            this.abstractFunctionCondition();

        }
        this.state = 557;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
        if(la_===1) {
            this.state = 556;
            this.abstractFunctionOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractFunctionOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_abstractFunctionOf;
    return this;
}

AbstractFunctionOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionOfContext.prototype.constructor = AbstractFunctionOfContext;

AbstractFunctionOfContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


AbstractFunctionOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

AbstractFunctionOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

AbstractFunctionOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAbstractFunctionOf(this);
	}
};

AbstractFunctionOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAbstractFunctionOf(this);
	}
};




myGrammarParser.AbstractFunctionOfContext = AbstractFunctionOfContext;

myGrammarParser.prototype.abstractFunctionOf = function() {

    var localctx = new AbstractFunctionOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, myGrammarParser.RULE_abstractFunctionOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 559;
        this.match(myGrammarParser.SPACE);
        this.state = 560;
        this.of();
        this.state = 561;
        this.match(myGrammarParser.SPACE);
        this.state = 562;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractFunctionConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_abstractFunctionCondition;
    return this;
}

AbstractFunctionConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionConditionContext.prototype.constructor = AbstractFunctionConditionContext;

AbstractFunctionConditionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


AbstractFunctionConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

AbstractFunctionConditionContext.prototype.abstractFunctionExpression = function() {
    return this.getTypedRuleContext(AbstractFunctionExpressionContext,0);
};

AbstractFunctionConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

AbstractFunctionConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAbstractFunctionCondition(this);
	}
};

AbstractFunctionConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAbstractFunctionCondition(this);
	}
};




myGrammarParser.AbstractFunctionConditionContext = AbstractFunctionConditionContext;

myGrammarParser.prototype.abstractFunctionCondition = function() {

    var localctx = new AbstractFunctionConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, myGrammarParser.RULE_abstractFunctionCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 564;
        this.match(myGrammarParser.SPACE);
        this.state = 565;
        this.where();
        this.state = 566;
        this.match(myGrammarParser.SPACE);
        this.state = 567;
        this.abstractFunctionExpression(0);
        this.state = 569;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        if(la_===1) {
            this.state = 568;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractFunctionExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_abstractFunctionExpression;
    this.left = null; // AbstractFunctionExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // AbstractFunctionExpressionContext
    return this;
}

AbstractFunctionExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractFunctionExpressionContext.prototype.constructor = AbstractFunctionExpressionContext;

AbstractFunctionExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

AbstractFunctionExpressionContext.prototype.abstractFunctionExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AbstractFunctionExpressionContext);
    } else {
        return this.getTypedRuleContext(AbstractFunctionExpressionContext,i);
    }
};

AbstractFunctionExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

AbstractFunctionExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

AbstractFunctionExpressionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


AbstractFunctionExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

AbstractFunctionExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

AbstractFunctionExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

AbstractFunctionExpressionContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

AbstractFunctionExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

AbstractFunctionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterAbstractFunctionExpression(this);
	}
};

AbstractFunctionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitAbstractFunctionExpression(this);
	}
};



myGrammarParser.prototype.abstractFunctionExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AbstractFunctionExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 72;
    this.enterRecursionRule(localctx, 72, myGrammarParser.RULE_abstractFunctionExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 590;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 572;
            this.match(myGrammarParser.LPAREN);
            this.state = 573;
            this.abstractFunctionExpression(0);
            this.state = 574;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
        case myGrammarParser.SPACE:
            this.state = 577;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===myGrammarParser.SPACE) {
                this.state = 576;
                this.match(myGrammarParser.SPACE);
            }

            this.state = 579;
            this.have();
            this.state = 580;
            this.match(myGrammarParser.SPACE);
            this.state = 585;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.ANNOTATION:
                this.state = 581;
                this.annotations();
                break;
            case myGrammarParser.SPECIFIER:
                this.state = 582;
                this.specifiers();
                break;
            case myGrammarParser.NAME:
                this.state = 583;
                this.names();
                break;
            case myGrammarParser.PARAMETER:
                this.state = 584;
                this.parameters();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 588;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
            if(la_===1) {
                this.state = 587;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 600;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new AbstractFunctionExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_abstractFunctionExpression);
                this.state = 592;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 593;
                this.match(myGrammarParser.SPACE);
                this.state = 594;
                localctx.op = this.binary();
                this.state = 595;
                this.match(myGrammarParser.SPACE);
                this.state = 596;
                localctx.right = this.abstractFunctionExpression(3); 
            }
            this.state = 602;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ConstructorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_constructors;
    return this;
}

ConstructorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorsContext.prototype.constructor = ConstructorsContext;

ConstructorsContext.prototype.CONSTRUCTOR = function() {
    return this.getToken(myGrammarParser.CONSTRUCTOR, 0);
};

ConstructorsContext.prototype.constructorCondition = function() {
    return this.getTypedRuleContext(ConstructorConditionContext,0);
};

ConstructorsContext.prototype.constructorOf = function() {
    return this.getTypedRuleContext(ConstructorOfContext,0);
};

ConstructorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterConstructors(this);
	}
};

ConstructorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitConstructors(this);
	}
};




myGrammarParser.ConstructorsContext = ConstructorsContext;

myGrammarParser.prototype.constructors = function() {

    var localctx = new ConstructorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, myGrammarParser.RULE_constructors);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 603;
        this.match(myGrammarParser.CONSTRUCTOR);
        this.state = 605;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        if(la_===1) {
            this.state = 604;
            this.constructorCondition();

        }
        this.state = 608;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        if(la_===1) {
            this.state = 607;
            this.constructorOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_constructorOf;
    return this;
}

ConstructorOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorOfContext.prototype.constructor = ConstructorOfContext;

ConstructorOfContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ConstructorOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ConstructorOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

ConstructorOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterConstructorOf(this);
	}
};

ConstructorOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitConstructorOf(this);
	}
};




myGrammarParser.ConstructorOfContext = ConstructorOfContext;

myGrammarParser.prototype.constructorOf = function() {

    var localctx = new ConstructorOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, myGrammarParser.RULE_constructorOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 610;
        this.match(myGrammarParser.SPACE);
        this.state = 611;
        this.of();
        this.state = 612;
        this.match(myGrammarParser.SPACE);
        this.state = 613;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_constructorCondition;
    return this;
}

ConstructorConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorConditionContext.prototype.constructor = ConstructorConditionContext;

ConstructorConditionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ConstructorConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

ConstructorConditionContext.prototype.constructorExpression = function() {
    return this.getTypedRuleContext(ConstructorExpressionContext,0);
};

ConstructorConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

ConstructorConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterConstructorCondition(this);
	}
};

ConstructorConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitConstructorCondition(this);
	}
};




myGrammarParser.ConstructorConditionContext = ConstructorConditionContext;

myGrammarParser.prototype.constructorCondition = function() {

    var localctx = new ConstructorConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, myGrammarParser.RULE_constructorCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 615;
        this.match(myGrammarParser.SPACE);
        this.state = 616;
        this.where();
        this.state = 617;
        this.match(myGrammarParser.SPACE);
        this.state = 618;
        this.constructorExpression(0);
        this.state = 620;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        if(la_===1) {
            this.state = 619;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_constructorExpression;
    this.left = null; // ConstructorExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ConstructorExpressionContext
    return this;
}

ConstructorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorExpressionContext.prototype.constructor = ConstructorExpressionContext;

ConstructorExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

ConstructorExpressionContext.prototype.constructorExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstructorExpressionContext);
    } else {
        return this.getTypedRuleContext(ConstructorExpressionContext,i);
    }
};

ConstructorExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

ConstructorExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

ConstructorExpressionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ConstructorExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

ConstructorExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

ConstructorExpressionContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

ConstructorExpressionContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

ConstructorExpressionContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

ConstructorExpressionContext.prototype.expressionStatements = function() {
    return this.getTypedRuleContext(ExpressionStatementsContext,0);
};

ConstructorExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ConstructorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterConstructorExpression(this);
	}
};

ConstructorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitConstructorExpression(this);
	}
};



myGrammarParser.prototype.constructorExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ConstructorExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 80;
    this.enterRecursionRule(localctx, 80, myGrammarParser.RULE_constructorExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 643;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 623;
            this.match(myGrammarParser.LPAREN);
            this.state = 624;
            this.constructorExpression(0);
            this.state = 625;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
        case myGrammarParser.SPACE:
            this.state = 628;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===myGrammarParser.SPACE) {
                this.state = 627;
                this.match(myGrammarParser.SPACE);
            }

            this.state = 630;
            this.have();
            this.state = 631;
            this.match(myGrammarParser.SPACE);
            this.state = 638;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.ANNOTATION:
                this.state = 632;
                this.annotations();
                break;
            case myGrammarParser.SPECIFIER:
                this.state = 633;
                this.specifiers();
                break;
            case myGrammarParser.PARAMETER:
                this.state = 634;
                this.parameters();
                break;
            case myGrammarParser.ReturnValue:
                this.state = 635;
                this.returnValues();
                break;
            case myGrammarParser.DeclarationStatement:
                this.state = 636;
                this.declarationStatements();
                break;
            case myGrammarParser.ExpressionStatement:
                this.state = 637;
                this.expressionStatements();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 641;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
            if(la_===1) {
                this.state = 640;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 653;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,53,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ConstructorExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_constructorExpression);
                this.state = 645;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 646;
                this.match(myGrammarParser.SPACE);
                this.state = 647;
                localctx.op = this.binary();
                this.state = 648;
                this.match(myGrammarParser.SPACE);
                this.state = 649;
                localctx.right = this.constructorExpression(3); 
            }
            this.state = 655;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,53,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_parameters;
    return this;
}

ParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParametersContext.prototype.constructor = ParametersContext;

ParametersContext.prototype.PARAMETER = function() {
    return this.getToken(myGrammarParser.PARAMETER, 0);
};

ParametersContext.prototype.parameterCondition = function() {
    return this.getTypedRuleContext(ParameterConditionContext,0);
};

ParametersContext.prototype.parameterOf = function() {
    return this.getTypedRuleContext(ParameterOfContext,0);
};

ParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterParameters(this);
	}
};

ParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitParameters(this);
	}
};




myGrammarParser.ParametersContext = ParametersContext;

myGrammarParser.prototype.parameters = function() {

    var localctx = new ParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, myGrammarParser.RULE_parameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 656;
        this.match(myGrammarParser.PARAMETER);
        this.state = 658;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        if(la_===1) {
            this.state = 657;
            this.parameterCondition();

        }
        this.state = 661;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        if(la_===1) {
            this.state = 660;
            this.parameterOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_parameterOf;
    return this;
}

ParameterOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterOfContext.prototype.constructor = ParameterOfContext;

ParameterOfContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ParameterOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ParameterOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

ParameterOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

ParameterOfContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

ParameterOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterParameterOf(this);
	}
};

ParameterOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitParameterOf(this);
	}
};




myGrammarParser.ParameterOfContext = ParameterOfContext;

myGrammarParser.prototype.parameterOf = function() {

    var localctx = new ParameterOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, myGrammarParser.RULE_parameterOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 663;
        this.match(myGrammarParser.SPACE);
        this.state = 664;
        this.of();
        this.state = 665;
        this.match(myGrammarParser.SPACE);
        this.state = 669;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.FUNCTION:
            this.state = 666;
            this.functions();
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.state = 667;
            this.constructors();
            break;
        case myGrammarParser.AbstractFunctions:
            this.state = 668;
            this.abstractFunctions();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_parameterCondition;
    return this;
}

ParameterConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterConditionContext.prototype.constructor = ParameterConditionContext;

ParameterConditionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ParameterConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

ParameterConditionContext.prototype.parameterExpression = function() {
    return this.getTypedRuleContext(ParameterExpressionContext,0);
};

ParameterConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

ParameterConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterParameterCondition(this);
	}
};

ParameterConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitParameterCondition(this);
	}
};




myGrammarParser.ParameterConditionContext = ParameterConditionContext;

myGrammarParser.prototype.parameterCondition = function() {

    var localctx = new ParameterConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, myGrammarParser.RULE_parameterCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 671;
        this.match(myGrammarParser.SPACE);
        this.state = 672;
        this.where();
        this.state = 673;
        this.match(myGrammarParser.SPACE);
        this.state = 674;
        this.parameterExpression(0);
        this.state = 676;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        if(la_===1) {
            this.state = 675;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_parameterExpression;
    this.left = null; // ParameterExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ParameterExpressionContext
    return this;
}

ParameterExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterExpressionContext.prototype.constructor = ParameterExpressionContext;

ParameterExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

ParameterExpressionContext.prototype.parameterExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterExpressionContext);
    } else {
        return this.getTypedRuleContext(ParameterExpressionContext,i);
    }
};

ParameterExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

ParameterExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

ParameterExpressionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ParameterExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

ParameterExpressionContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

ParameterExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ParameterExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterParameterExpression(this);
	}
};

ParameterExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitParameterExpression(this);
	}
};



myGrammarParser.prototype.parameterExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ParameterExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 88;
    this.enterRecursionRule(localctx, 88, myGrammarParser.RULE_parameterExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 695;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 679;
            this.match(myGrammarParser.LPAREN);
            this.state = 680;
            this.parameterExpression(0);
            this.state = 681;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
        case myGrammarParser.SPACE:
            this.state = 684;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===myGrammarParser.SPACE) {
                this.state = 683;
                this.match(myGrammarParser.SPACE);
            }

            this.state = 686;
            this.have();
            this.state = 687;
            this.match(myGrammarParser.SPACE);
            this.state = 690;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.NAME:
                this.state = 688;
                this.names();
                break;
            case myGrammarParser.TYPES:
                this.state = 689;
                this.types();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 693;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
            if(la_===1) {
                this.state = 692;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 705;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ParameterExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_parameterExpression);
                this.state = 697;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 698;
                this.match(myGrammarParser.SPACE);
                this.state = 699;
                localctx.op = this.binary();
                this.state = 700;
                this.match(myGrammarParser.SPACE);
                this.state = 701;
                localctx.right = this.parameterExpression(3); 
            }
            this.state = 707;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TypesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_types;
    return this;
}

TypesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypesContext.prototype.constructor = TypesContext;

TypesContext.prototype.TYPES = function() {
    return this.getToken(myGrammarParser.TYPES, 0);
};

TypesContext.prototype.typeCondition = function() {
    return this.getTypedRuleContext(TypeConditionContext,0);
};

TypesContext.prototype.typeOf = function() {
    return this.getTypedRuleContext(TypeOfContext,0);
};

TypesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterTypes(this);
	}
};

TypesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitTypes(this);
	}
};




myGrammarParser.TypesContext = TypesContext;

myGrammarParser.prototype.types = function() {

    var localctx = new TypesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, myGrammarParser.RULE_types);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 708;
        this.match(myGrammarParser.TYPES);
        this.state = 710;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
        if(la_===1) {
            this.state = 709;
            this.typeCondition();

        }
        this.state = 713;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        if(la_===1) {
            this.state = 712;
            this.typeOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_typeOf;
    return this;
}

TypeOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeOfContext.prototype.constructor = TypeOfContext;

TypeOfContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


TypeOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

TypeOfContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

TypeOfContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

TypeOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterTypeOf(this);
	}
};

TypeOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitTypeOf(this);
	}
};




myGrammarParser.TypeOfContext = TypeOfContext;

myGrammarParser.prototype.typeOf = function() {

    var localctx = new TypeOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, myGrammarParser.RULE_typeOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 715;
        this.match(myGrammarParser.SPACE);
        this.state = 716;
        this.of();
        this.state = 717;
        this.match(myGrammarParser.SPACE);
        this.state = 720;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.PARAMETER:
            this.state = 718;
            this.parameters();
            break;
        case myGrammarParser.DeclarationStatement:
            this.state = 719;
            this.declarationStatements();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_typeCondition;
    return this;
}

TypeConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeConditionContext.prototype.constructor = TypeConditionContext;

TypeConditionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


TypeConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

TypeConditionContext.prototype.equalsTo = function() {
    return this.getTypedRuleContext(EqualsToContext,0);
};

TypeConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

TypeConditionContext.prototype.not = function() {
    return this.getTypedRuleContext(NotContext,0);
};

TypeConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

TypeConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterTypeCondition(this);
	}
};

TypeConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitTypeCondition(this);
	}
};




myGrammarParser.TypeConditionContext = TypeConditionContext;

myGrammarParser.prototype.typeCondition = function() {

    var localctx = new TypeConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, myGrammarParser.RULE_typeCondition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 722;
        this.match(myGrammarParser.SPACE);
        this.state = 723;
        this.where();
        this.state = 724;
        this.match(myGrammarParser.SPACE);
        this.state = 726;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.T__11) {
            this.state = 725;
            this.not();
        }

        this.state = 729;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.SPACE) {
            this.state = 728;
            this.match(myGrammarParser.SPACE);
        }

        this.state = 731;
        this.equalsTo();
        this.state = 732;
        this.match(myGrammarParser.SPACE);
        this.state = 733;
        this.words();
        this.state = 735;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        if(la_===1) {
            this.state = 734;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_specifiers;
    return this;
}

SpecifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecifiersContext.prototype.constructor = SpecifiersContext;

SpecifiersContext.prototype.SPECIFIER = function() {
    return this.getToken(myGrammarParser.SPECIFIER, 0);
};

SpecifiersContext.prototype.specifierCondition = function() {
    return this.getTypedRuleContext(SpecifierConditionContext,0);
};

SpecifiersContext.prototype.specifierOf = function() {
    return this.getTypedRuleContext(SpecifierOfContext,0);
};

SpecifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterSpecifiers(this);
	}
};

SpecifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitSpecifiers(this);
	}
};




myGrammarParser.SpecifiersContext = SpecifiersContext;

myGrammarParser.prototype.specifiers = function() {

    var localctx = new SpecifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, myGrammarParser.RULE_specifiers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 737;
        this.match(myGrammarParser.SPECIFIER);
        this.state = 739;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        if(la_===1) {
            this.state = 738;
            this.specifierCondition();

        }
        this.state = 742;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        if(la_===1) {
            this.state = 741;
            this.specifierOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecifierOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_specifierOf;
    return this;
}

SpecifierOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecifierOfContext.prototype.constructor = SpecifierOfContext;

SpecifierOfContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


SpecifierOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

SpecifierOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

SpecifierOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

SpecifierOfContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

SpecifierOfContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

SpecifierOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

SpecifierOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterSpecifierOf(this);
	}
};

SpecifierOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitSpecifierOf(this);
	}
};




myGrammarParser.SpecifierOfContext = SpecifierOfContext;

myGrammarParser.prototype.specifierOf = function() {

    var localctx = new SpecifierOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, myGrammarParser.RULE_specifierOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 744;
        this.match(myGrammarParser.SPACE);
        this.state = 745;
        this.of();
        this.state = 746;
        this.match(myGrammarParser.SPACE);
        this.state = 752;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.FUNCTION:
            this.state = 747;
            this.functions();
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.state = 748;
            this.constructors();
            break;
        case myGrammarParser.AbstractFunctions:
            this.state = 749;
            this.abstractFunctions();
            break;
        case myGrammarParser.DeclarationStatement:
            this.state = 750;
            this.declarationStatements();
            break;
        case myGrammarParser.CLASSES:
            this.state = 751;
            this.classes();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecifierConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_specifierCondition;
    return this;
}

SpecifierConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecifierConditionContext.prototype.constructor = SpecifierConditionContext;

SpecifierConditionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


SpecifierConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

SpecifierConditionContext.prototype.equalsTo = function() {
    return this.getTypedRuleContext(EqualsToContext,0);
};

SpecifierConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

SpecifierConditionContext.prototype.not = function() {
    return this.getTypedRuleContext(NotContext,0);
};

SpecifierConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

SpecifierConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterSpecifierCondition(this);
	}
};

SpecifierConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitSpecifierCondition(this);
	}
};




myGrammarParser.SpecifierConditionContext = SpecifierConditionContext;

myGrammarParser.prototype.specifierCondition = function() {

    var localctx = new SpecifierConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, myGrammarParser.RULE_specifierCondition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 754;
        this.match(myGrammarParser.SPACE);
        this.state = 755;
        this.where();
        this.state = 756;
        this.match(myGrammarParser.SPACE);
        this.state = 758;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.T__11) {
            this.state = 757;
            this.not();
        }

        this.state = 761;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.SPACE) {
            this.state = 760;
            this.match(myGrammarParser.SPACE);
        }

        this.state = 763;
        this.equalsTo();
        this.state = 764;
        this.match(myGrammarParser.SPACE);
        this.state = 765;
        this.words();
        this.state = 767;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        if(la_===1) {
            this.state = 766;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnValuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_returnValues;
    return this;
}

ReturnValuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnValuesContext.prototype.constructor = ReturnValuesContext;

ReturnValuesContext.prototype.ReturnValue = function() {
    return this.getToken(myGrammarParser.ReturnValue, 0);
};

ReturnValuesContext.prototype.returnValueCondition = function() {
    return this.getTypedRuleContext(ReturnValueConditionContext,0);
};

ReturnValuesContext.prototype.returnValueOf = function() {
    return this.getTypedRuleContext(ReturnValueOfContext,0);
};

ReturnValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterReturnValues(this);
	}
};

ReturnValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitReturnValues(this);
	}
};




myGrammarParser.ReturnValuesContext = ReturnValuesContext;

myGrammarParser.prototype.returnValues = function() {

    var localctx = new ReturnValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, myGrammarParser.RULE_returnValues);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 769;
        this.match(myGrammarParser.ReturnValue);
        this.state = 771;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        if(la_===1) {
            this.state = 770;
            this.returnValueCondition();

        }
        this.state = 774;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
        if(la_===1) {
            this.state = 773;
            this.returnValueOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnValueOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_returnValueOf;
    return this;
}

ReturnValueOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnValueOfContext.prototype.constructor = ReturnValueOfContext;

ReturnValueOfContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ReturnValueOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ReturnValueOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

ReturnValueOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterReturnValueOf(this);
	}
};

ReturnValueOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitReturnValueOf(this);
	}
};




myGrammarParser.ReturnValueOfContext = ReturnValueOfContext;

myGrammarParser.prototype.returnValueOf = function() {

    var localctx = new ReturnValueOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, myGrammarParser.RULE_returnValueOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 776;
        this.match(myGrammarParser.SPACE);
        this.state = 777;
        this.of();
        this.state = 778;
        this.match(myGrammarParser.SPACE);
        this.state = 779;
        this.functions();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnValueConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_returnValueCondition;
    return this;
}

ReturnValueConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnValueConditionContext.prototype.constructor = ReturnValueConditionContext;

ReturnValueConditionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ReturnValueConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

ReturnValueConditionContext.prototype.returnValueExpression = function() {
    return this.getTypedRuleContext(ReturnValueExpressionContext,0);
};

ReturnValueConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

ReturnValueConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterReturnValueCondition(this);
	}
};

ReturnValueConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitReturnValueCondition(this);
	}
};




myGrammarParser.ReturnValueConditionContext = ReturnValueConditionContext;

myGrammarParser.prototype.returnValueCondition = function() {

    var localctx = new ReturnValueConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, myGrammarParser.RULE_returnValueCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 781;
        this.match(myGrammarParser.SPACE);
        this.state = 782;
        this.where();
        this.state = 783;
        this.match(myGrammarParser.SPACE);
        this.state = 784;
        this.returnValueExpression(0);
        this.state = 786;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
        if(la_===1) {
            this.state = 785;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnValueExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_returnValueExpression;
    this.left = null; // ReturnValueExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ReturnValueExpressionContext
    return this;
}

ReturnValueExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnValueExpressionContext.prototype.constructor = ReturnValueExpressionContext;

ReturnValueExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

ReturnValueExpressionContext.prototype.returnValueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ReturnValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ReturnValueExpressionContext,i);
    }
};

ReturnValueExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

ReturnValueExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

ReturnValueExpressionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ReturnValueExpressionContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

ReturnValueExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

ReturnValueExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ReturnValueExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterReturnValueExpression(this);
	}
};

ReturnValueExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitReturnValueExpression(this);
	}
};



myGrammarParser.prototype.returnValueExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ReturnValueExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 108;
    this.enterRecursionRule(localctx, 108, myGrammarParser.RULE_returnValueExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 805;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 789;
            this.match(myGrammarParser.LPAREN);
            this.state = 790;
            this.returnValueExpression(0);
            this.state = 791;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
        case myGrammarParser.SPACE:
            this.state = 794;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===myGrammarParser.SPACE) {
                this.state = 793;
                this.match(myGrammarParser.SPACE);
            }

            this.state = 796;
            this.have();
            this.state = 797;
            this.match(myGrammarParser.SPACE);
            this.state = 800;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.CALL:
                this.state = 798;
                this.calls();
                break;
            case myGrammarParser.NAME:
                this.state = 799;
                this.names();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 803;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
            if(la_===1) {
                this.state = 802;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 815;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ReturnValueExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_returnValueExpression);
                this.state = 807;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 808;
                this.match(myGrammarParser.SPACE);
                this.state = 809;
                localctx.op = this.binary();
                this.state = 810;
                this.match(myGrammarParser.SPACE);
                this.state = 811;
                localctx.right = this.returnValueExpression(3); 
            }
            this.state = 817;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function DeclarationStatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_declarationStatements;
    return this;
}

DeclarationStatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementsContext.prototype.constructor = DeclarationStatementsContext;

DeclarationStatementsContext.prototype.DeclarationStatement = function() {
    return this.getToken(myGrammarParser.DeclarationStatement, 0);
};

DeclarationStatementsContext.prototype.declarationStatementCondition = function() {
    return this.getTypedRuleContext(DeclarationStatementConditionContext,0);
};

DeclarationStatementsContext.prototype.declarationStatementOf = function() {
    return this.getTypedRuleContext(DeclarationStatementOfContext,0);
};

DeclarationStatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterDeclarationStatements(this);
	}
};

DeclarationStatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitDeclarationStatements(this);
	}
};




myGrammarParser.DeclarationStatementsContext = DeclarationStatementsContext;

myGrammarParser.prototype.declarationStatements = function() {

    var localctx = new DeclarationStatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, myGrammarParser.RULE_declarationStatements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 818;
        this.match(myGrammarParser.DeclarationStatement);
        this.state = 820;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
        if(la_===1) {
            this.state = 819;
            this.declarationStatementCondition();

        }
        this.state = 823;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        if(la_===1) {
            this.state = 822;
            this.declarationStatementOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationStatementOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_declarationStatementOf;
    return this;
}

DeclarationStatementOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementOfContext.prototype.constructor = DeclarationStatementOfContext;

DeclarationStatementOfContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


DeclarationStatementOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

DeclarationStatementOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

DeclarationStatementOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

DeclarationStatementOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

DeclarationStatementOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterDeclarationStatementOf(this);
	}
};

DeclarationStatementOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitDeclarationStatementOf(this);
	}
};




myGrammarParser.DeclarationStatementOfContext = DeclarationStatementOfContext;

myGrammarParser.prototype.declarationStatementOf = function() {

    var localctx = new DeclarationStatementOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, myGrammarParser.RULE_declarationStatementOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 825;
        this.match(myGrammarParser.SPACE);
        this.state = 826;
        this.of();
        this.state = 827;
        this.match(myGrammarParser.SPACE);
        this.state = 831;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.CLASSES:
            this.state = 828;
            this.classes();
            break;
        case myGrammarParser.FUNCTION:
            this.state = 829;
            this.functions();
            break;
        case myGrammarParser.CONSTRUCTOR:
            this.state = 830;
            this.constructors();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationStatementConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_declarationStatementCondition;
    return this;
}

DeclarationStatementConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementConditionContext.prototype.constructor = DeclarationStatementConditionContext;

DeclarationStatementConditionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


DeclarationStatementConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

DeclarationStatementConditionContext.prototype.declarationStatementExpression = function() {
    return this.getTypedRuleContext(DeclarationStatementExpressionContext,0);
};

DeclarationStatementConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

DeclarationStatementConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterDeclarationStatementCondition(this);
	}
};

DeclarationStatementConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitDeclarationStatementCondition(this);
	}
};




myGrammarParser.DeclarationStatementConditionContext = DeclarationStatementConditionContext;

myGrammarParser.prototype.declarationStatementCondition = function() {

    var localctx = new DeclarationStatementConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, myGrammarParser.RULE_declarationStatementCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 833;
        this.match(myGrammarParser.SPACE);
        this.state = 834;
        this.where();
        this.state = 835;
        this.match(myGrammarParser.SPACE);
        this.state = 836;
        this.declarationStatementExpression(0);
        this.state = 838;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
        if(la_===1) {
            this.state = 837;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationStatementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_declarationStatementExpression;
    this.left = null; // DeclarationStatementExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // DeclarationStatementExpressionContext
    return this;
}

DeclarationStatementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationStatementExpressionContext.prototype.constructor = DeclarationStatementExpressionContext;

DeclarationStatementExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

DeclarationStatementExpressionContext.prototype.declarationStatementExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationStatementExpressionContext);
    } else {
        return this.getTypedRuleContext(DeclarationStatementExpressionContext,i);
    }
};

DeclarationStatementExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

DeclarationStatementExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

DeclarationStatementExpressionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


DeclarationStatementExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

DeclarationStatementExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

DeclarationStatementExpressionContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

DeclarationStatementExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

DeclarationStatementExpressionContext.prototype.initValues = function() {
    return this.getTypedRuleContext(InitValuesContext,0);
};

DeclarationStatementExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

DeclarationStatementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterDeclarationStatementExpression(this);
	}
};

DeclarationStatementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitDeclarationStatementExpression(this);
	}
};



myGrammarParser.prototype.declarationStatementExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new DeclarationStatementExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 116;
    this.enterRecursionRule(localctx, 116, myGrammarParser.RULE_declarationStatementExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 860;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 841;
            this.match(myGrammarParser.LPAREN);
            this.state = 842;
            this.declarationStatementExpression(0);
            this.state = 843;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
        case myGrammarParser.SPACE:
            this.state = 846;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===myGrammarParser.SPACE) {
                this.state = 845;
                this.match(myGrammarParser.SPACE);
            }

            this.state = 848;
            this.have();
            this.state = 849;
            this.match(myGrammarParser.SPACE);
            this.state = 855;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.ANNOTATION:
                this.state = 850;
                this.annotations();
                break;
            case myGrammarParser.SPECIFIER:
                this.state = 851;
                this.specifiers();
                break;
            case myGrammarParser.TYPES:
                this.state = 852;
                this.types();
                break;
            case myGrammarParser.NAME:
                this.state = 853;
                this.names();
                break;
            case myGrammarParser.InitValue:
                this.state = 854;
                this.initValues();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 858;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
            if(la_===1) {
                this.state = 857;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 870;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new DeclarationStatementExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_declarationStatementExpression);
                this.state = 862;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 863;
                this.match(myGrammarParser.SPACE);
                this.state = 864;
                localctx.op = this.binary();
                this.state = 865;
                this.match(myGrammarParser.SPACE);
                this.state = 866;
                localctx.right = this.declarationStatementExpression(3); 
            }
            this.state = 872;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ExpressionStatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_expressionStatements;
    return this;
}

ExpressionStatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementsContext.prototype.constructor = ExpressionStatementsContext;

ExpressionStatementsContext.prototype.ExpressionStatement = function() {
    return this.getToken(myGrammarParser.ExpressionStatement, 0);
};

ExpressionStatementsContext.prototype.expressionStatementCondition = function() {
    return this.getTypedRuleContext(ExpressionStatementConditionContext,0);
};

ExpressionStatementsContext.prototype.expressionStatementOf = function() {
    return this.getTypedRuleContext(ExpressionStatementOfContext,0);
};

ExpressionStatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExpressionStatements(this);
	}
};

ExpressionStatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExpressionStatements(this);
	}
};




myGrammarParser.ExpressionStatementsContext = ExpressionStatementsContext;

myGrammarParser.prototype.expressionStatements = function() {

    var localctx = new ExpressionStatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, myGrammarParser.RULE_expressionStatements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 873;
        this.match(myGrammarParser.ExpressionStatement);
        this.state = 875;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        if(la_===1) {
            this.state = 874;
            this.expressionStatementCondition();

        }
        this.state = 878;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        if(la_===1) {
            this.state = 877;
            this.expressionStatementOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_expressionStatementOf;
    return this;
}

ExpressionStatementOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementOfContext.prototype.constructor = ExpressionStatementOfContext;

ExpressionStatementOfContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ExpressionStatementOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ExpressionStatementOfContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

ExpressionStatementOfContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

ExpressionStatementOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExpressionStatementOf(this);
	}
};

ExpressionStatementOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExpressionStatementOf(this);
	}
};




myGrammarParser.ExpressionStatementOfContext = ExpressionStatementOfContext;

myGrammarParser.prototype.expressionStatementOf = function() {

    var localctx = new ExpressionStatementOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, myGrammarParser.RULE_expressionStatementOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 880;
        this.match(myGrammarParser.SPACE);
        this.state = 881;
        this.of();
        this.state = 882;
        this.match(myGrammarParser.SPACE);
        this.state = 886;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        switch(la_) {
        case 1:
            this.state = 883;
            this.functions();
            break;

        case 2:
            this.state = 884;
            this.constructors();
            break;

        case 3:
            this.state = 885;
            this.constructors();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_expressionStatementCondition;
    return this;
}

ExpressionStatementConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementConditionContext.prototype.constructor = ExpressionStatementConditionContext;

ExpressionStatementConditionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ExpressionStatementConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

ExpressionStatementConditionContext.prototype.expressionStatementExpression = function() {
    return this.getTypedRuleContext(ExpressionStatementExpressionContext,0);
};

ExpressionStatementConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

ExpressionStatementConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExpressionStatementCondition(this);
	}
};

ExpressionStatementConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExpressionStatementCondition(this);
	}
};




myGrammarParser.ExpressionStatementConditionContext = ExpressionStatementConditionContext;

myGrammarParser.prototype.expressionStatementCondition = function() {

    var localctx = new ExpressionStatementConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, myGrammarParser.RULE_expressionStatementCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 888;
        this.match(myGrammarParser.SPACE);
        this.state = 889;
        this.where();
        this.state = 890;
        this.match(myGrammarParser.SPACE);
        this.state = 891;
        this.expressionStatementExpression(0);
        this.state = 893;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
        if(la_===1) {
            this.state = 892;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_expressionStatementExpression;
    this.left = null; // ExpressionStatementExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ExpressionStatementExpressionContext
    return this;
}

ExpressionStatementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementExpressionContext.prototype.constructor = ExpressionStatementExpressionContext;

ExpressionStatementExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

ExpressionStatementExpressionContext.prototype.expressionStatementExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionStatementExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionStatementExpressionContext,i);
    }
};

ExpressionStatementExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

ExpressionStatementExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

ExpressionStatementExpressionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ExpressionStatementExpressionContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

ExpressionStatementExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

ExpressionStatementExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ExpressionStatementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterExpressionStatementExpression(this);
	}
};

ExpressionStatementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitExpressionStatementExpression(this);
	}
};



myGrammarParser.prototype.expressionStatementExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionStatementExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 124;
    this.enterRecursionRule(localctx, 124, myGrammarParser.RULE_expressionStatementExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 912;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 896;
            this.match(myGrammarParser.LPAREN);
            this.state = 897;
            this.expressionStatementExpression(0);
            this.state = 898;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
        case myGrammarParser.SPACE:
            this.state = 901;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===myGrammarParser.SPACE) {
                this.state = 900;
                this.match(myGrammarParser.SPACE);
            }

            this.state = 903;
            this.have();
            this.state = 904;
            this.match(myGrammarParser.SPACE);
            this.state = 907;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.CALL:
                this.state = 905;
                this.calls();
                break;
            case myGrammarParser.NAME:
                this.state = 906;
                this.names();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 910;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
            if(la_===1) {
                this.state = 909;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 922;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,100,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ExpressionStatementExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_expressionStatementExpression);
                this.state = 914;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 915;
                this.match(myGrammarParser.SPACE);
                this.state = 916;
                localctx.op = this.binary();
                this.state = 917;
                this.match(myGrammarParser.SPACE);
                this.state = 918;
                localctx.right = this.expressionStatementExpression(3); 
            }
            this.state = 924;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,100,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function InitValuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_initValues;
    return this;
}

InitValuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitValuesContext.prototype.constructor = InitValuesContext;

InitValuesContext.prototype.InitValue = function() {
    return this.getToken(myGrammarParser.InitValue, 0);
};

InitValuesContext.prototype.initValueCondition = function() {
    return this.getTypedRuleContext(InitValueConditionContext,0);
};

InitValuesContext.prototype.initValueOf = function() {
    return this.getTypedRuleContext(InitValueOfContext,0);
};

InitValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterInitValues(this);
	}
};

InitValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitInitValues(this);
	}
};




myGrammarParser.InitValuesContext = InitValuesContext;

myGrammarParser.prototype.initValues = function() {

    var localctx = new InitValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, myGrammarParser.RULE_initValues);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 925;
        this.match(myGrammarParser.InitValue);
        this.state = 927;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
        if(la_===1) {
            this.state = 926;
            this.initValueCondition();

        }
        this.state = 930;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        if(la_===1) {
            this.state = 929;
            this.initValueOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitValueOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_initValueOf;
    return this;
}

InitValueOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitValueOfContext.prototype.constructor = InitValueOfContext;

InitValueOfContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


InitValueOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

InitValueOfContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

InitValueOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterInitValueOf(this);
	}
};

InitValueOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitInitValueOf(this);
	}
};




myGrammarParser.InitValueOfContext = InitValueOfContext;

myGrammarParser.prototype.initValueOf = function() {

    var localctx = new InitValueOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, myGrammarParser.RULE_initValueOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 932;
        this.match(myGrammarParser.SPACE);
        this.state = 933;
        this.of();
        this.state = 934;
        this.match(myGrammarParser.SPACE);
        this.state = 935;
        this.declarationStatements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitValueConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_initValueCondition;
    return this;
}

InitValueConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitValueConditionContext.prototype.constructor = InitValueConditionContext;

InitValueConditionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


InitValueConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

InitValueConditionContext.prototype.initValueExpression = function() {
    return this.getTypedRuleContext(InitValueExpressionContext,0);
};

InitValueConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

InitValueConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterInitValueCondition(this);
	}
};

InitValueConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitInitValueCondition(this);
	}
};




myGrammarParser.InitValueConditionContext = InitValueConditionContext;

myGrammarParser.prototype.initValueCondition = function() {

    var localctx = new InitValueConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, myGrammarParser.RULE_initValueCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 937;
        this.match(myGrammarParser.SPACE);
        this.state = 938;
        this.where();
        this.state = 939;
        this.match(myGrammarParser.SPACE);
        this.state = 940;
        this.initValueExpression(0);
        this.state = 942;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
        if(la_===1) {
            this.state = 941;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitValueExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_initValueExpression;
    this.left = null; // InitValueExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // InitValueExpressionContext
    return this;
}

InitValueExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitValueExpressionContext.prototype.constructor = InitValueExpressionContext;

InitValueExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

InitValueExpressionContext.prototype.initValueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitValueExpressionContext);
    } else {
        return this.getTypedRuleContext(InitValueExpressionContext,i);
    }
};

InitValueExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

InitValueExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

InitValueExpressionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


InitValueExpressionContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

InitValueExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

InitValueExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

InitValueExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterInitValueExpression(this);
	}
};

InitValueExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitInitValueExpression(this);
	}
};



myGrammarParser.prototype.initValueExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new InitValueExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 132;
    this.enterRecursionRule(localctx, 132, myGrammarParser.RULE_initValueExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 961;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 945;
            this.match(myGrammarParser.LPAREN);
            this.state = 946;
            this.initValueExpression(0);
            this.state = 947;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
        case myGrammarParser.SPACE:
            this.state = 950;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===myGrammarParser.SPACE) {
                this.state = 949;
                this.match(myGrammarParser.SPACE);
            }

            this.state = 952;
            this.have();
            this.state = 953;
            this.match(myGrammarParser.SPACE);
            this.state = 956;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.CALL:
                this.state = 954;
                this.calls();
                break;
            case myGrammarParser.NAME:
                this.state = 955;
                this.names();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 959;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
            if(la_===1) {
                this.state = 958;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 971;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,108,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new InitValueExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_initValueExpression);
                this.state = 963;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 964;
                this.match(myGrammarParser.SPACE);
                this.state = 965;
                localctx.op = this.binary();
                this.state = 966;
                this.match(myGrammarParser.SPACE);
                this.state = 967;
                localctx.right = this.initValueExpression(3); 
            }
            this.state = 973;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,108,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.ARGUMENT = function() {
    return this.getToken(myGrammarParser.ARGUMENT, 0);
};

ArgumentsContext.prototype.argumentCondition = function() {
    return this.getTypedRuleContext(ArgumentConditionContext,0);
};

ArgumentsContext.prototype.argumentOf = function() {
    return this.getTypedRuleContext(ArgumentOfContext,0);
};

ArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterArguments(this);
	}
};

ArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitArguments(this);
	}
};




myGrammarParser.ArgumentsContext = ArgumentsContext;

myGrammarParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, myGrammarParser.RULE_arguments);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 974;
        this.match(myGrammarParser.ARGUMENT);
        this.state = 976;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
        if(la_===1) {
            this.state = 975;
            this.argumentCondition();

        }
        this.state = 979;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
        if(la_===1) {
            this.state = 978;
            this.argumentOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_argumentOf;
    return this;
}

ArgumentOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentOfContext.prototype.constructor = ArgumentOfContext;

ArgumentOfContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ArgumentOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ArgumentOfContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

ArgumentOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterArgumentOf(this);
	}
};

ArgumentOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitArgumentOf(this);
	}
};




myGrammarParser.ArgumentOfContext = ArgumentOfContext;

myGrammarParser.prototype.argumentOf = function() {

    var localctx = new ArgumentOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, myGrammarParser.RULE_argumentOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 981;
        this.match(myGrammarParser.SPACE);
        this.state = 982;
        this.of();
        this.state = 983;
        this.match(myGrammarParser.SPACE);
        this.state = 984;
        this.calls();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_argumentCondition;
    return this;
}

ArgumentConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentConditionContext.prototype.constructor = ArgumentConditionContext;

ArgumentConditionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ArgumentConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

ArgumentConditionContext.prototype.argumentExpression = function() {
    return this.getTypedRuleContext(ArgumentExpressionContext,0);
};

ArgumentConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

ArgumentConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterArgumentCondition(this);
	}
};

ArgumentConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitArgumentCondition(this);
	}
};




myGrammarParser.ArgumentConditionContext = ArgumentConditionContext;

myGrammarParser.prototype.argumentCondition = function() {

    var localctx = new ArgumentConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, myGrammarParser.RULE_argumentCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 986;
        this.match(myGrammarParser.SPACE);
        this.state = 987;
        this.where();
        this.state = 988;
        this.match(myGrammarParser.SPACE);
        this.state = 989;
        this.argumentExpression(0);
        this.state = 991;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
        if(la_===1) {
            this.state = 990;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_argumentExpression;
    this.left = null; // ArgumentExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ArgumentExpressionContext
    return this;
}

ArgumentExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentExpressionContext.prototype.constructor = ArgumentExpressionContext;

ArgumentExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

ArgumentExpressionContext.prototype.argumentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentExpressionContext);
    } else {
        return this.getTypedRuleContext(ArgumentExpressionContext,i);
    }
};

ArgumentExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

ArgumentExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

ArgumentExpressionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ArgumentExpressionContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

ArgumentExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

ArgumentExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ArgumentExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterArgumentExpression(this);
	}
};

ArgumentExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitArgumentExpression(this);
	}
};



myGrammarParser.prototype.argumentExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ArgumentExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 140;
    this.enterRecursionRule(localctx, 140, myGrammarParser.RULE_argumentExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1010;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 994;
            this.match(myGrammarParser.LPAREN);
            this.state = 995;
            this.argumentExpression(0);
            this.state = 996;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
        case myGrammarParser.SPACE:
            this.state = 999;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===myGrammarParser.SPACE) {
                this.state = 998;
                this.match(myGrammarParser.SPACE);
            }

            this.state = 1001;
            this.have();
            this.state = 1002;
            this.match(myGrammarParser.SPACE);
            this.state = 1005;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.CALL:
                this.state = 1003;
                this.calls();
                break;
            case myGrammarParser.NAME:
                this.state = 1004;
                this.names();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1008;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
            if(la_===1) {
                this.state = 1007;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1020;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,116,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ArgumentExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_argumentExpression);
                this.state = 1012;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 1013;
                this.match(myGrammarParser.SPACE);
                this.state = 1014;
                localctx.op = this.binary();
                this.state = 1015;
                this.match(myGrammarParser.SPACE);
                this.state = 1016;
                localctx.right = this.argumentExpression(3); 
            }
            this.state = 1022;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,116,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function CallsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_calls;
    return this;
}

CallsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallsContext.prototype.constructor = CallsContext;

CallsContext.prototype.CALL = function() {
    return this.getToken(myGrammarParser.CALL, 0);
};

CallsContext.prototype.callCondition = function() {
    return this.getTypedRuleContext(CallConditionContext,0);
};

CallsContext.prototype.callOf = function() {
    return this.getTypedRuleContext(CallOfContext,0);
};

CallsContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterCalls(this);
	}
};

CallsContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitCalls(this);
	}
};




myGrammarParser.CallsContext = CallsContext;

myGrammarParser.prototype.calls = function() {

    var localctx = new CallsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, myGrammarParser.RULE_calls);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1023;
        this.match(myGrammarParser.CALL);
        this.state = 1025;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
        if(la_===1) {
            this.state = 1024;
            this.callCondition();

        }
        this.state = 1028;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
        if(la_===1) {
            this.state = 1027;
            this.callOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_callOf;
    return this;
}

CallOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallOfContext.prototype.constructor = CallOfContext;

CallOfContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


CallOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

CallOfContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

CallOfContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

CallOfContext.prototype.expressionStatements = function() {
    return this.getTypedRuleContext(ExpressionStatementsContext,0);
};

CallOfContext.prototype.initValues = function() {
    return this.getTypedRuleContext(InitValuesContext,0);
};

CallOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterCallOf(this);
	}
};

CallOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitCallOf(this);
	}
};




myGrammarParser.CallOfContext = CallOfContext;

myGrammarParser.prototype.callOf = function() {

    var localctx = new CallOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, myGrammarParser.RULE_callOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1030;
        this.match(myGrammarParser.SPACE);
        this.state = 1031;
        this.of();
        this.state = 1032;
        this.match(myGrammarParser.SPACE);
        this.state = 1037;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.ARGUMENT:
            this.state = 1033;
            this.arguments();
            break;
        case myGrammarParser.ReturnValue:
            this.state = 1034;
            this.returnValues();
            break;
        case myGrammarParser.ExpressionStatement:
            this.state = 1035;
            this.expressionStatements();
            break;
        case myGrammarParser.InitValue:
            this.state = 1036;
            this.initValues();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_callCondition;
    return this;
}

CallConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallConditionContext.prototype.constructor = CallConditionContext;

CallConditionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


CallConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

CallConditionContext.prototype.callerExpression = function() {
    return this.getTypedRuleContext(CallerExpressionContext,0);
};

CallConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

CallConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterCallCondition(this);
	}
};

CallConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitCallCondition(this);
	}
};




myGrammarParser.CallConditionContext = CallConditionContext;

myGrammarParser.prototype.callCondition = function() {

    var localctx = new CallConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, myGrammarParser.RULE_callCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1039;
        this.match(myGrammarParser.SPACE);
        this.state = 1040;
        this.where();
        this.state = 1041;
        this.match(myGrammarParser.SPACE);
        this.state = 1042;
        this.callerExpression(0);
        this.state = 1044;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        if(la_===1) {
            this.state = 1043;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallerExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_callerExpression;
    this.left = null; // CallerExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // CallerExpressionContext
    return this;
}

CallerExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallerExpressionContext.prototype.constructor = CallerExpressionContext;

CallerExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

CallerExpressionContext.prototype.callerExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CallerExpressionContext);
    } else {
        return this.getTypedRuleContext(CallerExpressionContext,i);
    }
};

CallerExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

CallerExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

CallerExpressionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


CallerExpressionContext.prototype.callers = function() {
    return this.getTypedRuleContext(CallersContext,0);
};

CallerExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

CallerExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

CallerExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterCallerExpression(this);
	}
};

CallerExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitCallerExpression(this);
	}
};



myGrammarParser.prototype.callerExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new CallerExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 148;
    this.enterRecursionRule(localctx, 148, myGrammarParser.RULE_callerExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1063;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 1047;
            this.match(myGrammarParser.LPAREN);
            this.state = 1048;
            this.callerExpression(0);
            this.state = 1049;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
        case myGrammarParser.SPACE:
            this.state = 1052;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===myGrammarParser.SPACE) {
                this.state = 1051;
                this.match(myGrammarParser.SPACE);
            }

            this.state = 1054;
            this.have();
            this.state = 1055;
            this.match(myGrammarParser.SPACE);
            this.state = 1058;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.CALLER:
                this.state = 1056;
                this.callers();
                break;
            case myGrammarParser.NAME:
                this.state = 1057;
                this.names();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1061;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
            if(la_===1) {
                this.state = 1060;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1073;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,125,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CallerExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_callerExpression);
                this.state = 1065;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 1066;
                this.match(myGrammarParser.SPACE);
                this.state = 1067;
                localctx.op = this.binary();
                this.state = 1068;
                this.match(myGrammarParser.SPACE);
                this.state = 1069;
                localctx.right = this.callerExpression(3); 
            }
            this.state = 1075;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,125,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function CallersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_callers;
    return this;
}

CallersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallersContext.prototype.constructor = CallersContext;

CallersContext.prototype.CALLER = function() {
    return this.getToken(myGrammarParser.CALLER, 0);
};

CallersContext.prototype.callerCondition = function() {
    return this.getTypedRuleContext(CallerConditionContext,0);
};

CallersContext.prototype.callerOf = function() {
    return this.getTypedRuleContext(CallerOfContext,0);
};

CallersContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterCallers(this);
	}
};

CallersContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitCallers(this);
	}
};




myGrammarParser.CallersContext = CallersContext;

myGrammarParser.prototype.callers = function() {

    var localctx = new CallersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, myGrammarParser.RULE_callers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1076;
        this.match(myGrammarParser.CALLER);
        this.state = 1078;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
        if(la_===1) {
            this.state = 1077;
            this.callerCondition();

        }
        this.state = 1081;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
        if(la_===1) {
            this.state = 1080;
            this.callerOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallerOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_callerOf;
    return this;
}

CallerOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallerOfContext.prototype.constructor = CallerOfContext;

CallerOfContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


CallerOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

CallerOfContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

CallerOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterCallerOf(this);
	}
};

CallerOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitCallerOf(this);
	}
};




myGrammarParser.CallerOfContext = CallerOfContext;

myGrammarParser.prototype.callerOf = function() {

    var localctx = new CallerOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, myGrammarParser.RULE_callerOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1083;
        this.match(myGrammarParser.SPACE);
        this.state = 1084;
        this.of();
        this.state = 1085;
        this.match(myGrammarParser.SPACE);
        this.state = 1086;
        this.calls();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallerConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_callerCondition;
    return this;
}

CallerConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallerConditionContext.prototype.constructor = CallerConditionContext;

CallerConditionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


CallerConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

CallerConditionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

CallerConditionContext.prototype.NAME = function() {
    return this.getToken(myGrammarParser.NAME, 0);
};

CallerConditionContext.prototype.equalsTo = function() {
    return this.getTypedRuleContext(EqualsToContext,0);
};

CallerConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

CallerConditionContext.prototype.not = function() {
    return this.getTypedRuleContext(NotContext,0);
};

CallerConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

CallerConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterCallerCondition(this);
	}
};

CallerConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitCallerCondition(this);
	}
};




myGrammarParser.CallerConditionContext = CallerConditionContext;

myGrammarParser.prototype.callerCondition = function() {

    var localctx = new CallerConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, myGrammarParser.RULE_callerCondition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1088;
        this.match(myGrammarParser.SPACE);
        this.state = 1089;
        this.where();
        this.state = 1090;
        this.match(myGrammarParser.SPACE);
        this.state = 1091;
        this.have();
        this.state = 1092;
        this.match(myGrammarParser.SPACE);
        this.state = 1093;
        this.match(myGrammarParser.NAME);
        this.state = 1094;
        this.match(myGrammarParser.SPACE);
        this.state = 1096;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.T__11) {
            this.state = 1095;
            this.not();
        }

        this.state = 1099;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.SPACE) {
            this.state = 1098;
            this.match(myGrammarParser.SPACE);
        }

        this.state = 1101;
        this.equalsTo();
        this.state = 1102;
        this.match(myGrammarParser.SPACE);
        this.state = 1103;
        this.words();
        this.state = 1105;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
        if(la_===1) {
            this.state = 1104;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_values;
    return this;
}

ValuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuesContext.prototype.constructor = ValuesContext;

ValuesContext.prototype.VALUE = function() {
    return this.getToken(myGrammarParser.VALUE, 0);
};

ValuesContext.prototype.valueCondition = function() {
    return this.getTypedRuleContext(ValueConditionContext,0);
};

ValuesContext.prototype.valueOf = function() {
    return this.getTypedRuleContext(ValueOfContext,0);
};

ValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterValues(this);
	}
};

ValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitValues(this);
	}
};




myGrammarParser.ValuesContext = ValuesContext;

myGrammarParser.prototype.values = function() {

    var localctx = new ValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, myGrammarParser.RULE_values);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1107;
        this.match(myGrammarParser.VALUE);
        this.state = 1109;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
        if(la_===1) {
            this.state = 1108;
            this.valueCondition();

        }
        this.state = 1112;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.SPACE) {
            this.state = 1111;
            this.valueOf();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_valueOf;
    return this;
}

ValueOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueOfContext.prototype.constructor = ValueOfContext;

ValueOfContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ValueOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ValueOfContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

ValueOfContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

ValueOfContext.prototype.expressionStatements = function() {
    return this.getTypedRuleContext(ExpressionStatementsContext,0);
};

ValueOfContext.prototype.initValues = function() {
    return this.getTypedRuleContext(InitValuesContext,0);
};

ValueOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterValueOf(this);
	}
};

ValueOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitValueOf(this);
	}
};




myGrammarParser.ValueOfContext = ValueOfContext;

myGrammarParser.prototype.valueOf = function() {

    var localctx = new ValueOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, myGrammarParser.RULE_valueOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1114;
        this.match(myGrammarParser.SPACE);
        this.state = 1115;
        this.of();
        this.state = 1116;
        this.match(myGrammarParser.SPACE);
        this.state = 1121;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.ARGUMENT:
            this.state = 1117;
            this.arguments();
            break;
        case myGrammarParser.ReturnValue:
            this.state = 1118;
            this.returnValues();
            break;
        case myGrammarParser.ExpressionStatement:
            this.state = 1119;
            this.expressionStatements();
            break;
        case myGrammarParser.InitValue:
            this.state = 1120;
            this.initValues();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_valueCondition;
    return this;
}

ValueConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueConditionContext.prototype.constructor = ValueConditionContext;

ValueConditionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ValueConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

ValueConditionContext.prototype.equalsTo = function() {
    return this.getTypedRuleContext(EqualsToContext,0);
};

ValueConditionContext.prototype.words = function() {
    return this.getTypedRuleContext(WordsContext,0);
};

ValueConditionContext.prototype.not = function() {
    return this.getTypedRuleContext(NotContext,0);
};

ValueConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

ValueConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterValueCondition(this);
	}
};

ValueConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitValueCondition(this);
	}
};




myGrammarParser.ValueConditionContext = ValueConditionContext;

myGrammarParser.prototype.valueCondition = function() {

    var localctx = new ValueConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, myGrammarParser.RULE_valueCondition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1123;
        this.match(myGrammarParser.SPACE);
        this.state = 1124;
        this.where();
        this.state = 1125;
        this.match(myGrammarParser.SPACE);
        this.state = 1127;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.T__11) {
            this.state = 1126;
            this.not();
        }

        this.state = 1130;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.SPACE) {
            this.state = 1129;
            this.match(myGrammarParser.SPACE);
        }

        this.state = 1132;
        this.equalsTo();
        this.state = 1133;
        this.words();
        this.state = 1135;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===myGrammarParser.Comma) {
            this.state = 1134;
            this.match(myGrammarParser.Comma);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_classes;
    return this;
}

ClassesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassesContext.prototype.constructor = ClassesContext;

ClassesContext.prototype.CLASSES = function() {
    return this.getToken(myGrammarParser.CLASSES, 0);
};

ClassesContext.prototype.classCondition = function() {
    return this.getTypedRuleContext(ClassConditionContext,0);
};

ClassesContext.prototype.classOf = function() {
    return this.getTypedRuleContext(ClassOfContext,0);
};

ClassesContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterClasses(this);
	}
};

ClassesContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitClasses(this);
	}
};




myGrammarParser.ClassesContext = ClassesContext;

myGrammarParser.prototype.classes = function() {

    var localctx = new ClassesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, myGrammarParser.RULE_classes);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1137;
        this.match(myGrammarParser.CLASSES);
        this.state = 1139;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
        if(la_===1) {
            this.state = 1138;
            this.classCondition();

        }
        this.state = 1142;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
        if(la_===1) {
            this.state = 1141;
            this.classOf();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_classOf;
    return this;
}

ClassOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassOfContext.prototype.constructor = ClassOfContext;

ClassOfContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ClassOfContext.prototype.of = function() {
    return this.getTypedRuleContext(OfContext,0);
};

ClassOfContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

ClassOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterClassOf(this);
	}
};

ClassOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitClassOf(this);
	}
};




myGrammarParser.ClassOfContext = ClassOfContext;

myGrammarParser.prototype.classOf = function() {

    var localctx = new ClassOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, myGrammarParser.RULE_classOf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1144;
        this.match(myGrammarParser.SPACE);
        this.state = 1145;
        this.of();
        this.state = 1146;
        this.match(myGrammarParser.SPACE);
        this.state = 1147;
        this.classes();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_classCondition;
    return this;
}

ClassConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassConditionContext.prototype.constructor = ClassConditionContext;

ClassConditionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ClassConditionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

ClassConditionContext.prototype.classExpression = function() {
    return this.getTypedRuleContext(ClassExpressionContext,0);
};

ClassConditionContext.prototype.Comma = function() {
    return this.getToken(myGrammarParser.Comma, 0);
};

ClassConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterClassCondition(this);
	}
};

ClassConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitClassCondition(this);
	}
};




myGrammarParser.ClassConditionContext = ClassConditionContext;

myGrammarParser.prototype.classCondition = function() {

    var localctx = new ClassConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, myGrammarParser.RULE_classCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1149;
        this.match(myGrammarParser.SPACE);
        this.state = 1150;
        this.where();
        this.state = 1151;
        this.match(myGrammarParser.SPACE);
        this.state = 1152;
        this.classExpression(0);
        this.state = 1154;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
        if(la_===1) {
            this.state = 1153;
            this.match(myGrammarParser.Comma);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = myGrammarParser.RULE_classExpression;
    this.left = null; // ClassExpressionContext
    this.op = null; // BinaryContext
    this.right = null; // ClassExpressionContext
    return this;
}

ClassExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassExpressionContext.prototype.constructor = ClassExpressionContext;

ClassExpressionContext.prototype.LPAREN = function() {
    return this.getToken(myGrammarParser.LPAREN, 0);
};

ClassExpressionContext.prototype.classExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassExpressionContext);
    } else {
        return this.getTypedRuleContext(ClassExpressionContext,i);
    }
};

ClassExpressionContext.prototype.RPAREN = function() {
    return this.getToken(myGrammarParser.RPAREN, 0);
};

ClassExpressionContext.prototype.have = function() {
    return this.getTypedRuleContext(HaveContext,0);
};

ClassExpressionContext.prototype.SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(myGrammarParser.SPACE);
    } else {
        return this.getToken(myGrammarParser.SPACE, i);
    }
};


ClassExpressionContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

ClassExpressionContext.prototype.specifiers = function() {
    return this.getTypedRuleContext(SpecifiersContext,0);
};

ClassExpressionContext.prototype.names = function() {
    return this.getTypedRuleContext(NamesContext,0);
};

ClassExpressionContext.prototype.extensions = function() {
    return this.getTypedRuleContext(ExtensionsContext,0);
};

ClassExpressionContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

ClassExpressionContext.prototype.abstractFunctions = function() {
    return this.getTypedRuleContext(AbstractFunctionsContext,0);
};

ClassExpressionContext.prototype.constructors = function() {
    return this.getTypedRuleContext(ConstructorsContext,0);
};

ClassExpressionContext.prototype.declarationStatements = function() {
    return this.getTypedRuleContext(DeclarationStatementsContext,0);
};

ClassExpressionContext.prototype.classes = function() {
    return this.getTypedRuleContext(ClassesContext,0);
};

ClassExpressionContext.prototype.returnValues = function() {
    return this.getTypedRuleContext(ReturnValuesContext,0);
};

ClassExpressionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ClassExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.enterClassExpression(this);
	}
};

ClassExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof myGrammarListener ) {
        listener.exitClassExpression(this);
	}
};



myGrammarParser.prototype.classExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ClassExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 168;
    this.enterRecursionRule(localctx, 168, myGrammarParser.RULE_classExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1181;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case myGrammarParser.LPAREN:
            this.state = 1157;
            this.match(myGrammarParser.LPAREN);
            this.state = 1158;
            this.classExpression(0);
            this.state = 1159;
            this.match(myGrammarParser.RPAREN);
            break;
        case myGrammarParser.T__8:
        case myGrammarParser.SPACE:
            this.state = 1162;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===myGrammarParser.SPACE) {
                this.state = 1161;
                this.match(myGrammarParser.SPACE);
            }

            this.state = 1164;
            this.have();
            this.state = 1165;
            this.match(myGrammarParser.SPACE);
            this.state = 1176;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case myGrammarParser.ANNOTATION:
                this.state = 1166;
                this.annotations();
                break;
            case myGrammarParser.SPECIFIER:
                this.state = 1167;
                this.specifiers();
                break;
            case myGrammarParser.NAME:
                this.state = 1168;
                this.names();
                break;
            case myGrammarParser.EXTENSION:
                this.state = 1169;
                this.extensions();
                break;
            case myGrammarParser.FUNCTION:
                this.state = 1170;
                this.functions();
                break;
            case myGrammarParser.AbstractFunctions:
                this.state = 1171;
                this.abstractFunctions();
                break;
            case myGrammarParser.CONSTRUCTOR:
                this.state = 1172;
                this.constructors();
                break;
            case myGrammarParser.DeclarationStatement:
                this.state = 1173;
                this.declarationStatements();
                break;
            case myGrammarParser.CLASSES:
                this.state = 1174;
                this.classes();
                break;
            case myGrammarParser.ReturnValue:
                this.state = 1175;
                this.returnValues();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1179;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
            if(la_===1) {
                this.state = 1178;
                this.match(myGrammarParser.SPACE);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1191;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,144,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ClassExpressionContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, myGrammarParser.RULE_classExpression);
                this.state = 1183;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 1184;
                this.match(myGrammarParser.SPACE);
                this.state = 1185;
                localctx.op = this.binary();
                this.state = 1186;
                this.match(myGrammarParser.SPACE);
                this.state = 1187;
                localctx.right = this.classExpression(3); 
            }
            this.state = 1193;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,144,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


myGrammarParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 25:
			return this.annotationExpression_sempred(localctx, predIndex);
	case 32:
			return this.functionExpression_sempred(localctx, predIndex);
	case 36:
			return this.abstractFunctionExpression_sempred(localctx, predIndex);
	case 40:
			return this.constructorExpression_sempred(localctx, predIndex);
	case 44:
			return this.parameterExpression_sempred(localctx, predIndex);
	case 54:
			return this.returnValueExpression_sempred(localctx, predIndex);
	case 58:
			return this.declarationStatementExpression_sempred(localctx, predIndex);
	case 62:
			return this.expressionStatementExpression_sempred(localctx, predIndex);
	case 66:
			return this.initValueExpression_sempred(localctx, predIndex);
	case 70:
			return this.argumentExpression_sempred(localctx, predIndex);
	case 74:
			return this.callerExpression_sempred(localctx, predIndex);
	case 84:
			return this.classExpression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

myGrammarParser.prototype.annotationExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.functionExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.abstractFunctionExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.constructorExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.parameterExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.returnValueExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.declarationStatementExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.expressionStatementExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.initValueExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.argumentExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 9:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.callerExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 10:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

myGrammarParser.prototype.classExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 11:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.myGrammarParser = myGrammarParser;
